{
    "docs": [
        {
            "location": "/", 
            "text": "The Lurch Deductive Engine (LDE)\n\n\nThis documentation site contains the design of the LDE.\n\n\nWe will implement that design, and as we do so, the various phases of\ndevelopment (accessible from the navigation menu above) will be converted\nfrom pages describing the plan into pages describing the completed API.\n\n\nUse the menu at the top of this site to find content.\n\n\nSee the source code repository here.", 
            "title": "Home"
        }, 
        {
            "location": "/#the-lurch-deductive-engine-lde", 
            "text": "This documentation site contains the design of the LDE.  We will implement that design, and as we do so, the various phases of\ndevelopment (accessible from the navigation menu above) will be converted\nfrom pages describing the plan into pages describing the completed API.  Use the menu at the top of this site to find content.  See the source code repository here.", 
            "title": "The Lurch Deductive Engine (LDE)"
        }, 
        {
            "location": "/design-overview/", 
            "text": "LDE Design Overview\n\n\nThis page lists the design principles adopted by the Lurch team to date\nregarding the LDE, with reasons and explanations for each.  This document\ncan be used as reference, and to guide development, but it may also be\nchanged as better ideas come along.\n\n\nTo see the specific phases of development planned for the LDE, and what's\ncompleted, use the \"Phases\" menu above.\n\n\nElegance and Simplicity\n\n\nThese are of utmost importance, because\n\n\n\n\nthey make Lurch easier to explain to students or in an Advanced User's\n   Guide (AUG),\n\n\nthey make Lurch easier to test because it has fewer unusual corner cases\n   or special handling of odd circumstances,\n\n\nthey make Lurch easier to implement for the same reason, and\n\n\nthey make it easier for us to be confident that our designs are good,\n   because they're easier to hold in your head and grok all at once.\n\n\n\n\nFeedback and Validation\n\n\n\n\nThe primary purpose of the Lurch application is to give feedback to the\n   user about the work they type into their document.\n\n\nBecause this will often involve validating steps of work in a proof, we\n   may use the terms \"feedback\" and \"validation\" interchangeably, even\n   though technically validation is just a particular type of feedback\n   (though the most common type in our case).\n\n\nOne-Pass Validation (OPV)\n is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   does so by reprocessing every bit of meaningful content from scratch, in\n   one (large, possibly time-consuming) pass over the whole document.\n\n\nReal-Time Validation (RTV)\n is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   attempts to re-use as much information from previous validation as\n   possible, only updating those portions of it that need updating in\n   response to the specific change the user just made.  Thus RTV is\n   trickier to design and implement than OPV, but more efficient at\n   run-time.\n\n\nAn important concept for our test suite is that any RTV design can be\n   converted to an OPV design trivially, and then used for comparison\n   testing.  Simply replace all sophisticated RTV-style change event\n   handlers with OPV-style ones, that mark the entire document as needing\n   reprocessing.  Then any potential change that can be made to the user's\n   document can be run through each of these engines in parallel, and the\n   results compared for equivalence.\n\n\nNote that the choice of OPV vs. RTV is independent of the choice of\n   manual validation vs. automatic validation.  RTV certainly makes\n   automatic validation nicer, and thus makes manual validation less\n   appealing, but you could choose anything from among\n   \n\\{\\text{OPV},\\text{RTV}\\}\\times\\{\\text{auto},\\text{manual}\\}\n.\n\n\n\n\nLDE and UI\n\n\n\n\nWe have a paradigm in which the UI is exactly that (user interface) and\n   the LDE (Lurch Deductive Engine) is the brain that operates in one or\n   more background threads, processing what the user has given the app\n   through the UI.\n\n\nWe aim to implement every feature in the LDE if possible, but implement\n   in the UI only those features that can't be implemented in the LDE.\n   Here, \"if possible\" means that it would not break the model-view\n   paradigm to implement it in the LDE (i.e., the LDE wouldn't need to\n   speak HTML).  Reasons for this:\n\n\nThe LDE will be implemented in pure JS, no DOM, so that it can be\n  used in a WebWorker and in the unit testing suite.\n\n\nTherefore the bigger the LDE is, the more of our code has been\n  subject to rigorous unit tests.\n\n\nAnd the bigger the LDE is, the more of our code is run out of the UX\n  thread, and thus the more responsive our app is.\n\n\n\n\n\n\nThe decisions recorded here are almost entirely about the design of the\n   LDE, not the UI.\n\n\n\n\nStructures\n\n\n\n\nDefine a \nstructure\n to be the basic unit of meaning in the LDE.\n\n\nThis includes document-level structures such as a section,\n  subsection, proof, subproof, etc., which are analogous to block-level\n  items like DIV or P in HTML, and \n\\begin{X}...\\end{X}\n in LaTeX.\n\n\nBut it also includes inline structures (SPANs in HTML, \n\\foo{...}\n or\n  \n$...$\n in LaTeX).\n\n\nStructures can be nested acyclically.\n\n\n\n\n\n\nExamples of types of structures that we may choose to define later:\n\n\nProofs/Subproofs, with one specific flavor of it being the kind that\n  declares a variable first\n\n\nDefinitions of rules, axioms, language rules\n\n\nFormal systems (or \"mathematical topics\")\n\n\nTheorems and pairing of them with proofs\n\n\nExpressions\n\n\nMaybe variables will be declared by based on placing a variable\n  inside an expression by itself, at the head of a variable declaration\n  subproof, or maybe by creating a new structure type for variable\n  declarations, or maybe something else\n\n\nHomework problems\n\n\nExamples (an environment in which anything you declare ends its scope\n  at the end of the example, no matter what it was)\n\n\n\n\n\n\nThe set of structure types should equal the set of common mathematical\n   structures that mathematics students should be learning anyway, and they\n   should behave the same in Lurch as in mathematics.  This ensures that\n   Lurch doesn't add to the mathematics learning curve in this sense.\n\n\nNot every structure is permitted to contain every other type of\n   structure.  But such rules are enforced through validation, which we\n   will not be defining for some time yet, so this comment is just a\n   preview of what's to come.  For instance, expressions can contain only\n   other expressions.\n\n\nAt some later point, we may care about the meanings of structures, so\n   that they can be used as premises in proofs.  At such a time, we will\n   ensure that a structure's meaning includes the unjustified steps in the\n   structure (which function as premises), the final step in the structure\n   (which functions as its conclusion), any variables declared within it\n   (which are bound in it), and so on, but it is not necessary to define\n   those details yet.  I mention them here merely so that the idea is not\n   lost.\n\n\n\n\nAccessibility\n\n\n\n\nA structure A is accessible to a structure B if some ancestor structure\n   of B (possibly B itself) is a sibling of A, but A is the (strictly)\n   earlier of the two siblings within their parent structure.\n\n\nEquivalently, we can speak of \"scope\" rather than accessibility.  The\n   scope of a structure A is all later siblings of A in the same parent,\n   along with all their descendants.  Thus B is in the scope of A iff A is\n   accessible to B.\n\n\n\n\nAttributes\n\n\n\n\nEvery structure contains a key-value dictionary called \nexternal\n   attributes,\n which are read-only from the point of view of the LDE, and\n   are read-write from the point of view of the UI.  They are called\n   \"external\" because, from the LDE's point of view, they come from\n   elsewhere (the UI).\n\n\nEvery structure contains a key-value dictionary called \ncomputed\n   attributes,\n which are read-only from the point of view of the UI, and\n   are read-write from the point of view of the LDE.  They are called\n   \"computed\" because the LDE's job is to compute stuff, which it stores in\n   these attributes.\n\n\nThese two dictionaries are disjoint.  It is possible for a single key k\n   to have one value in the one dictionary, and another value in the other\n   dictionary.\n\n\n\n\nDocument\n\n\n\n\nThe entire document will be represented to the LDE as a single\n   structure, usually with a nonzero number of inner structures.\n\n\nWe call the representation of the entire document as a structure the LDE\n   Document, a phrase chosen to connote \"the LDE's view of the document,\n   not the one the user sees in the UI.\"\n\n\nOne main job of the UI is to convert from what the user sees into the\n   LDE Document.\n\n\nSo to the list of structure types above, add \"Document.\"\n\n\nThe entire LDE Document data structure will live inside the LDE module.\n   In the main Lurch app, this implies that the LDE Document will be stored\n   in the background thread where the LDE runs, not in the UI.  Thus the UI\n   will communicate across threads to create the LDE Document.  Details on\n   this later.\n\n\n\n\nSome brief UI comments\n\n\n\n\nMost of the purpose of the UI will be to convert the HTML document the\n   user sees into the LDE Document the LDE processes, then to show the user\n   in the HTML document and feedback the LDE sends back.\n\n\nIn service to that purpose, the UI contains many (largely independent\n  and usually small) features for encoding the HTML document into the\n  LDE Document.\n\n\nExamples include conventions for processing groups, connections,\n  numbered lists, section headings, finding meaning in text through\n  regular expressions, and the meanings of various LaTeX-like\n  \n\\shortcuts\n.\n\n\nA document author chooses which subset of these features to enable by\n  making choices in the document settings dialog.  Those settings are\n  stored in document metadata, and propagate to dependencies (defined\n  below).\n\n\nThe UI will have very little hard-coded (i.e., non-customizable)\n  procedures for interpreting the HTML document into the LDE document;\n  the settings above are highly choosable by the user.\n\n\nThe only constrained interpretation conventions (i.e., few or no\n  options for changing the interpretation) would be those that have\n  mathematical names, such as \"proof,\" which have a specific meaning\n  that it would be educationally counterproductive to interpret another\n  way.\n\n\nIn addition, we may choose a specific set of document settings to use\n  throughout the standard libraries that ship with Lurch, to show best\n  practices and help users with consistency and predictability.\n\n\n\n\n\n\nOther UI details:\n\n\nBecause we have a UI that allows users to make connections among\n  groups, the structures in the hierarchy may include, among their\n  external attributes, a binary, edge-labeled multigraph.  (Note that\n  this does not require that every connection in the HTML document\n  become two Structures in the LDE Document with attributes connecting\n  them.  Nor does it stipulate that some concept--such as\n  labeling--that we might decide to represent as part of this\n  multigraph can't also be represented sometimes in another way as\n  well.)\n\n\nIf we require the LDE to send a signal when validation completes,\n  then we can make a UI setting of whether to show feedback as the\n  feedback arrives, or only after the \"all validation complete\" signal\n  arrives (and thus feedback has stabilized).\n\n\n\n\n\n\n\n\nStructures are OOP Objects\n\n\n\n\nA structure exposes a set of data and methods about its internal state\n   to the rest of the app, in much the same way as Objects in OOP do, with\n   the type of structure (from the list above, e.g., Theorem or Example)\n   functioning as the \"class\" of the Object.\n\n\nSome methods in a structure will be time-intensive to run, and thus\n   should use an asynchronous paradigm, queueing the tasks for running when\n   the LDE thread has time.  The most time-intensive tasks, such as\n   matching and parsing, may be delegated to yet other background threads\n   by the LDE thread.\n\n\n\n\nExporting data from structures\n\n\n\n\nHere is an important example method that all structures should have\n   (though each class may implement it differently):\n\n\nA method that reports which structures (usually child structures of\n  A), if any, are to be made accessible to any structure B in the scope\n  of A (thus changing the normal scoping rules).\n\n\nThe flexibility inherent in the vagueness of this exporting notion is\n  useful.  For instance, a single theorem in the document might be\n  encoded in the LDE document as having many children, some of which\n  are its various interpretations as a rule of inference, and export\n  them all, so that any can be used/cited later.\n\n\nNote that the exports method need not copy child structures directly\n  for exporting.  It may combine/manipulate/compute structures to\n  export based on its children in any way.  Thus \"scope\" is a simple\n  and clean definition, which this function sort of indirectly extends.\n\n\n\n\n\n\nWe will define much of the functionality of the LDE as the various\n   structures in the document calling methods in one another, which is\n   simple and elegant.  But it requires that we carefully track and cache\n   the clean/dirty status of each structure, to retain efficiency.\n\n\n\n\nDependencies as a special case\n\n\n\n\nThe current paradigm (already implemented) in webLurch is that a\n   dependency must specify what data it exports to any document that\n   depends on it.\n\n\nSuch data will be stored in the dependency document's metadata, so that\n   documents depending on it can easily import it.  It will include\n   anything that the dependency imported from its dependencies, and so on\n   to arbitrary depth.\n\n\nBecause we now require every structure to know what it exports to later\n   structures, the question of what a document exports is simply a special\n   case of that.  The document is itself a structure, and thus it can\n   already answer the \"what does this document export?\" question.\n\n\nRecall from above that one of the pieces of data that a document will\n   export is its document settings, as described earlier.\n\n\n\n\nDesign Phases\n\n\n\n\nThe question, \"Which structure should be designed first?\" is tricky\n   because each structure is rather complex, and they're rather\n   interdependent.\n\n\nOne approach would be to design each structure incrementally, adding\n   features in phases.\n\n\nThus we might begin with an LDE implementation that has just a few\n   features for a few structure types, and yet is sufficient for building\n   very simply Lurch libraries.\n\n\nThis lets us build familiarity and knowledge as we do the design, so\n   we're better at it by the time we get to the hard stuff.\n\n\nPhases 2, 3, and so on can add features and structure types, thus\n   enabling more and more sophisticated Lurch libraries, until we have\n   reached the level of power that supports a first proof course.\n\n\n\n\nSee other documentation on this site for the contents of each design phase.", 
            "title": "Overview"
        }, 
        {
            "location": "/design-overview/#lde-design-overview", 
            "text": "This page lists the design principles adopted by the Lurch team to date\nregarding the LDE, with reasons and explanations for each.  This document\ncan be used as reference, and to guide development, but it may also be\nchanged as better ideas come along.  To see the specific phases of development planned for the LDE, and what's\ncompleted, use the \"Phases\" menu above.", 
            "title": "LDE Design Overview"
        }, 
        {
            "location": "/design-overview/#elegance-and-simplicity", 
            "text": "These are of utmost importance, because   they make Lurch easier to explain to students or in an Advanced User's\n   Guide (AUG),  they make Lurch easier to test because it has fewer unusual corner cases\n   or special handling of odd circumstances,  they make Lurch easier to implement for the same reason, and  they make it easier for us to be confident that our designs are good,\n   because they're easier to hold in your head and grok all at once.", 
            "title": "Elegance and Simplicity"
        }, 
        {
            "location": "/design-overview/#feedback-and-validation", 
            "text": "The primary purpose of the Lurch application is to give feedback to the\n   user about the work they type into their document.  Because this will often involve validating steps of work in a proof, we\n   may use the terms \"feedback\" and \"validation\" interchangeably, even\n   though technically validation is just a particular type of feedback\n   (though the most common type in our case).  One-Pass Validation (OPV)  is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   does so by reprocessing every bit of meaningful content from scratch, in\n   one (large, possibly time-consuming) pass over the whole document.  Real-Time Validation (RTV)  is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   attempts to re-use as much information from previous validation as\n   possible, only updating those portions of it that need updating in\n   response to the specific change the user just made.  Thus RTV is\n   trickier to design and implement than OPV, but more efficient at\n   run-time.  An important concept for our test suite is that any RTV design can be\n   converted to an OPV design trivially, and then used for comparison\n   testing.  Simply replace all sophisticated RTV-style change event\n   handlers with OPV-style ones, that mark the entire document as needing\n   reprocessing.  Then any potential change that can be made to the user's\n   document can be run through each of these engines in parallel, and the\n   results compared for equivalence.  Note that the choice of OPV vs. RTV is independent of the choice of\n   manual validation vs. automatic validation.  RTV certainly makes\n   automatic validation nicer, and thus makes manual validation less\n   appealing, but you could choose anything from among\n    \\{\\text{OPV},\\text{RTV}\\}\\times\\{\\text{auto},\\text{manual}\\} .", 
            "title": "Feedback and Validation"
        }, 
        {
            "location": "/design-overview/#lde-and-ui", 
            "text": "We have a paradigm in which the UI is exactly that (user interface) and\n   the LDE (Lurch Deductive Engine) is the brain that operates in one or\n   more background threads, processing what the user has given the app\n   through the UI.  We aim to implement every feature in the LDE if possible, but implement\n   in the UI only those features that can't be implemented in the LDE.\n   Here, \"if possible\" means that it would not break the model-view\n   paradigm to implement it in the LDE (i.e., the LDE wouldn't need to\n   speak HTML).  Reasons for this:  The LDE will be implemented in pure JS, no DOM, so that it can be\n  used in a WebWorker and in the unit testing suite.  Therefore the bigger the LDE is, the more of our code has been\n  subject to rigorous unit tests.  And the bigger the LDE is, the more of our code is run out of the UX\n  thread, and thus the more responsive our app is.    The decisions recorded here are almost entirely about the design of the\n   LDE, not the UI.", 
            "title": "LDE and UI"
        }, 
        {
            "location": "/design-overview/#structures", 
            "text": "Define a  structure  to be the basic unit of meaning in the LDE.  This includes document-level structures such as a section,\n  subsection, proof, subproof, etc., which are analogous to block-level\n  items like DIV or P in HTML, and  \\begin{X}...\\end{X}  in LaTeX.  But it also includes inline structures (SPANs in HTML,  \\foo{...}  or\n   $...$  in LaTeX).  Structures can be nested acyclically.    Examples of types of structures that we may choose to define later:  Proofs/Subproofs, with one specific flavor of it being the kind that\n  declares a variable first  Definitions of rules, axioms, language rules  Formal systems (or \"mathematical topics\")  Theorems and pairing of them with proofs  Expressions  Maybe variables will be declared by based on placing a variable\n  inside an expression by itself, at the head of a variable declaration\n  subproof, or maybe by creating a new structure type for variable\n  declarations, or maybe something else  Homework problems  Examples (an environment in which anything you declare ends its scope\n  at the end of the example, no matter what it was)    The set of structure types should equal the set of common mathematical\n   structures that mathematics students should be learning anyway, and they\n   should behave the same in Lurch as in mathematics.  This ensures that\n   Lurch doesn't add to the mathematics learning curve in this sense.  Not every structure is permitted to contain every other type of\n   structure.  But such rules are enforced through validation, which we\n   will not be defining for some time yet, so this comment is just a\n   preview of what's to come.  For instance, expressions can contain only\n   other expressions.  At some later point, we may care about the meanings of structures, so\n   that they can be used as premises in proofs.  At such a time, we will\n   ensure that a structure's meaning includes the unjustified steps in the\n   structure (which function as premises), the final step in the structure\n   (which functions as its conclusion), any variables declared within it\n   (which are bound in it), and so on, but it is not necessary to define\n   those details yet.  I mention them here merely so that the idea is not\n   lost.", 
            "title": "Structures"
        }, 
        {
            "location": "/design-overview/#accessibility", 
            "text": "A structure A is accessible to a structure B if some ancestor structure\n   of B (possibly B itself) is a sibling of A, but A is the (strictly)\n   earlier of the two siblings within their parent structure.  Equivalently, we can speak of \"scope\" rather than accessibility.  The\n   scope of a structure A is all later siblings of A in the same parent,\n   along with all their descendants.  Thus B is in the scope of A iff A is\n   accessible to B.", 
            "title": "Accessibility"
        }, 
        {
            "location": "/design-overview/#attributes", 
            "text": "Every structure contains a key-value dictionary called  external\n   attributes,  which are read-only from the point of view of the LDE, and\n   are read-write from the point of view of the UI.  They are called\n   \"external\" because, from the LDE's point of view, they come from\n   elsewhere (the UI).  Every structure contains a key-value dictionary called  computed\n   attributes,  which are read-only from the point of view of the UI, and\n   are read-write from the point of view of the LDE.  They are called\n   \"computed\" because the LDE's job is to compute stuff, which it stores in\n   these attributes.  These two dictionaries are disjoint.  It is possible for a single key k\n   to have one value in the one dictionary, and another value in the other\n   dictionary.", 
            "title": "Attributes"
        }, 
        {
            "location": "/design-overview/#document", 
            "text": "The entire document will be represented to the LDE as a single\n   structure, usually with a nonzero number of inner structures.  We call the representation of the entire document as a structure the LDE\n   Document, a phrase chosen to connote \"the LDE's view of the document,\n   not the one the user sees in the UI.\"  One main job of the UI is to convert from what the user sees into the\n   LDE Document.  So to the list of structure types above, add \"Document.\"  The entire LDE Document data structure will live inside the LDE module.\n   In the main Lurch app, this implies that the LDE Document will be stored\n   in the background thread where the LDE runs, not in the UI.  Thus the UI\n   will communicate across threads to create the LDE Document.  Details on\n   this later.", 
            "title": "Document"
        }, 
        {
            "location": "/design-overview/#some-brief-ui-comments", 
            "text": "Most of the purpose of the UI will be to convert the HTML document the\n   user sees into the LDE Document the LDE processes, then to show the user\n   in the HTML document and feedback the LDE sends back.  In service to that purpose, the UI contains many (largely independent\n  and usually small) features for encoding the HTML document into the\n  LDE Document.  Examples include conventions for processing groups, connections,\n  numbered lists, section headings, finding meaning in text through\n  regular expressions, and the meanings of various LaTeX-like\n   \\shortcuts .  A document author chooses which subset of these features to enable by\n  making choices in the document settings dialog.  Those settings are\n  stored in document metadata, and propagate to dependencies (defined\n  below).  The UI will have very little hard-coded (i.e., non-customizable)\n  procedures for interpreting the HTML document into the LDE document;\n  the settings above are highly choosable by the user.  The only constrained interpretation conventions (i.e., few or no\n  options for changing the interpretation) would be those that have\n  mathematical names, such as \"proof,\" which have a specific meaning\n  that it would be educationally counterproductive to interpret another\n  way.  In addition, we may choose a specific set of document settings to use\n  throughout the standard libraries that ship with Lurch, to show best\n  practices and help users with consistency and predictability.    Other UI details:  Because we have a UI that allows users to make connections among\n  groups, the structures in the hierarchy may include, among their\n  external attributes, a binary, edge-labeled multigraph.  (Note that\n  this does not require that every connection in the HTML document\n  become two Structures in the LDE Document with attributes connecting\n  them.  Nor does it stipulate that some concept--such as\n  labeling--that we might decide to represent as part of this\n  multigraph can't also be represented sometimes in another way as\n  well.)  If we require the LDE to send a signal when validation completes,\n  then we can make a UI setting of whether to show feedback as the\n  feedback arrives, or only after the \"all validation complete\" signal\n  arrives (and thus feedback has stabilized).", 
            "title": "Some brief UI comments"
        }, 
        {
            "location": "/design-overview/#structures-are-oop-objects", 
            "text": "A structure exposes a set of data and methods about its internal state\n   to the rest of the app, in much the same way as Objects in OOP do, with\n   the type of structure (from the list above, e.g., Theorem or Example)\n   functioning as the \"class\" of the Object.  Some methods in a structure will be time-intensive to run, and thus\n   should use an asynchronous paradigm, queueing the tasks for running when\n   the LDE thread has time.  The most time-intensive tasks, such as\n   matching and parsing, may be delegated to yet other background threads\n   by the LDE thread.", 
            "title": "Structures are OOP Objects"
        }, 
        {
            "location": "/design-overview/#exporting-data-from-structures", 
            "text": "Here is an important example method that all structures should have\n   (though each class may implement it differently):  A method that reports which structures (usually child structures of\n  A), if any, are to be made accessible to any structure B in the scope\n  of A (thus changing the normal scoping rules).  The flexibility inherent in the vagueness of this exporting notion is\n  useful.  For instance, a single theorem in the document might be\n  encoded in the LDE document as having many children, some of which\n  are its various interpretations as a rule of inference, and export\n  them all, so that any can be used/cited later.  Note that the exports method need not copy child structures directly\n  for exporting.  It may combine/manipulate/compute structures to\n  export based on its children in any way.  Thus \"scope\" is a simple\n  and clean definition, which this function sort of indirectly extends.    We will define much of the functionality of the LDE as the various\n   structures in the document calling methods in one another, which is\n   simple and elegant.  But it requires that we carefully track and cache\n   the clean/dirty status of each structure, to retain efficiency.", 
            "title": "Exporting data from structures"
        }, 
        {
            "location": "/design-overview/#dependencies-as-a-special-case", 
            "text": "The current paradigm (already implemented) in webLurch is that a\n   dependency must specify what data it exports to any document that\n   depends on it.  Such data will be stored in the dependency document's metadata, so that\n   documents depending on it can easily import it.  It will include\n   anything that the dependency imported from its dependencies, and so on\n   to arbitrary depth.  Because we now require every structure to know what it exports to later\n   structures, the question of what a document exports is simply a special\n   case of that.  The document is itself a structure, and thus it can\n   already answer the \"what does this document export?\" question.  Recall from above that one of the pieces of data that a document will\n   export is its document settings, as described earlier.", 
            "title": "Dependencies as a special case"
        }, 
        {
            "location": "/design-overview/#design-phases", 
            "text": "The question, \"Which structure should be designed first?\" is tricky\n   because each structure is rather complex, and they're rather\n   interdependent.  One approach would be to design each structure incrementally, adding\n   features in phases.  Thus we might begin with an LDE implementation that has just a few\n   features for a few structure types, and yet is sufficient for building\n   very simply Lurch libraries.  This lets us build familiarity and knowledge as we do the design, so\n   we're better at it by the time we get to the hard stuff.  Phases 2, 3, and so on can add features and structure types, thus\n   enabling more and more sophisticated Lurch libraries, until we have\n   reached the level of power that supports a first proof course.   See other documentation on this site for the contents of each design phase.", 
            "title": "Design Phases"
        }, 
        {
            "location": "/phase1-structures/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 1: Structures\n\n\nContent\n\n\nIn this phase, we just design the generic Structure class on which\neverything else will depend, and the infrastructure of the LDE itself.\n\n\nThe \nStructure\n module defines a single \nStructure\n class, and has been\nimplemented. \nIts API Documentation appears here\n.\n\n\nThe \nLDE\n module defines several global functions, and has been implemented.\n\nIts API Documentation appears here\n.\n\n\nGoal\n\n\nAt the end of this phase, we could write unit tests of the whole Structure\nclass and its LDE context, thus guaranteeing that all later phases rest on a\ngood foundation.\n\n\nStatus\n\n\nThis phase was implemented and documented in the API Documentation, but has\nsince seen a major (and beneficial!) re-design, and that re-design has not\nyet been implemented.  It should be done as follows:\n\n\nTie up loose ends on the old version\n\n\n\n\n Just as the \nStructure\n class has tests for all \nwas*\n events (such\n   as \nwasRemoved\n, etc.), add tests for the corresponding \nwillBe*\n events.\n\n\n Add API documentation for these events, or update what documentation\n\n\n Once the unit tests pass, commit.\n\n\n\n\nRemove files we no longer need (and what depends on them)\n\n\n\n\n Delete the file \nsrc/statement.litcoffee\n, as well as the\n   corresponding files for reason, label, and rule.\n\n\n Delete the analogous four files in the \ntests/\n folder.\n\n\n Search for any code that imports any of those files and delete the\n\n\n Search through all the documentation for any documentation that\n\n\n Run the unit test suite and verify that all tests pass.  If not,\n\n\n Once all tests pass, rebuild everything, commit, and push to the\n\n\n\n\nRemove code portions we no longer need\n\n\nAttribute conventions\n\n\n\n\n Remove from \nsrc/structure.litcoffee\n the entire section entitled\n   \"Attribute conventions,\" because many of those conventions will change\n   as we build upon our new design.\n\n\n Remove any unit tests that dealt with any of the code deleted in the\n\n\n Search for any documentation that mentioned code deleted in that same\n\n\n Once all tests pass, rebuild everything, commit, and push to the\n\n\n\n\nComputed attributes\n\n\n\n\n Remove from \nsrc/structure.litcoffee\n the entire section entitled\n   \"Computed attributes,\" because we no longer need to distinguish computed\n   from external attributes.\n\n\n Remove any unit tests that dealt with any of the code deleted in the\n\n\n Search for any documentation that mentioned code deleted in that same\n\n\n\n\nExternal attributes\n\n\n\n\n In the \nsrc/structure.litcoffee\n file, in the section entitled\n   \"External attributes,\" rename everything so that it no longer contains\n   the word \"external.\"  For example, \ngetExternalAttribute\n would become\n   just \ngetAttribute\n, because we no longer need to distinguish computed\n   from external attributes.\n\n\n Throughout the unit tests, find any mention of external attributes\n\n\n Search for any documentation that mentioned external attributes and", 
            "title": "Phase 1, Structures"
        }, 
        {
            "location": "/phase1-structures/#lde-design-phase-1-structures", 
            "text": "", 
            "title": "LDE Design Phase 1: Structures"
        }, 
        {
            "location": "/phase1-structures/#content", 
            "text": "In this phase, we just design the generic Structure class on which\neverything else will depend, and the infrastructure of the LDE itself.  The  Structure  module defines a single  Structure  class, and has been\nimplemented.  Its API Documentation appears here .  The  LDE  module defines several global functions, and has been implemented. Its API Documentation appears here .", 
            "title": "Content"
        }, 
        {
            "location": "/phase1-structures/#goal", 
            "text": "At the end of this phase, we could write unit tests of the whole Structure\nclass and its LDE context, thus guaranteeing that all later phases rest on a\ngood foundation.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase1-structures/#status", 
            "text": "This phase was implemented and documented in the API Documentation, but has\nsince seen a major (and beneficial!) re-design, and that re-design has not\nyet been implemented.  It should be done as follows:", 
            "title": "Status"
        }, 
        {
            "location": "/phase1-structures/#tie-up-loose-ends-on-the-old-version", 
            "text": "Just as the  Structure  class has tests for all  was*  events (such\n   as  wasRemoved , etc.), add tests for the corresponding  willBe*  events.   Add API documentation for these events, or update what documentation   Once the unit tests pass, commit.", 
            "title": "Tie up loose ends on the old version"
        }, 
        {
            "location": "/phase1-structures/#remove-files-we-no-longer-need-and-what-depends-on-them", 
            "text": "Delete the file  src/statement.litcoffee , as well as the\n   corresponding files for reason, label, and rule.   Delete the analogous four files in the  tests/  folder.   Search for any code that imports any of those files and delete the   Search through all the documentation for any documentation that   Run the unit test suite and verify that all tests pass.  If not,   Once all tests pass, rebuild everything, commit, and push to the", 
            "title": "Remove files we no longer need (and what depends on them)"
        }, 
        {
            "location": "/phase1-structures/#remove-code-portions-we-no-longer-need", 
            "text": "", 
            "title": "Remove code portions we no longer need"
        }, 
        {
            "location": "/phase1-structures/#attribute-conventions", 
            "text": "Remove from  src/structure.litcoffee  the entire section entitled\n   \"Attribute conventions,\" because many of those conventions will change\n   as we build upon our new design.   Remove any unit tests that dealt with any of the code deleted in the   Search for any documentation that mentioned code deleted in that same   Once all tests pass, rebuild everything, commit, and push to the", 
            "title": "Attribute conventions"
        }, 
        {
            "location": "/phase1-structures/#computed-attributes", 
            "text": "Remove from  src/structure.litcoffee  the entire section entitled\n   \"Computed attributes,\" because we no longer need to distinguish computed\n   from external attributes.   Remove any unit tests that dealt with any of the code deleted in the   Search for any documentation that mentioned code deleted in that same", 
            "title": "Computed attributes"
        }, 
        {
            "location": "/phase1-structures/#external-attributes", 
            "text": "In the  src/structure.litcoffee  file, in the section entitled\n   \"External attributes,\" rename everything so that it no longer contains\n   the word \"external.\"  For example,  getExternalAttribute  would become\n   just  getAttribute , because we no longer need to distinguish computed\n   from external attributes.   Throughout the unit tests, find any mention of external attributes   Search for any documentation that mentioned external attributes and", 
            "title": "External attributes"
        }, 
        {
            "location": "/phase2-input-tree/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 2: The Input Tree\n\n\nContent\n\n\nIn this phase, we add the Input Tree, a hierarchy comprised of a new kind of\n\nStructure\n subclass, called \nInputStructure\n.\n\n\nGoal\n\n\nThe \nInputStructure\n class will exist and be used by the LDE module.\n\n\nStatus\n\n\nThis has not been implemented.  See the tasks below.\n\n\nInputStructure\n class\n\n\n\n\n Create a subclass of \nStructure\n, in its own new module,\n   \nsrc/input-structure.litcoffee\n.\n\n\n Add documentation explaining what it is and will do (though that\n\n\n Ensure that the \nInputStructure\n subclass registers itself with the\n   serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'InputStructure', InputStructure\n in\n   the \nInputStructure\n class code.)\n\n\n Rewrite the LDE module so that it no longer takes as input generic\nStructure\n instances, but specifically \nInputStructure\n instances.  All\n   of its methods should be updated to use \nInputStructure\ns where they\n   currently use \nStructure\ns.  This will require importing the\n   \ninput-structure.litcoffee\n module instead of the generic\n   \nstructure.litcoffee\n one.\n\n\n Update all documentation in that file to reflect the changes just\n\n\n Create a new unit test file for \nInputStructure\ns that is extremely\n   basic, just testing to be sure that the symbol \nInputStructure\n is\n   defined at the global scope and creates things that are instances of the\n   generic \nStructure\n base class.\n\n\n Add documentation for that unit test file, following the pattern\n\n\n Update all unit tests of the LDE module to reflect this change to\nInputStructure\ns.  This will require importing the\n   \ninput-structure.litcoffee\n module instead of the generic\n   \nstructure.litcoffeee\n one.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nAccepting actual instances\n\n\n\n\n The LDE module was written to accept only JSON-serialized forms of\nStructure\ns as parameters to its methods.  Update those functions so\n   that they now accept either serialized forms or actual instances, and can\n   tell the difference and respond appropriately.  (That is, deserialize any\n   serialized instances, but don't do that if the argument was already an\n   instance.)\n\n\n Extend the unit test suite of the LDE module so that it tests this\n\n\n Update all documentation in that file to reflect the changes just\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nMarking structures dirty\n\n\n\n\n Extend the \nInputStructure\n class with a field called \ndirty\n, which\n   is initialized to false in the constructor.  This field does not need to\n   be part of any serialization or deserialization of instances.\n\n\n Create an \nisDirty()\n method that returns the value of that member\n   variable.\n\n\n Create a \nmarkDirty()\n method in the \nInputStructure\n class that sets\n   the \ndirty\n flag to true, and does so for all ancestors as well.\n\n\n Update all documentation in that file to reflect the changes just\n\n\n Add to the unit tests for \nInputStructure\ns a few simple tests for\n   these new routines.\n\n\n Add documentation in that file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.", 
            "title": "Phase 2, The Input Tree"
        }, 
        {
            "location": "/phase2-input-tree/#lde-design-phase-2-the-input-tree", 
            "text": "", 
            "title": "LDE Design Phase 2: The Input Tree"
        }, 
        {
            "location": "/phase2-input-tree/#content", 
            "text": "In this phase, we add the Input Tree, a hierarchy comprised of a new kind of Structure  subclass, called  InputStructure .", 
            "title": "Content"
        }, 
        {
            "location": "/phase2-input-tree/#goal", 
            "text": "The  InputStructure  class will exist and be used by the LDE module.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase2-input-tree/#status", 
            "text": "This has not been implemented.  See the tasks below.", 
            "title": "Status"
        }, 
        {
            "location": "/phase2-input-tree/#inputstructure-class", 
            "text": "Create a subclass of  Structure , in its own new module,\n    src/input-structure.litcoffee .   Add documentation explaining what it is and will do (though that   Ensure that the  InputStructure  subclass registers itself with the\n   serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'InputStructure', InputStructure  in\n   the  InputStructure  class code.)   Rewrite the LDE module so that it no longer takes as input generic Structure  instances, but specifically  InputStructure  instances.  All\n   of its methods should be updated to use  InputStructure s where they\n   currently use  Structure s.  This will require importing the\n    input-structure.litcoffee  module instead of the generic\n    structure.litcoffee  one.   Update all documentation in that file to reflect the changes just   Create a new unit test file for  InputStructure s that is extremely\n   basic, just testing to be sure that the symbol  InputStructure  is\n   defined at the global scope and creates things that are instances of the\n   generic  Structure  base class.   Add documentation for that unit test file, following the pattern   Update all unit tests of the LDE module to reflect this change to InputStructure s.  This will require importing the\n    input-structure.litcoffee  module instead of the generic\n    structure.litcoffeee  one.   Once the unit tests pass, build everything and commit.", 
            "title": "InputStructure class"
        }, 
        {
            "location": "/phase2-input-tree/#accepting-actual-instances", 
            "text": "The LDE module was written to accept only JSON-serialized forms of Structure s as parameters to its methods.  Update those functions so\n   that they now accept either serialized forms or actual instances, and can\n   tell the difference and respond appropriately.  (That is, deserialize any\n   serialized instances, but don't do that if the argument was already an\n   instance.)   Extend the unit test suite of the LDE module so that it tests this   Update all documentation in that file to reflect the changes just   Once the unit tests pass, build everything and commit.", 
            "title": "Accepting actual instances"
        }, 
        {
            "location": "/phase2-input-tree/#marking-structures-dirty", 
            "text": "Extend the  InputStructure  class with a field called  dirty , which\n   is initialized to false in the constructor.  This field does not need to\n   be part of any serialization or deserialization of instances.   Create an  isDirty()  method that returns the value of that member\n   variable.   Create a  markDirty()  method in the  InputStructure  class that sets\n   the  dirty  flag to true, and does so for all ancestors as well.   Update all documentation in that file to reflect the changes just   Add to the unit tests for  InputStructure s a few simple tests for\n   these new routines.   Add documentation in that file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Marking structures dirty"
        }, 
        {
            "location": "/phase3-interpretation/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 3: Interpretation\n\n\nContent\n\n\nIn this phase, we add a very rudimentary \nOutputStructure\n class, and\nmethods in the Input Tree to generate it by interpreting the contents of the\ninput.\n\n\nGoal\n\n\nThe \nOutputStructure\n class will exist and a hierarchy of such things will\nbe created by the Input Tree.\n\n\nStatus\n\n\nThis has not been implemented.  See the tasks below.\n\n\nOutputStructure\n class\n\n\n\n\n Create a subclass of \nStructure\n, in its own new module,\n   \nsrc/output-structure.litcoffee\n.\n\n\n Add documentation explaining what it is and will do (though that\n\n\n Ensure that the \nOutputStructure\n subclass registers itself with the\n   serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'OutputStructure', OutputStructure\n in\n   the \nOutputStructure\n class code.)\n\n\n Ensure that the LDE module also imports the\noutput-structure.litcoffee\n module in addition to the\n   \ninput-structure.litcoffee\n one.\n\n\n Update all documentation in that file to reflect the changes just\n\n\n Create a new unit test file for \nOutputStructure\ns that is extremely\n   basic, just testing to be sure that the symbol \nOutputStructure\n is\n   defined at the global scope and creates things that are instances of the\n   generic \nStructure\n base class.\n\n\n Add documentation for that unit test file, following the pattern\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nBuilding interpretation routines\n\n\n\n\n Create an \ninterpret\n routine in the \nInputStructure\n class that\n   takes two arguments, \naccessibles\n (a list of \nOutputStructure\ns\n   accessible to the \nInputStructure\n in question) and \nchildResults\n (a\n   list of lists of \nOutputStructure\n instances that were generated by\n   recursive interpretation calls).  The implementation in this base class\n   should be to create a generic \nOutputStructure\n instance and flatten all\n   the \nchildResults\n arrays into it as children, in order.  Pseudocode:\n\n\n\n\nlet result = new OutputStructure() // plain vanilla wrapper node\nfor each childArray in childResults:\n    for each node in childArray:\n        result.appendChild( node ) // put everything in it\n        return [ result ] // return an array of exactly one tree\n\n\n\n\n\n\n Add documentation in that file describing the changes just made.\n\n\n Extend the unit tests for the \nInputStructure\n module to include some\n   calls to this routine, passing it various example parameters and\n   verifying that it does its job as specified.\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n Add documentation stating the limitations on how subclasses are\ninterpret\n routine from the \nInputStructure\n\n   class.  Specifically, the following rules must be obeyed:\n\n\nFor any two nodes A and B in the output tree, if A was created by\n  \nX.interpret()\n and B was created by \nY.interpret()\n, and A is an\n  ancestor of B, then X must be an ancestor of Y.\n\n\nFor any two nodes A and B in the output tree, if A was created by\n  \nX.interpret()\n and B was created by \nY.interpret()\n, and A has any\n  ancestor that is an earlier sibling of any ancestor of B, then X must\n  have an ancestor that is an earlier sibling of some ancestor of Y.\n\n\nIf \nX.interpret()\n calls \nY.markDirty()\n, then X must be accessible\n  to Y.\n\n\nThe result of \nX.interpret()\n may be contingent only upon the\n  following data.  (This is made easy by passing this stuff as\n  parameters to \nX.interpret()\n.  So as long as it just uses its\n  parameters and children, and doesn't go seeking out other data, this\n  rule is automatically followed.)\n\n\nAny descendant \nInputStructure\n Y of X, including (naturally) its\n     most recently computed interpretation.  (Note that X is not\n     accessible to any such Y.)\n\n\nAny \nInputStructure\n Y accessible to X, optionally with its most\n     recently computed interpretation as well.  (Note that this does not\n     include ancestors of X.)\n\n\n\n\n\n\n Rebuild the docs and commit.\n\n\n\n\nCaching interpretation results\n\n\n\n\n Extend the \nInputStructure\n class with a field called\n   \nlastInterpretation\n, which is initialized to undefined in the\n   constructor.  This field does not need to be part of any serialization\n   or deserialization of instances.\n\n\n Create an \ninterpretation()\n method that returns the value of\n   that member variable.\n\n\n Create a \nsaveInterpretation(S)\n method in the \nInputStructure\n class\n   that stores \nOutputStructure\n \nS\n in the \nlastInterpretation\n field.  If\n   no parameter \nS\n is passed, replace the cached value with undefined.\n\n\n Update all documentation in that file to reflect the changes just\n\n\n Add to the unit tests for \nInputStructure\ns a few simple tests for\n   these new routines.\n\n\n Add documentation in that file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nBuilding recursive interpretation\n\n\n\n\n Create a \nrecursiveInterpret\n routine in the \nInputStructure\n class\n   that takes one argument, \naccessibles\n (with the same meaning as in the\n   \ninterpret\n routine).  This argument should default to an empty array.\n   Pseudocode:\n\n\n\n\n// use the cache if it's there:\nif my lastInterpretation() is not undefined, return that and quit\notherwise...\n// remember the size of accessibles for later:\nlet L = the current length of the accessibles array.\n// we will be recursively computing child result arrays,\n// and will want to keep a list of them, so initialize that list to empty:\nlet allChildResults = [ ]\n// now the loop for the recursive work:\nfor each child C of X do the following:\n    // do the recursion.\n    // note that for the first child, the same list of accessibles for the\n    // parent applies to that child:\n    let childResult = C.recursiveInterpret( accessibles )\n    // but for later children, more things are accessible.  specifically,\n    // anything just created by interpreting C should be accessible to\n    // C.nextSibling(), so:\n    let accessibles = the concatenation of accessibles\n        with childResult (thus extending accessibles)\n    // and of course remember the result of the recursive call we just made:\n    append childResult as a new entry to the end of allChildResults\n        // (which is an array of arrays)\n// now that we're done recurring,\n// we want to restore the accessibles array to its old state:\nlet accessibles = just the first L entries of accessibles\n    // (restoring it to what it was at the start of this routine)\n// this is because we will now ask this node X to interpret itself in\n// light of (a) what's accessible to it and (b) all the recursive\n// results of interpreting its children.\n// So we need the right accessibles array to do this:\nsaveInterpretation( X.interpret( accessibles, allChildResults ) )\nmark X as no longer dirty\nthen return lastInterpretation() as the result of this function\n\n\n\n\n\n\n Add documentation in that file describing the changes just made.\n\n\n Extend the unit tests for the \nInputStructure\n module to include some\n   calls to this routine, passing it various example parameters and\n   verifying that it does its job as specified.\n\n\n Write more unit tests that create and register some dummy subclasses\nInputStructure\n that have example custom \ninterpret\n routines.\n   Verify that those routines get called and do exactly what's expected in\n   the creation of their portion of the Output Tree.  Ensure you test a\n   variety of different kinds of \ninterpret\n routines, including ones that\n   copy or create attributes, delete children, don't include the default\n   wrapper, etc.\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nCalling interpretation routines\n\n\n\n\n In the LDE module, in every one of the four functions it exposes as\n.markDirty()\n on\n   the appropriate \nInputStructure\n instance, then\n   \n.recursiveInterpret()\n on the root of the LDE document (the Input Tree).\n\n\n Update the documentation in that file to describe the changes just\n\n\n Extend the unit tests for the LDE module to verify that this\n\n\n Write more unit tests that create and register some dummy subclasses\nInputStructure\n that have example custom \ninterpret\n routines.\n   Verify that those routines get called and do exactly what's expected in\n   the creation of the Output Tree.  Ensure you test a variety of different\n   kinds of \ninterpret\n routines, as you did in the previous section.\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nTracking origins\n\n\n\n\n Create a class variable in the \nInputStructure\n class called\n   \ninstanceBeingInterpreted\n that is initialized to null.\n\n\n Extend the \nrecursiveInterpret\n routine so that, before each call to\n   \nX.interpret()\n, it sets \ninstanceBeingInterpreted\n to \nX\n, then sets it\n   back to null after \nX.interpret()\n is complete.\n\n\n Extend the constructor for \nOutputStructure\n nodes so that, if the\n   global \nInputStructure\n class is defined, and its\n   \ninstanceBeingInterpreted\n variable is non-null, then that instance is\n   stored within the newly constructed \nOutputStructure\n in a field called\n   \norigin\n.  Otherwise, \norigin\n should be undefined (or null, whatever).\n\n\n Extend the unit tests for the LDE module to verify that Output Trees\nOutputStructure\n.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nFeedback messages\n\n\n\n\n Add a function to the LDE module that can be called whenever the\nInputStructure\n in the Input Tree changes, and the\n   function will send a message (to any listening client) containing this\n   data: the ID of the node whose feedback changed, and the new feedback\n   data.\n\n\n Extend each of the LDE module's API functions so that, when any new\nInputStructure\n instances are added in the Input Tree, we recursively go\n   through them and all their descendants, and set their \nwasChanged\n event\n   handlers to check to see if the feedback changed, and if so, call that\n   global message sending function.\n\n\n Update the documentation in that file to describe the changes just\n\n\n Extend the unit tests for the LDE module to verify that this\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.", 
            "title": "Phase 3, Interpretation"
        }, 
        {
            "location": "/phase3-interpretation/#lde-design-phase-3-interpretation", 
            "text": "", 
            "title": "LDE Design Phase 3: Interpretation"
        }, 
        {
            "location": "/phase3-interpretation/#content", 
            "text": "In this phase, we add a very rudimentary  OutputStructure  class, and\nmethods in the Input Tree to generate it by interpreting the contents of the\ninput.", 
            "title": "Content"
        }, 
        {
            "location": "/phase3-interpretation/#goal", 
            "text": "The  OutputStructure  class will exist and a hierarchy of such things will\nbe created by the Input Tree.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase3-interpretation/#status", 
            "text": "This has not been implemented.  See the tasks below.", 
            "title": "Status"
        }, 
        {
            "location": "/phase3-interpretation/#outputstructure-class", 
            "text": "Create a subclass of  Structure , in its own new module,\n    src/output-structure.litcoffee .   Add documentation explaining what it is and will do (though that   Ensure that the  OutputStructure  subclass registers itself with the\n   serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'OutputStructure', OutputStructure  in\n   the  OutputStructure  class code.)   Ensure that the LDE module also imports the output-structure.litcoffee  module in addition to the\n    input-structure.litcoffee  one.   Update all documentation in that file to reflect the changes just   Create a new unit test file for  OutputStructure s that is extremely\n   basic, just testing to be sure that the symbol  OutputStructure  is\n   defined at the global scope and creates things that are instances of the\n   generic  Structure  base class.   Add documentation for that unit test file, following the pattern   Once the unit tests pass, build everything and commit.", 
            "title": "OutputStructure class"
        }, 
        {
            "location": "/phase3-interpretation/#building-interpretation-routines", 
            "text": "Create an  interpret  routine in the  InputStructure  class that\n   takes two arguments,  accessibles  (a list of  OutputStructure s\n   accessible to the  InputStructure  in question) and  childResults  (a\n   list of lists of  OutputStructure  instances that were generated by\n   recursive interpretation calls).  The implementation in this base class\n   should be to create a generic  OutputStructure  instance and flatten all\n   the  childResults  arrays into it as children, in order.  Pseudocode:   let result = new OutputStructure() // plain vanilla wrapper node\nfor each childArray in childResults:\n    for each node in childArray:\n        result.appendChild( node ) // put everything in it\n        return [ result ] // return an array of exactly one tree    Add documentation in that file describing the changes just made.   Extend the unit tests for the  InputStructure  module to include some\n   calls to this routine, passing it various example parameters and\n   verifying that it does its job as specified.   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.   Add documentation stating the limitations on how subclasses are interpret  routine from the  InputStructure \n   class.  Specifically, the following rules must be obeyed:  For any two nodes A and B in the output tree, if A was created by\n   X.interpret()  and B was created by  Y.interpret() , and A is an\n  ancestor of B, then X must be an ancestor of Y.  For any two nodes A and B in the output tree, if A was created by\n   X.interpret()  and B was created by  Y.interpret() , and A has any\n  ancestor that is an earlier sibling of any ancestor of B, then X must\n  have an ancestor that is an earlier sibling of some ancestor of Y.  If  X.interpret()  calls  Y.markDirty() , then X must be accessible\n  to Y.  The result of  X.interpret()  may be contingent only upon the\n  following data.  (This is made easy by passing this stuff as\n  parameters to  X.interpret() .  So as long as it just uses its\n  parameters and children, and doesn't go seeking out other data, this\n  rule is automatically followed.)  Any descendant  InputStructure  Y of X, including (naturally) its\n     most recently computed interpretation.  (Note that X is not\n     accessible to any such Y.)  Any  InputStructure  Y accessible to X, optionally with its most\n     recently computed interpretation as well.  (Note that this does not\n     include ancestors of X.)     Rebuild the docs and commit.", 
            "title": "Building interpretation routines"
        }, 
        {
            "location": "/phase3-interpretation/#caching-interpretation-results", 
            "text": "Extend the  InputStructure  class with a field called\n    lastInterpretation , which is initialized to undefined in the\n   constructor.  This field does not need to be part of any serialization\n   or deserialization of instances.   Create an  interpretation()  method that returns the value of\n   that member variable.   Create a  saveInterpretation(S)  method in the  InputStructure  class\n   that stores  OutputStructure   S  in the  lastInterpretation  field.  If\n   no parameter  S  is passed, replace the cached value with undefined.   Update all documentation in that file to reflect the changes just   Add to the unit tests for  InputStructure s a few simple tests for\n   these new routines.   Add documentation in that file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Caching interpretation results"
        }, 
        {
            "location": "/phase3-interpretation/#building-recursive-interpretation", 
            "text": "Create a  recursiveInterpret  routine in the  InputStructure  class\n   that takes one argument,  accessibles  (with the same meaning as in the\n    interpret  routine).  This argument should default to an empty array.\n   Pseudocode:   // use the cache if it's there:\nif my lastInterpretation() is not undefined, return that and quit\notherwise...\n// remember the size of accessibles for later:\nlet L = the current length of the accessibles array.\n// we will be recursively computing child result arrays,\n// and will want to keep a list of them, so initialize that list to empty:\nlet allChildResults = [ ]\n// now the loop for the recursive work:\nfor each child C of X do the following:\n    // do the recursion.\n    // note that for the first child, the same list of accessibles for the\n    // parent applies to that child:\n    let childResult = C.recursiveInterpret( accessibles )\n    // but for later children, more things are accessible.  specifically,\n    // anything just created by interpreting C should be accessible to\n    // C.nextSibling(), so:\n    let accessibles = the concatenation of accessibles\n        with childResult (thus extending accessibles)\n    // and of course remember the result of the recursive call we just made:\n    append childResult as a new entry to the end of allChildResults\n        // (which is an array of arrays)\n// now that we're done recurring,\n// we want to restore the accessibles array to its old state:\nlet accessibles = just the first L entries of accessibles\n    // (restoring it to what it was at the start of this routine)\n// this is because we will now ask this node X to interpret itself in\n// light of (a) what's accessible to it and (b) all the recursive\n// results of interpreting its children.\n// So we need the right accessibles array to do this:\nsaveInterpretation( X.interpret( accessibles, allChildResults ) )\nmark X as no longer dirty\nthen return lastInterpretation() as the result of this function    Add documentation in that file describing the changes just made.   Extend the unit tests for the  InputStructure  module to include some\n   calls to this routine, passing it various example parameters and\n   verifying that it does its job as specified.   Write more unit tests that create and register some dummy subclasses InputStructure  that have example custom  interpret  routines.\n   Verify that those routines get called and do exactly what's expected in\n   the creation of their portion of the Output Tree.  Ensure you test a\n   variety of different kinds of  interpret  routines, including ones that\n   copy or create attributes, delete children, don't include the default\n   wrapper, etc.   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Building recursive interpretation"
        }, 
        {
            "location": "/phase3-interpretation/#calling-interpretation-routines", 
            "text": "In the LDE module, in every one of the four functions it exposes as .markDirty()  on\n   the appropriate  InputStructure  instance, then\n    .recursiveInterpret()  on the root of the LDE document (the Input Tree).   Update the documentation in that file to describe the changes just   Extend the unit tests for the LDE module to verify that this   Write more unit tests that create and register some dummy subclasses InputStructure  that have example custom  interpret  routines.\n   Verify that those routines get called and do exactly what's expected in\n   the creation of the Output Tree.  Ensure you test a variety of different\n   kinds of  interpret  routines, as you did in the previous section.   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Calling interpretation routines"
        }, 
        {
            "location": "/phase3-interpretation/#tracking-origins", 
            "text": "Create a class variable in the  InputStructure  class called\n    instanceBeingInterpreted  that is initialized to null.   Extend the  recursiveInterpret  routine so that, before each call to\n    X.interpret() , it sets  instanceBeingInterpreted  to  X , then sets it\n   back to null after  X.interpret()  is complete.   Extend the constructor for  OutputStructure  nodes so that, if the\n   global  InputStructure  class is defined, and its\n    instanceBeingInterpreted  variable is non-null, then that instance is\n   stored within the newly constructed  OutputStructure  in a field called\n    origin .  Otherwise,  origin  should be undefined (or null, whatever).   Extend the unit tests for the LDE module to verify that Output Trees OutputStructure .   Once the unit tests pass, build everything and commit.", 
            "title": "Tracking origins"
        }, 
        {
            "location": "/phase3-interpretation/#feedback-messages", 
            "text": "Add a function to the LDE module that can be called whenever the InputStructure  in the Input Tree changes, and the\n   function will send a message (to any listening client) containing this\n   data: the ID of the node whose feedback changed, and the new feedback\n   data.   Extend each of the LDE module's API functions so that, when any new InputStructure  instances are added in the Input Tree, we recursively go\n   through them and all their descendants, and set their  wasChanged  event\n   handlers to check to see if the feedback changed, and if so, call that\n   global message sending function.   Update the documentation in that file to describe the changes just   Extend the unit tests for the LDE module to verify that this   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Feedback messages"
        }, 
        {
            "location": "/phase4-validation/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 4: Validation\n\n\nContent\n\n\nIn this phase, we extend the formerly rudimentary \nOutputStructure\n class\nwith its most important functionality: validating steps of work.\n\n\nGoal\n\n\nInstance of the \nOutputStructure\n class will automatically validate\nthemselves as they are added to the Output Tree.\n\n\nStatus\n\n\nThis has not been implemented.  See the tasks below.\n\n\nAutomatic validation enqueueing\n\n\n\n\n Define a class variable in the \nOutputStructure\n class, an array of\n   all instances that need to be validated.  Initialize it to the empty\n   array.\n\n\n Extend the \nOutputStructure\n class with an instance method that adds\n   that instance to the list in that class variable iff the instance has a\n   \nvalidate()\n method.\n\n\n Add documentation in that file describing the changes just made.\n\n\n Extend the unit tests for the \nOutputStructure\n module to verify\n   that this works as described.\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Extend the \nrecursiveInterpret\n routine so that, for any\n   \nOutputStructure\n instances it had to create (not just re-use from its\n   cache), it calls the method that adds them to the to-validate list.\n\n\n Add documentation in that file describing the changes just made.\n\n\n Extend the unit tests for the \nInputStructure\n module to verify\n   that this works as described.\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n Add documentation to the \nOutputStructure\n class, explaining that any\n   subclass that wishes to implement a \nvalidate()\n routine must follow the\n   following rules when it does so.\n\n\nThe functions should be written asynchronously, taking callbacks that\n  notify when complete.  Care should be taken to ensure that no such\n  function throws an error.  Even if some code in them malfunctions, the\n  error should be caught and included as feedback in the node to be\n  validated, stating that an internal error occurred in the Lurch code.\n\n\nThe result of X.validate() must be contingent only upon any\n  \nOutputStructure\n Y accessible to X.\n\n\nBecause of the restrictions on interpretation routines, if X exists in\n  the output tree, then so does everything accessible to it upon which\n  it might depend.\n\n\nNote that \nvalidate()\n routines, because they are asynchronous and may\n  need to do lengthy tasks, should feel free to reference modules that\n  do lengthy tasks in background threads, and send their results via\n  callbacks.  (This is not a restriction, but rather an opportunity.)\n  The matching module is a prime example of how this may later be used.\n\n\nWhile the \nvalidate()\n routine for one \nOutputStructure\n instance X\n  may add some other instance Y to the queue of things to validate,\n  it may do so only if X is accessible to Y.\n\n\n\n\n\n\n Rebuild the docs and commit.\n\n\n\n\nAutomatic validation processing\n\n\n\n\n In the LDE module, run \nsetInterval()\n at module creation so that it\n   regularly (many times per second, but not so often as to consume copious\n   CPU) checks to see if there is anything on the list of \nOutputStructure\n\n   instances to be validated.  If there are any such things, call their\n   \nvalidate\n routines (which are asynchronous).  The order in which these\n   are processed is irrelevant.\n\n\n Add documentation in that file describing the changes just made.\n\n\n Extend the unit tests for the LDE module to verify that this works\nOutputStructure\n subclasses that\n   have \nvalidate\n routines, and some \nInputStructure\n subclasses whose\n   \ninterpret\n routines produce instances of those classes that know how to\n   validate themselves.  Verify that validation actually does take place.\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nFeedback messages\n\n\n\n\n Add a function to the LDE module that can be called whenever the\nOutputStructure\n in the Output Tree changes, and the\n   function will send a message (to any listening client) containing this\n   data: the ID of the origin of the node whose feedback changed, and the\n   new feedback data.\n\n\n Update the documentation in that file to describe the changes just\n\n\n Extend the unit tests for the LDE module to verify that this\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.", 
            "title": "Phase 4, Validation"
        }, 
        {
            "location": "/phase4-validation/#lde-design-phase-4-validation", 
            "text": "", 
            "title": "LDE Design Phase 4: Validation"
        }, 
        {
            "location": "/phase4-validation/#content", 
            "text": "In this phase, we extend the formerly rudimentary  OutputStructure  class\nwith its most important functionality: validating steps of work.", 
            "title": "Content"
        }, 
        {
            "location": "/phase4-validation/#goal", 
            "text": "Instance of the  OutputStructure  class will automatically validate\nthemselves as they are added to the Output Tree.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase4-validation/#status", 
            "text": "This has not been implemented.  See the tasks below.", 
            "title": "Status"
        }, 
        {
            "location": "/phase4-validation/#automatic-validation-enqueueing", 
            "text": "Define a class variable in the  OutputStructure  class, an array of\n   all instances that need to be validated.  Initialize it to the empty\n   array.   Extend the  OutputStructure  class with an instance method that adds\n   that instance to the list in that class variable iff the instance has a\n    validate()  method.   Add documentation in that file describing the changes just made.   Extend the unit tests for the  OutputStructure  module to verify\n   that this works as described.   Add documentation in that test file describing the changes just made.   Extend the  recursiveInterpret  routine so that, for any\n    OutputStructure  instances it had to create (not just re-use from its\n   cache), it calls the method that adds them to the to-validate list.   Add documentation in that file describing the changes just made.   Extend the unit tests for the  InputStructure  module to verify\n   that this works as described.   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.   Add documentation to the  OutputStructure  class, explaining that any\n   subclass that wishes to implement a  validate()  routine must follow the\n   following rules when it does so.  The functions should be written asynchronously, taking callbacks that\n  notify when complete.  Care should be taken to ensure that no such\n  function throws an error.  Even if some code in them malfunctions, the\n  error should be caught and included as feedback in the node to be\n  validated, stating that an internal error occurred in the Lurch code.  The result of X.validate() must be contingent only upon any\n   OutputStructure  Y accessible to X.  Because of the restrictions on interpretation routines, if X exists in\n  the output tree, then so does everything accessible to it upon which\n  it might depend.  Note that  validate()  routines, because they are asynchronous and may\n  need to do lengthy tasks, should feel free to reference modules that\n  do lengthy tasks in background threads, and send their results via\n  callbacks.  (This is not a restriction, but rather an opportunity.)\n  The matching module is a prime example of how this may later be used.  While the  validate()  routine for one  OutputStructure  instance X\n  may add some other instance Y to the queue of things to validate,\n  it may do so only if X is accessible to Y.     Rebuild the docs and commit.", 
            "title": "Automatic validation enqueueing"
        }, 
        {
            "location": "/phase4-validation/#automatic-validation-processing", 
            "text": "In the LDE module, run  setInterval()  at module creation so that it\n   regularly (many times per second, but not so often as to consume copious\n   CPU) checks to see if there is anything on the list of  OutputStructure \n   instances to be validated.  If there are any such things, call their\n    validate  routines (which are asynchronous).  The order in which these\n   are processed is irrelevant.   Add documentation in that file describing the changes just made.   Extend the unit tests for the LDE module to verify that this works OutputStructure  subclasses that\n   have  validate  routines, and some  InputStructure  subclasses whose\n    interpret  routines produce instances of those classes that know how to\n   validate themselves.  Verify that validation actually does take place.   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Automatic validation processing"
        }, 
        {
            "location": "/phase4-validation/#feedback-messages", 
            "text": "Add a function to the LDE module that can be called whenever the OutputStructure  in the Output Tree changes, and the\n   function will send a message (to any listening client) containing this\n   data: the ID of the origin of the node whose feedback changed, and the\n   new feedback data.   Update the documentation in that file to describe the changes just   Extend the unit tests for the LDE module to verify that this   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Feedback messages"
        }, 
        {
            "location": "/phaseN-archive/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nThis file contains ideas that were formerly listed as phases 2 through 11.\nBut since they were written, phase 1 was completely redesigned (in a very\nhelpful way).  Thus these ideas no longer apply as they once did.\n\n\nHowever, they have many good ideas within them, and are thus retained here\nto be referenced later when building on top of the newly-redesigned\nfoundation of \nStructure\ns.\n\n\nLDE Design Phase 2: Basic Validation\n\n\nThis phase defines:\n\n\n\n\nStatements (just atomic expressions whose contents are a string, and\n   contain no child structures)\n\n\nDefinitions of the simplest rule type only: code rules written in\n   JavaScript\n\n\nFormal systems (or \"mathematical topics\", which are structures we can\n   put rules inside of)\n\n\n\n\nThis enables really simple formal systems, ones whose statements are strings\nand that require no citing of premises.  Examples:\n\n\n\n\nTriX game (in which the previous statement is always the only premise,\n   and is never cited) would become possible after Phase 2.\n\n\nA system that verifies each statement independently (e.g., arithmetic\n   equations and inequalities) would also be possible.\n\n\n\n\nWhile the intent is eventually for nontrivial validation tasks to be placed\nin a queue and handled in background threads, that work is not part of\nPhase 2.  A later phase will add support for it.\n\n\nExtending the \nStructure\n module\n\n\nGiving feedback\n\n\n\n\nExtend the generic \nStructure\n class with a convenience function called\n   \nfeedback(a,b)\n that sets the computed attribute with key \"feedback\" to a\n   JSON object whose validation result is \na\n and whose corresponding brief\n   message is \nb\n.  If both arguments are omitted, then the \"feedback\"\n   computed attribute is removed.  For instance, we might make calls like\n   \nS.feedback('valid','This rule is used correctly.')\n or\n   \nS.feedback('invalid','You did not provide a valid reason.')\n.\n\n\n\n\nEvent handlers\n\n\n\n\nExtend the generic \nStructure\n class with new event handlers for\n   \naboutToChange\n, \naboutToBeInserted\n, and \naboutToBeRemoved\n.\n\n\nCheck to see whether the existing event handlers (\nwasInserted\n,\n   \nwasRemoved\n, and \nwasChanged\n) are tested in the unit tests.  If not,\n   add tests for them, together with tests for these new events.\n\n\nProvide a default implementation for \naboutToBeRemoved()\n that calls\n   \nwhatCitesMe()\n in the same object and stores the result in a temporary\n   field in the object.  Then provide a default implementation of\n   \nwasRemoved()\n that calls \nvalidate()\n on every structure on that list.\n\n\nProvide default implementations of \nwasInserted()\n and \nwasChanged()\n\n   that each call \nvalidate()\n in the same object, if that function exists.\n\n\n\n\nBuilding and running functions\n\n\n\n\nAdd to the \nStructure\n class a class method \nrunFunction(f,args,cb)\n that\n   converts the string of JavaScript code \nf\n into a function (through the\n   \nFunction\n constructor), then runs it on the given set of arguments,\n   sending the result to the given callback (or an error instead, using the\n   standard two-argument callback signature).  This will be overridden by\n   the LDE with an asynchronous method, but it needs to exist so that the\n   \nStructure\n class is, in theory, independent of the LDE.\n\n\n\n\nExtending the \nLDE\n module\n\n\nBuilding and running functions in the background\n\n\n\n\nAfter loading the \nStructure\n module, replace its class method\n   \nrunFunction\n with one that operates asynchronously, sending the job to a\n   background thread.  If the thread does not terminate in a short time,\n   send back an error about termination time.  Keep track of all background\n   threads that are currently running, so that the total can be queried at\n   any given time.\n\n\nExtend each of the LDE's functions (\ninsert\n, \nreplace\n, etc.) so that if\n   it terminates without there being any currently running background\n   threads then it posts a message that LDE computations are complete.\n\n\nExtend the LDE's new implementation of \nrunFunction\n so that whenever it\n   finishes calling the callback, if there are no background threads\n   running at that time, it posts the same message about computations being\n   complete.\n\n\n\n\nCode-based rules\n\n\nThe \nRule\n class will be a subclass of \nStructure\n.  If \nR\n is an instance\nof \nRule\n then its \nvalidate()\n function should be as follows.\n\n\n\n\nIf \nR.isA 'code'\n fails, then call \nR.feedback('invalid','...')\n with\n   a message that only code rules are supported so far.  Then jump to the\n   final bullet point in this list.\n\n\nIf \nR.text()\n isn't valid JavaScript code that defines a function,\n   then \nR.feedback('invalid','...')\n with a message to that effect.\n   Then jump to the final bullet point in this list.\n\n\nOtherwise \nR.feedback('valid','This is a valid code rule.')\n.  Then:\n\n\nFor every expression in \nR.whatCitesMe()\n, revalidate it.\n\n\n\n\nStatements\n\n\nThe \nStatement\n class will be a subclass of \nStructure\n.  If \nS\n is an\ninstance of \nStatement\n then its \nvalidate()\n function should be as follows.\n\n\n\n\nIf \nS.children().length \n 0\n then call \nS.feedback('invalid','...')\n\n   with a message that only atomic statements supported so far.\n   Then stop.\n\n\nIf \nS\n does not have a reason attached to it, then call\n   \nS.feedback()\n to clear feedback, and stop.\n\n\nIf \nS\n has more than one reason attached to it, then call\n   \nS.feedback('invalid','...')\n with a message that multiple reasons is\n   not permitted.  Then stop.\n\n\nTreat the one reason attached to \nS\n as a reference and look it up.\n   If it produces no structure, call \nS.feedback('invalid','...')\n with a\n   message that there is no such reason.  Then stop.\n\n\nTake the object found in the previous bullet point.  If it is not an\n   instance of the \nRule\n subclass defined below, call\n   \nS.feedback('invalid','...')\n with a message that the cited reason is\n   not a rule.  Then stop.\n\n\nIf the cited rule has not been validated, then stop here.  (When it\n   gets validated, it will trigger a re-validation of \nS\n.)\n\n\nLet f be the JavaScript function defined in the text of the rule and\n   call \nf(S)\n in a background thread.\n\n\nIf \nf(S)\n ends with an error, then call \nS.feedback(\"invalid\",\"...\")\n\n   with a message about an internal rule error.\n\n\nIf \nf(S)\n does not terminate quickly, then call\n   \nS.feedback(\"invalid\",\"...\")\n with a message about an internal rule\n   error.\n\n\nIf \nf(S)\n is not a correctly formed validation result object, then\n   call \nS.feedback(\"invalid\",\"...\")\n with a message about an internal\n   rule error.  Note that a correctly formed validation result object\n   will have a \ntype\n (\"valid\", \"invalid\") and a \nmessage\n.\n\n\nOtherwise call \nS.feedback(f(S).type,f(S).message)\n.\n\n\n\n\nFormal systems (or \"mathematical topics\")\n\n\nThe \nFormalSystem\n class will be a subclass of \nStructure\n, and will add\nsupport for the following new member functions.  Assume \nF\n is an instance\nof \nFormalSystem\n in each case.  Further assume that \nS\n is an instance of\n\nStructure\n in each case.\n\n\n\n\nF.exports()\n returns an array composed of these things, in the order\n   they appear in the document:\n\n\nany \nRule\n instance in \nF.children()\n\n\nany element of \nF2.exports()\n for any formal system \nF2\n in\n  \nF.children()\n\n\n\n\n\n\nExtend \nS.lookup(label)\n to also check \nF.exports()\n whenever it\n   encounters an accessible \nFormalSystem\n instance.\n\n\nExtend \nS.whatCitesMe()\n to also looks at the scope of \nS.parent()\n iff\n   it is a \nFormalSystem\n instance (and its \nparent()\n iff that is a\n   \nFormalSystem\n instance, and so on).\n\n\nOverride the default implementation of \nF.wasInserted()\n so that it now\n   calls \nR.whatCitesMe()\n for every \nR\n in \nF.exports()\n and revalidates\n   every structure on any of those lists.\n\n\nExtend the implementation of \nF.aboutToBeRemoved()\n and \nF.wasRemoved()\n\n   so that each propagates the call to the function of the same name in all\n   structures in \nF.exports()\n.\n\n\n\n\nUnit testing\n\n\nHow we could do unit testing on this simple LDE:\n\n\n\n\nFire up the LDE so that its document is new and thus blank.\n\n\nSet up a listener for the \"computation finished\" signals from the LDE,\n   storing the results for use in testing.\n\n\nTell the LDE to add three children to the LDE Document: a rule, a step\n   using it correctly, and a step using it incorrectly.\n\n\nWait until we receive the signal that says the LDE has finished\n   computing.\n\n\nExamine the computation results stored in step 2 and verify correct\n   processing of the rule and two steps.\n\n\n\n\nConsider each of the unusual corner cases handled above and create tests for\nit, including such situations as these:\n\n\n\n\nSend a signal to the LDE to alter the incorrect use of the rule, making\n   it correct.  Wait for computation to finish and check to be sure it\n   re-validated that step as correct now.\n\n\nInsert a rule with label X, followed by a statement with label X,\n   followed by a statement citing reason X.  Ensure the statement does not\n   validate because it cites a non-rule.  Remove the statement labeled X.\n   Ensure the remaining statement validates because it now cites rule X.\n\n\nIn a blank document, insert a statement that cites rule Y.  Then insert a\n   formal system containing rule Y before the statement.  Ensure that the\n   system notices, and that the statement automatically had its validation\n   updated.\n\n\n\n\nLDE Design Phase 3: The Client\n\n\nThis phase defines the LDE Client, a thin interface to the LDE defined in a\nseparate module.\n\n\nThe Client maintains the Facade, a shallow copy of the LDE Document that it\nkeeps in sync with it, thus providing an easy API for interacting with the\nLDE.\n\n\nThis page is just a description; it's not actually written in a \"design\" or\n\"how to build\" manner, at least not to the same degree that Phase 2 was.\n\n\nThis phase's work just makes Phase 1's work easier to use for most clients.\n\n\nApp launch\n\n\nWhen the Client is loaded into memory (say, at app launch) it will create a\nglobal structure that is intended to be a sort of shallow/shadow/fake copy\nof the LDE Document.\n\n\n\n\nBecause it will imitate the structure of the LDE Document, it will be\n   a hierarchy.\n\n\nBut it will not be a hierarchy of Structures, because as we know,\n   Structures do computation, and that's the job of the LDE.  This is\n   just a front-end; it doesn't do anything.\n\n\nSo rather than calling each node in the Client's hierarchy a\n   Structure, I'll call it a \nFacade.\n  This is to emphasize that this\n   hierarchy, stored in the Client (part of the UI) can't do anything at\n   all.  It's picture of what's really going on elsewhere, in the LDE.\n\n\n\n\nBackground threads\n\n\nThe Client can be told about the existence of a background thread that's\nrunning the LDE.\n\n\n\n\nIf it is told about such a thread, then any later\n   insertions/deletions/changes to the Facade hierarchy will immediately\n   be communicated by the Client to that LDE thread as a change event\n   (defined above).\n\n\nThis guarantees that the Facade hierarchy and LDE Document are always\n   in sync:  Because the LDE never alters its hierarchy, messages need\n   propagate in only one direction to guarantee that the two hierarchies\n   are isomorphic.\n\n\n\n\nNo subclasses\n\n\nBecause the nodes in the Facade don't actually do anything, they have no\nsubclasses.\n\n\n\n\nUnlike the Structure class, which it makes sense to subclass so that\n   we can add various features like validation functions and so forth,\n   none of that matters in the Facade.  It ships all that work to\n   someone else.\n\n\nThus every node in the Facade hierarchy is a generic Facade node,\n   storing a dictionary of attributes given to it at construction time,\n   which are precisely the external attributes for that node.\n\n\nThese attributes will have been communicated to the LDE when the\n   Facade node was constructed, and the LDE can use them to figure out\n   how to create a corresponding Structure node on the LDE side (or any\n   subclass of Structure; one attribute should be the class name\n   itself!).\n\n\nBut the point here is that what it means for the Facade to be a\n   shallow/inactive copy of the LDE Document is that:\n\n\nEvery node is just a Facade node, and thus they have no\n  specialized functionality at all.\n\n\nEvery node just stores its attributes, not doing anything with\n  them, unlike on the LDE Document side, which does computation.\n\n\n\n\n\n\n\n\nSerialization\n\n\n\n\nFacade nodes do one thing, actually:  They know how to serialize\n   themselves into JSON, including all their children.\n\n\nThis is so that they can pass themselves across to the LDE for syncing,\n   and so that the entire Facade can be serialized by the UI (later of\n   course) for saving in document metadata.\n\n\n\n\nIDs\n\n\nEach Facade node will be given, at the time it's created, an ID unique\namong all nodes in the Facade hierarchy.\n\n\n\n\nThis unique ID will be part of what's communicated in the change event\n   to the LDE, so that the corresponding Structure created in the LDE can\n   have the same ID.\n\n\nThus future change events from the Client to the LDE can reference nodes\n   in the hierarchy by this common ID system.\n\n\nSimilarly, when the LDE sends out signals about new computed attributes\n   being stored in the LDE Document, it will mention these unique IDs to\n   unambiguously indicate in which node the new computed attribute is\n   stored.\n\n\nThe Client will then store the same computed attribute in the\n   corresponding Facade node, so that it is accessible to the entire UI as\n   well.\n\n\n\n\nUnit testing\n\n\n\n\nVerify that the Facade hierarchy can be built and works independent of\n   the LDE\n\n\nVerify that if you connect it to an LDE background thread, the documents\n   stay in sync\n\n\nVerify that the same tests done in Phase 2 can be done also through this\n   \"API\" to the LDE\n\n\nAll further testing in later phases has the option of using the Client\n   or not, depending on what's best for testing in that particular instance.\n\n\n\n\nExtendability\n\n\n\n\nThe LDE is free to expose to clients any other functionality it sees\n   fit.  That is, interaction with the LDE is not limited to syncing the\n   Facade with the LDE Document and waiting for computed responses.\n\n\nFor instance, one type of response that should only be produced when\n   specifically asked for is a \"verbose feedback\" response, like what we\n   get in the old desktop Lurch by double-clicking a traffic light.  This\n   is too much work to create for every step of work, but should be created\n   only when needed.\n\n\nThus the LDE could expose a computeVerboseFeedback() function that took\n   the unique ID of an LDE Document structure as input and later sent back\n   a message with the corresponding verbose feedback (in HTML form) as the\n   result.\n\n\n\n\nLDE Design Phase 4: Dependencies\n\n\n\n\nSupport dependencies as read-only first-few-children of the document.\n\n\nThey need to be validated only to be sure they don't redeclare one\n   another's stuff.\n\n\nNote that every structure already has an .exports() method, so we just\n   need to implement that structure for the root of the LDE Document, and\n   that will be what a document exports when it is used as a dependency.\n\n\n\n\nRule definitions can be stored in a master document on which others depend,\nand many later documents can all use the same central rule set.\n\n\nLDE Design Phase 5: Background Queue\n\n\nNew stuff\n\n\nThe stuff in the \"old stuff\" section, immediately after this one, may no\nlonger apply; it is from an old design.  But these new plans may still be\nrelevant, depending on how efficiently interpretation is eventually seen to\nbe:\n\n\nCurrently, interpretation is triggered immediately in response to calls to\nthe LDE's API.  If that interpretation process takes too long, a queue of\nAPI calls can be formed.  When any request comes in to the LDE API, rather\nthan being immediately executed, it would go on a queue.  The \nold\n way of\nprocessing such events is analogous to handling the queue like so:\n\n\n\n\nPop an item off this API command queue\n\n\nPerform the item\n\n\nCall .markDirty() in the relevant node\n\n\nCall root.recursiveInterpret()\n\n\nRepeat from step 1 until the queue is empty\n\n\n\n\nBut now that we have a queue, we can do the following more efficient procedure instead:\n\n\n\n\nPop an item off this API command queue\n\n\nPerform the item\n\n\nCall .markDirty in the relevant node\n\n\nRepeat from step 1 until the queue is empty\n\n\nCall root.recursiveInterpret()\n\n\n\n\nThus many quick API calls in succession will result in just one (possibly\nexpensive) call to root.recursiveInterpret(), rather than many such\n(possibly expensive) calls.\n\n\nOld stuff\n\n\n\n\nAdd a mechanism for queueing tasks to be done later.\n\n\nIt should be smart enough that, whenever task X is enqueued, then any\n   already-enqueued task Y that will need to be redone after X anyway\n   should be removed form the queue, for efficiency.\n\n\nThen rewrite Phases 2 and 3 to use this feature as needed.\n   All later phases should enqueue all nontrivial processing tasks this way.\n\n\n\n\nAll the work done before this operates more efficiently, and the large and\ncomplex deductive engine we plan to build on the foundation we have so far\nwill still be performant.\n\n\nLDE Design Phase 6: String Matching\n\n\nExtend rules to include string-based matching (like the kind of matching\nCircle-Dot and MIU use)\n\n\nThis enables: toy systems like Circle-Dot and MIU\n\n\nLDE Design Phase 7: Theorems and Proofs\n\n\n\n\nProofs (which are also subproofs)\n\n\nTheorem statements\n\n\nPairing of theorems with proofs\n\n\nHomework problems (which may be the same as a theorem-proof pair!)\n\n\n\n\nThis enables:\n\n\n\n\nProofs\n\n\nHomework assignments\n\n\n\n\nLDE Design Phase 8: Expressions\n\n\n\n\nExpanded form for non-atomic expressions (function applications,\n   binding, variables, constants, etc.)\n\n\nExtend rules to pattern-based matching (the usual kind of rules we think\n   of in math)\n\n\n\n\nThis enables: propositional logic, but with statements in expanded form only\n\n\nLDE Design Phase 9: Parsing\n\n\n\n\nRules for defining parsing\n\n\nConstant declarations may be implemented under the hood as special cases\n   of language rules.\n\n\nThis does not mean they must parse into OpenMath symbols.  It is\n  acceptable to parse them into, for example, OpenMath strings, with a\n  special attribute Constant=True, or any equally unique/recognizable\n  expression.\n\n\nAlso, this does not mean that constant declarations must feel to the\n  user like language rule declarations feel.  We can let users think of\n  them and express them as constant declarations, but under the hood it\n  may be implemented as if it had been a language rule.\n\n\n\n\n\n\n\n\nThis enables: propositional logic in its usual notation, and other related\nsimple systems\n\n\nLDE Design Phase 10: Declarations\n\n\n\n\nVariable declarations (which may be a special type of expression, or may\n   be a special type of subproof--i.e., do we mark a variable as a\n   declaration, or do we mark a subproof as a variable declaration one, and\n   then the variable at the start of it is declared?)\n\n\nExamples (structures in which you declare all manner of stuff that\n   doesn't bleed out)\n\n\n\n\nThis enables: predicate logic in standard math notation, and many other math\ntopics\n\n\nLDE Design Phase 11: Features\n\n\nAdd features to anything built so far (like multiple conclusions from a\nrule, or automatic premise finding, or automatic premise ordering, or the\nability to specify metavariable instantiations, or any of 1000 other\nfeatures we'd like to add)", 
            "title": "Phase N, List of outdated phases"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-2-basic-validation", 
            "text": "This phase defines:   Statements (just atomic expressions whose contents are a string, and\n   contain no child structures)  Definitions of the simplest rule type only: code rules written in\n   JavaScript  Formal systems (or \"mathematical topics\", which are structures we can\n   put rules inside of)   This enables really simple formal systems, ones whose statements are strings\nand that require no citing of premises.  Examples:   TriX game (in which the previous statement is always the only premise,\n   and is never cited) would become possible after Phase 2.  A system that verifies each statement independently (e.g., arithmetic\n   equations and inequalities) would also be possible.   While the intent is eventually for nontrivial validation tasks to be placed\nin a queue and handled in background threads, that work is not part of\nPhase 2.  A later phase will add support for it.", 
            "title": "LDE Design Phase 2: Basic Validation"
        }, 
        {
            "location": "/phaseN-archive/#extending-the-structure-module", 
            "text": "Giving feedback   Extend the generic  Structure  class with a convenience function called\n    feedback(a,b)  that sets the computed attribute with key \"feedback\" to a\n   JSON object whose validation result is  a  and whose corresponding brief\n   message is  b .  If both arguments are omitted, then the \"feedback\"\n   computed attribute is removed.  For instance, we might make calls like\n    S.feedback('valid','This rule is used correctly.')  or\n    S.feedback('invalid','You did not provide a valid reason.') .   Event handlers   Extend the generic  Structure  class with new event handlers for\n    aboutToChange ,  aboutToBeInserted , and  aboutToBeRemoved .  Check to see whether the existing event handlers ( wasInserted ,\n    wasRemoved , and  wasChanged ) are tested in the unit tests.  If not,\n   add tests for them, together with tests for these new events.  Provide a default implementation for  aboutToBeRemoved()  that calls\n    whatCitesMe()  in the same object and stores the result in a temporary\n   field in the object.  Then provide a default implementation of\n    wasRemoved()  that calls  validate()  on every structure on that list.  Provide default implementations of  wasInserted()  and  wasChanged() \n   that each call  validate()  in the same object, if that function exists.   Building and running functions   Add to the  Structure  class a class method  runFunction(f,args,cb)  that\n   converts the string of JavaScript code  f  into a function (through the\n    Function  constructor), then runs it on the given set of arguments,\n   sending the result to the given callback (or an error instead, using the\n   standard two-argument callback signature).  This will be overridden by\n   the LDE with an asynchronous method, but it needs to exist so that the\n    Structure  class is, in theory, independent of the LDE.", 
            "title": "Extending the Structure module"
        }, 
        {
            "location": "/phaseN-archive/#extending-the-lde-module", 
            "text": "Building and running functions in the background   After loading the  Structure  module, replace its class method\n    runFunction  with one that operates asynchronously, sending the job to a\n   background thread.  If the thread does not terminate in a short time,\n   send back an error about termination time.  Keep track of all background\n   threads that are currently running, so that the total can be queried at\n   any given time.  Extend each of the LDE's functions ( insert ,  replace , etc.) so that if\n   it terminates without there being any currently running background\n   threads then it posts a message that LDE computations are complete.  Extend the LDE's new implementation of  runFunction  so that whenever it\n   finishes calling the callback, if there are no background threads\n   running at that time, it posts the same message about computations being\n   complete.", 
            "title": "Extending the LDE module"
        }, 
        {
            "location": "/phaseN-archive/#code-based-rules", 
            "text": "The  Rule  class will be a subclass of  Structure .  If  R  is an instance\nof  Rule  then its  validate()  function should be as follows.   If  R.isA 'code'  fails, then call  R.feedback('invalid','...')  with\n   a message that only code rules are supported so far.  Then jump to the\n   final bullet point in this list.  If  R.text()  isn't valid JavaScript code that defines a function,\n   then  R.feedback('invalid','...')  with a message to that effect.\n   Then jump to the final bullet point in this list.  Otherwise  R.feedback('valid','This is a valid code rule.') .  Then:  For every expression in  R.whatCitesMe() , revalidate it.", 
            "title": "Code-based rules"
        }, 
        {
            "location": "/phaseN-archive/#statements", 
            "text": "The  Statement  class will be a subclass of  Structure .  If  S  is an\ninstance of  Statement  then its  validate()  function should be as follows.   If  S.children().length   0  then call  S.feedback('invalid','...') \n   with a message that only atomic statements supported so far.\n   Then stop.  If  S  does not have a reason attached to it, then call\n    S.feedback()  to clear feedback, and stop.  If  S  has more than one reason attached to it, then call\n    S.feedback('invalid','...')  with a message that multiple reasons is\n   not permitted.  Then stop.  Treat the one reason attached to  S  as a reference and look it up.\n   If it produces no structure, call  S.feedback('invalid','...')  with a\n   message that there is no such reason.  Then stop.  Take the object found in the previous bullet point.  If it is not an\n   instance of the  Rule  subclass defined below, call\n    S.feedback('invalid','...')  with a message that the cited reason is\n   not a rule.  Then stop.  If the cited rule has not been validated, then stop here.  (When it\n   gets validated, it will trigger a re-validation of  S .)  Let f be the JavaScript function defined in the text of the rule and\n   call  f(S)  in a background thread.  If  f(S)  ends with an error, then call  S.feedback(\"invalid\",\"...\") \n   with a message about an internal rule error.  If  f(S)  does not terminate quickly, then call\n    S.feedback(\"invalid\",\"...\")  with a message about an internal rule\n   error.  If  f(S)  is not a correctly formed validation result object, then\n   call  S.feedback(\"invalid\",\"...\")  with a message about an internal\n   rule error.  Note that a correctly formed validation result object\n   will have a  type  (\"valid\", \"invalid\") and a  message .  Otherwise call  S.feedback(f(S).type,f(S).message) .", 
            "title": "Statements"
        }, 
        {
            "location": "/phaseN-archive/#formal-systems-or-mathematical-topics", 
            "text": "The  FormalSystem  class will be a subclass of  Structure , and will add\nsupport for the following new member functions.  Assume  F  is an instance\nof  FormalSystem  in each case.  Further assume that  S  is an instance of Structure  in each case.   F.exports()  returns an array composed of these things, in the order\n   they appear in the document:  any  Rule  instance in  F.children()  any element of  F2.exports()  for any formal system  F2  in\n   F.children()    Extend  S.lookup(label)  to also check  F.exports()  whenever it\n   encounters an accessible  FormalSystem  instance.  Extend  S.whatCitesMe()  to also looks at the scope of  S.parent()  iff\n   it is a  FormalSystem  instance (and its  parent()  iff that is a\n    FormalSystem  instance, and so on).  Override the default implementation of  F.wasInserted()  so that it now\n   calls  R.whatCitesMe()  for every  R  in  F.exports()  and revalidates\n   every structure on any of those lists.  Extend the implementation of  F.aboutToBeRemoved()  and  F.wasRemoved() \n   so that each propagates the call to the function of the same name in all\n   structures in  F.exports() .", 
            "title": "Formal systems (or \"mathematical topics\")"
        }, 
        {
            "location": "/phaseN-archive/#unit-testing", 
            "text": "How we could do unit testing on this simple LDE:   Fire up the LDE so that its document is new and thus blank.  Set up a listener for the \"computation finished\" signals from the LDE,\n   storing the results for use in testing.  Tell the LDE to add three children to the LDE Document: a rule, a step\n   using it correctly, and a step using it incorrectly.  Wait until we receive the signal that says the LDE has finished\n   computing.  Examine the computation results stored in step 2 and verify correct\n   processing of the rule and two steps.   Consider each of the unusual corner cases handled above and create tests for\nit, including such situations as these:   Send a signal to the LDE to alter the incorrect use of the rule, making\n   it correct.  Wait for computation to finish and check to be sure it\n   re-validated that step as correct now.  Insert a rule with label X, followed by a statement with label X,\n   followed by a statement citing reason X.  Ensure the statement does not\n   validate because it cites a non-rule.  Remove the statement labeled X.\n   Ensure the remaining statement validates because it now cites rule X.  In a blank document, insert a statement that cites rule Y.  Then insert a\n   formal system containing rule Y before the statement.  Ensure that the\n   system notices, and that the statement automatically had its validation\n   updated.", 
            "title": "Unit testing"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-3-the-client", 
            "text": "This phase defines the LDE Client, a thin interface to the LDE defined in a\nseparate module.  The Client maintains the Facade, a shallow copy of the LDE Document that it\nkeeps in sync with it, thus providing an easy API for interacting with the\nLDE.  This page is just a description; it's not actually written in a \"design\" or\n\"how to build\" manner, at least not to the same degree that Phase 2 was.  This phase's work just makes Phase 1's work easier to use for most clients.", 
            "title": "LDE Design Phase 3: The Client"
        }, 
        {
            "location": "/phaseN-archive/#app-launch", 
            "text": "When the Client is loaded into memory (say, at app launch) it will create a\nglobal structure that is intended to be a sort of shallow/shadow/fake copy\nof the LDE Document.   Because it will imitate the structure of the LDE Document, it will be\n   a hierarchy.  But it will not be a hierarchy of Structures, because as we know,\n   Structures do computation, and that's the job of the LDE.  This is\n   just a front-end; it doesn't do anything.  So rather than calling each node in the Client's hierarchy a\n   Structure, I'll call it a  Facade.   This is to emphasize that this\n   hierarchy, stored in the Client (part of the UI) can't do anything at\n   all.  It's picture of what's really going on elsewhere, in the LDE.", 
            "title": "App launch"
        }, 
        {
            "location": "/phaseN-archive/#background-threads", 
            "text": "The Client can be told about the existence of a background thread that's\nrunning the LDE.   If it is told about such a thread, then any later\n   insertions/deletions/changes to the Facade hierarchy will immediately\n   be communicated by the Client to that LDE thread as a change event\n   (defined above).  This guarantees that the Facade hierarchy and LDE Document are always\n   in sync:  Because the LDE never alters its hierarchy, messages need\n   propagate in only one direction to guarantee that the two hierarchies\n   are isomorphic.", 
            "title": "Background threads"
        }, 
        {
            "location": "/phaseN-archive/#no-subclasses", 
            "text": "Because the nodes in the Facade don't actually do anything, they have no\nsubclasses.   Unlike the Structure class, which it makes sense to subclass so that\n   we can add various features like validation functions and so forth,\n   none of that matters in the Facade.  It ships all that work to\n   someone else.  Thus every node in the Facade hierarchy is a generic Facade node,\n   storing a dictionary of attributes given to it at construction time,\n   which are precisely the external attributes for that node.  These attributes will have been communicated to the LDE when the\n   Facade node was constructed, and the LDE can use them to figure out\n   how to create a corresponding Structure node on the LDE side (or any\n   subclass of Structure; one attribute should be the class name\n   itself!).  But the point here is that what it means for the Facade to be a\n   shallow/inactive copy of the LDE Document is that:  Every node is just a Facade node, and thus they have no\n  specialized functionality at all.  Every node just stores its attributes, not doing anything with\n  them, unlike on the LDE Document side, which does computation.", 
            "title": "No subclasses"
        }, 
        {
            "location": "/phaseN-archive/#serialization", 
            "text": "Facade nodes do one thing, actually:  They know how to serialize\n   themselves into JSON, including all their children.  This is so that they can pass themselves across to the LDE for syncing,\n   and so that the entire Facade can be serialized by the UI (later of\n   course) for saving in document metadata.", 
            "title": "Serialization"
        }, 
        {
            "location": "/phaseN-archive/#ids", 
            "text": "Each Facade node will be given, at the time it's created, an ID unique\namong all nodes in the Facade hierarchy.   This unique ID will be part of what's communicated in the change event\n   to the LDE, so that the corresponding Structure created in the LDE can\n   have the same ID.  Thus future change events from the Client to the LDE can reference nodes\n   in the hierarchy by this common ID system.  Similarly, when the LDE sends out signals about new computed attributes\n   being stored in the LDE Document, it will mention these unique IDs to\n   unambiguously indicate in which node the new computed attribute is\n   stored.  The Client will then store the same computed attribute in the\n   corresponding Facade node, so that it is accessible to the entire UI as\n   well.", 
            "title": "IDs"
        }, 
        {
            "location": "/phaseN-archive/#unit-testing_1", 
            "text": "Verify that the Facade hierarchy can be built and works independent of\n   the LDE  Verify that if you connect it to an LDE background thread, the documents\n   stay in sync  Verify that the same tests done in Phase 2 can be done also through this\n   \"API\" to the LDE  All further testing in later phases has the option of using the Client\n   or not, depending on what's best for testing in that particular instance.", 
            "title": "Unit testing"
        }, 
        {
            "location": "/phaseN-archive/#extendability", 
            "text": "The LDE is free to expose to clients any other functionality it sees\n   fit.  That is, interaction with the LDE is not limited to syncing the\n   Facade with the LDE Document and waiting for computed responses.  For instance, one type of response that should only be produced when\n   specifically asked for is a \"verbose feedback\" response, like what we\n   get in the old desktop Lurch by double-clicking a traffic light.  This\n   is too much work to create for every step of work, but should be created\n   only when needed.  Thus the LDE could expose a computeVerboseFeedback() function that took\n   the unique ID of an LDE Document structure as input and later sent back\n   a message with the corresponding verbose feedback (in HTML form) as the\n   result.", 
            "title": "Extendability"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-4-dependencies", 
            "text": "Support dependencies as read-only first-few-children of the document.  They need to be validated only to be sure they don't redeclare one\n   another's stuff.  Note that every structure already has an .exports() method, so we just\n   need to implement that structure for the root of the LDE Document, and\n   that will be what a document exports when it is used as a dependency.   Rule definitions can be stored in a master document on which others depend,\nand many later documents can all use the same central rule set.", 
            "title": "LDE Design Phase 4: Dependencies"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-5-background-queue", 
            "text": "", 
            "title": "LDE Design Phase 5: Background Queue"
        }, 
        {
            "location": "/phaseN-archive/#new-stuff", 
            "text": "The stuff in the \"old stuff\" section, immediately after this one, may no\nlonger apply; it is from an old design.  But these new plans may still be\nrelevant, depending on how efficiently interpretation is eventually seen to\nbe:  Currently, interpretation is triggered immediately in response to calls to\nthe LDE's API.  If that interpretation process takes too long, a queue of\nAPI calls can be formed.  When any request comes in to the LDE API, rather\nthan being immediately executed, it would go on a queue.  The  old  way of\nprocessing such events is analogous to handling the queue like so:   Pop an item off this API command queue  Perform the item  Call .markDirty() in the relevant node  Call root.recursiveInterpret()  Repeat from step 1 until the queue is empty   But now that we have a queue, we can do the following more efficient procedure instead:   Pop an item off this API command queue  Perform the item  Call .markDirty in the relevant node  Repeat from step 1 until the queue is empty  Call root.recursiveInterpret()   Thus many quick API calls in succession will result in just one (possibly\nexpensive) call to root.recursiveInterpret(), rather than many such\n(possibly expensive) calls.", 
            "title": "New stuff"
        }, 
        {
            "location": "/phaseN-archive/#old-stuff", 
            "text": "Add a mechanism for queueing tasks to be done later.  It should be smart enough that, whenever task X is enqueued, then any\n   already-enqueued task Y that will need to be redone after X anyway\n   should be removed form the queue, for efficiency.  Then rewrite Phases 2 and 3 to use this feature as needed.\n   All later phases should enqueue all nontrivial processing tasks this way.   All the work done before this operates more efficiently, and the large and\ncomplex deductive engine we plan to build on the foundation we have so far\nwill still be performant.", 
            "title": "Old stuff"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-6-string-matching", 
            "text": "Extend rules to include string-based matching (like the kind of matching\nCircle-Dot and MIU use)  This enables: toy systems like Circle-Dot and MIU", 
            "title": "LDE Design Phase 6: String Matching"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-7-theorems-and-proofs", 
            "text": "Proofs (which are also subproofs)  Theorem statements  Pairing of theorems with proofs  Homework problems (which may be the same as a theorem-proof pair!)   This enables:   Proofs  Homework assignments", 
            "title": "LDE Design Phase 7: Theorems and Proofs"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-8-expressions", 
            "text": "Expanded form for non-atomic expressions (function applications,\n   binding, variables, constants, etc.)  Extend rules to pattern-based matching (the usual kind of rules we think\n   of in math)   This enables: propositional logic, but with statements in expanded form only", 
            "title": "LDE Design Phase 8: Expressions"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-9-parsing", 
            "text": "Rules for defining parsing  Constant declarations may be implemented under the hood as special cases\n   of language rules.  This does not mean they must parse into OpenMath symbols.  It is\n  acceptable to parse them into, for example, OpenMath strings, with a\n  special attribute Constant=True, or any equally unique/recognizable\n  expression.  Also, this does not mean that constant declarations must feel to the\n  user like language rule declarations feel.  We can let users think of\n  them and express them as constant declarations, but under the hood it\n  may be implemented as if it had been a language rule.     This enables: propositional logic in its usual notation, and other related\nsimple systems", 
            "title": "LDE Design Phase 9: Parsing"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-10-declarations", 
            "text": "Variable declarations (which may be a special type of expression, or may\n   be a special type of subproof--i.e., do we mark a variable as a\n   declaration, or do we mark a subproof as a variable declaration one, and\n   then the variable at the start of it is declared?)  Examples (structures in which you declare all manner of stuff that\n   doesn't bleed out)   This enables: predicate logic in standard math notation, and many other math\ntopics", 
            "title": "LDE Design Phase 10: Declarations"
        }, 
        {
            "location": "/phaseN-archive/#lde-design-phase-11-features", 
            "text": "Add features to anything built so far (like multiple conclusions from a\nrule, or automatic premise finding, or automatic premise ordering, or the\nability to specify metavariable instantiations, or any of 1000 other\nfeatures we'd like to add)", 
            "title": "LDE Design Phase 11: Features"
        }, 
        {
            "location": "/enhancements/", 
            "text": "Enhancements for Later\n\n\nThis page lists helpful enhancements to work already completed, but which\nwere not essential enough to have been included in the work done so far.  We\nlist them here so as not to lose track of important improvements we might\nmake later, and we leave empty check boxes next to them so that we can later\nmark them complete as they are implemented.\n\n\n\n\n Make the \nlabels()\n function more efficient as follows.\n\n\nWhenever it is computed, cache the value in an internal field.\n\n\nThe next time \nlabels()\n is called, use the cached value if it exists.\n\n\nWhenever you call \nwasChanged()\n, be sure to clear the cached value.\n\n\n\n\n\n\n Make the \nwhatCitesMe()\n function more efficient by making it loop\n   manually through all the things in scope, tracking when anything in its\n   scope eclipses it by being labeled with one or more of its labels.  If at\n   any point it has no more labels left in force, stop iterating.  This is a\n   minor performance gain, because it will be rare that a structure is fully\n   eclipsed by other structures with the same name.", 
            "title": "Enhancements for Later"
        }, 
        {
            "location": "/enhancements/#enhancements-for-later", 
            "text": "This page lists helpful enhancements to work already completed, but which\nwere not essential enough to have been included in the work done so far.  We\nlist them here so as not to lose track of important improvements we might\nmake later, and we leave empty check boxes next to them so that we can later\nmark them complete as they are implemented.    Make the  labels()  function more efficient as follows.  Whenever it is computed, cache the value in an internal field.  The next time  labels()  is called, use the cached value if it exists.  Whenever you call  wasChanged() , be sure to clear the cached value.     Make the  whatCitesMe()  function more efficient by making it loop\n   manually through all the things in scope, tracking when anything in its\n   scope eclipses it by being labeled with one or more of its labels.  If at\n   any point it has no more labels left in force, stop iterating.  This is a\n   minor performance gain, because it will be rare that a structure is fully\n   eclipsed by other structures with the same name.", 
            "title": "Enhancements for Later"
        }, 
        {
            "location": "/ideas/", 
            "text": "LDE Design Idea Archive\n\n\nThis document records incomplete ideas the Lurch team is keeping in mind\nfor integration into later design plans.\n\n\n\n\nWe have considered a UI with buttons with mathematical names on them,\n   such as Justify (which would let you choose a reason and it would insert\n   it), Cite (which would let you click any premise and it would make the\n   arrow), a toolbar of all math words.\n\n\nWe have tested a Suggestions feature, and could really use it widely:\n\n\nWhen the cursor is near something the software could recognize as a\n  statement or a reason, it gives a faint shadow over it of what it\n  thinks you're saying.\n\n\nA single keystroke confirms, and if you don't use that keystroke, the\n  shadowy suggestion is never actually realized in the document.\n\n\nExample usage:\n\n\nType, then hit \nCtrl+Enter\n to approve an interpretation of what\n  you said as a statement.\n\n\nA visual indicator of some kind shows that the bubble was formed,\n  but since your cursor is after it, the bubble-forming animation\n  fades.\n\n\nKeep typing, then hit \nCtrl+Enter\n to approve an interpretation of\n  what you said as a reason.\n\n\nSame visual indicator process.\n\n\nImmediately a suggested connection of the reason to the statement\n  appears, and you hit \nCtrl+Enter\n again to connect them.\n\n\nSame visual indicator process.\n\n\nStart typing your next statement, and repeat from step 1.\n\n\n\n\n\n\nWhenever your cursor is in a statement accessible to the most recent\n  justification you formed, a suggested premise citation arrow could\n  appear; \nCtrl+Enter\n to confirm.\n\n\n\n\n\n\nMathQuill (and, one day, MathJax, if we choose to add it) are UX sugar\n   that sits above the document, and can be converted to text as part of\n   the UI's processing of HTML into Structures.\n\n\nA UI idea from long ago recorded here for safe keeping:\n\n\nConsider all situations in which it\u2019s possible to write a small JS\n  function that can easily take in a string of text and split it into\n  an array of substrings, like \n\"Fred is a fish\"\n to\n  \n[\"Fred is\", \"a\", \"fish\"]\n, such that the array alternates between\n  meaningful stuff and non-meaningful stuff. Then we have two things we\n  can do with such a function.\n\n\nFirst, the translator can obviously use that to trivially lift the\n  meaningful stuff out.\n\n\nSecond, the UX can also use it to \nhighlight\n \nwhile the user is\n  typing in a group\n which parts of the group\u2019s content the app is\n  paying attention to, and which parts it\u2019s ignoring. Imagine typing\n  \n[Fred is a fish]\n and the app is gently highlighting everything\n  except the 'a' or typing\n  \n[Fred, who we all love, is a very nice fish]\n\n  and the app highlights like so:\n  [\nFRED\n, who we all love, \nIS\n a very nice \nFISH\n].\n  Such highlighting would be in the overlay where the bubble is drawn,\n  and shown only when the cursor is in there.\n\n\nOne specific subclass of this idea is when we require rigid formal\n  syntax, like line-numbered proofs with\n  \nstatement[whitespace]reason[whitespace]premise,...", 
            "title": "Ideas Archive"
        }, 
        {
            "location": "/ideas/#lde-design-idea-archive", 
            "text": "This document records incomplete ideas the Lurch team is keeping in mind\nfor integration into later design plans.   We have considered a UI with buttons with mathematical names on them,\n   such as Justify (which would let you choose a reason and it would insert\n   it), Cite (which would let you click any premise and it would make the\n   arrow), a toolbar of all math words.  We have tested a Suggestions feature, and could really use it widely:  When the cursor is near something the software could recognize as a\n  statement or a reason, it gives a faint shadow over it of what it\n  thinks you're saying.  A single keystroke confirms, and if you don't use that keystroke, the\n  shadowy suggestion is never actually realized in the document.  Example usage:  Type, then hit  Ctrl+Enter  to approve an interpretation of what\n  you said as a statement.  A visual indicator of some kind shows that the bubble was formed,\n  but since your cursor is after it, the bubble-forming animation\n  fades.  Keep typing, then hit  Ctrl+Enter  to approve an interpretation of\n  what you said as a reason.  Same visual indicator process.  Immediately a suggested connection of the reason to the statement\n  appears, and you hit  Ctrl+Enter  again to connect them.  Same visual indicator process.  Start typing your next statement, and repeat from step 1.    Whenever your cursor is in a statement accessible to the most recent\n  justification you formed, a suggested premise citation arrow could\n  appear;  Ctrl+Enter  to confirm.    MathQuill (and, one day, MathJax, if we choose to add it) are UX sugar\n   that sits above the document, and can be converted to text as part of\n   the UI's processing of HTML into Structures.  A UI idea from long ago recorded here for safe keeping:  Consider all situations in which it\u2019s possible to write a small JS\n  function that can easily take in a string of text and split it into\n  an array of substrings, like  \"Fred is a fish\"  to\n   [\"Fred is\", \"a\", \"fish\"] , such that the array alternates between\n  meaningful stuff and non-meaningful stuff. Then we have two things we\n  can do with such a function.  First, the translator can obviously use that to trivially lift the\n  meaningful stuff out.  Second, the UX can also use it to  highlight   while the user is\n  typing in a group  which parts of the group\u2019s content the app is\n  paying attention to, and which parts it\u2019s ignoring. Imagine typing\n   [Fred is a fish]  and the app is gently highlighting everything\n  except the 'a' or typing\n   [Fred, who we all love, is a very nice fish] \n  and the app highlights like so:\n  [ FRED , who we all love,  IS  a very nice  FISH ].\n  Such highlighting would be in the overlay where the bubble is drawn,\n  and shown only when the cursor is in there.  One specific subclass of this idea is when we require rigid formal\n  syntax, like line-numbered proofs with\n   statement[whitespace]reason[whitespace]premise,...", 
            "title": "LDE Design Idea Archive"
        }, 
        {
            "location": "/api-overview/", 
            "text": "API Documentation Overview\n\n\nDesign Plans vs. API Documentation\n\n\nAt the top of this site, notice the two navigation menus entitled \"Design\nPlans\" and \"API Documentation.\"  The difference between them is this:\n\n\n\n\nDesign Plans\n lists concepts that have not yet been implemented and\n   documented.  Consequently, the concepts are usually not described in full\n   detail, but just the best detail available in the planning phase.\n   It answers the question, \"What do we plan to build?\"\n\n\nAPI Documentation\n lists concepts that have been implemented, and for\n   which the developers have therefore been able to document their work.\n   Having the benefit of hindsight, this is therefore more detailed, and\n   often even contains links directly into the source code.\n   It answers the question, \"What did we build?\" and is the official\n   documentation for the modules.\n\n\n\n\nAny page in the Design Plans that has been complete has had most of its\ncontent removed, because it has been superceded by the corresponding API\ndocumentation.  What remains is just a record of what was planne for that\nphase, with links to the corresponding API Documentation.\n\n\nDeveloper Workflow\n\n\nDevelopers designing and/or implementing concepts should therefore progress\nthose concepts through a lifecycle like so:\n\n\n\n\nDescribe the concept in one of the Design Plans page.  Provide as much\n    detail as you can, knowing of course that full details is impossible to\n    provide before the work has been done.\n\n\nAs you implement and test the concept, update those design documents\n    with whatever new information you create or learn as part of the work,\n    thus making them more precise.\n\n\nOnce the concept is fully implemented and tested, document the work in\n    an existing or new page in the API Documentation section.  This may\n    involve copying and pasting some of the content from the design plan,\n    provided that it still applies.  It will probably also involve adding\n    significant detail about the particulars of the implementation.\n\n\nReplace the original (less detailed) documentation in the design plans\n    with a brief description of the concept, followed by a link to the\n    corresponding part of the API Documentation for full details.\n\n\n\n\nFor the Reader\n\n\nReaders of this documentation will therefore be able to see how much has\nbeen implemented by perusing the Design Plans pages.  Those that are brief\noverviews of concepts with links to API Documentation have been implemented.\nThose that are plans for future work, with no links to any API\nDocumentation, have not yet been implemented.", 
            "title": "Overview"
        }, 
        {
            "location": "/api-overview/#api-documentation-overview", 
            "text": "", 
            "title": "API Documentation Overview"
        }, 
        {
            "location": "/api-overview/#design-plans-vs-api-documentation", 
            "text": "At the top of this site, notice the two navigation menus entitled \"Design\nPlans\" and \"API Documentation.\"  The difference between them is this:   Design Plans  lists concepts that have not yet been implemented and\n   documented.  Consequently, the concepts are usually not described in full\n   detail, but just the best detail available in the planning phase.\n   It answers the question, \"What do we plan to build?\"  API Documentation  lists concepts that have been implemented, and for\n   which the developers have therefore been able to document their work.\n   Having the benefit of hindsight, this is therefore more detailed, and\n   often even contains links directly into the source code.\n   It answers the question, \"What did we build?\" and is the official\n   documentation for the modules.   Any page in the Design Plans that has been complete has had most of its\ncontent removed, because it has been superceded by the corresponding API\ndocumentation.  What remains is just a record of what was planne for that\nphase, with links to the corresponding API Documentation.", 
            "title": "Design Plans vs. API Documentation"
        }, 
        {
            "location": "/api-overview/#developer-workflow", 
            "text": "Developers designing and/or implementing concepts should therefore progress\nthose concepts through a lifecycle like so:   Describe the concept in one of the Design Plans page.  Provide as much\n    detail as you can, knowing of course that full details is impossible to\n    provide before the work has been done.  As you implement and test the concept, update those design documents\n    with whatever new information you create or learn as part of the work,\n    thus making them more precise.  Once the concept is fully implemented and tested, document the work in\n    an existing or new page in the API Documentation section.  This may\n    involve copying and pasting some of the content from the design plan,\n    provided that it still applies.  It will probably also involve adding\n    significant detail about the particulars of the implementation.  Replace the original (less detailed) documentation in the design plans\n    with a brief description of the concept, followed by a link to the\n    corresponding part of the API Documentation for full details.", 
            "title": "Developer Workflow"
        }, 
        {
            "location": "/api-overview/#for-the-reader", 
            "text": "Readers of this documentation will therefore be able to see how much has\nbeen implemented by perusing the Design Plans pages.  Those that are brief\noverviews of concepts with links to API Documentation have been implemented.\nThose that are plans for future work, with no links to any API\nDocumentation, have not yet been implemented.", 
            "title": "For the Reader"
        }, 
        {
            "location": "/api-lde/", 
            "text": "API Documentation for the LDE Module\n\n\nThe main LDE module is not yet complete.  So far it supports only the\nfunctionality documented below, which will grow with time.\n\n\nOne Global Document\n\n\nThe module initializes a single \nStructure\n instance in a global variable,\nwhich can be queried with the public API function \ngetDocument()\n.  It\nbegins life as a freshly created \nStructure\n with no attributes, but an ID.\n\n\nThis document is called the \nLDE Document,\n and is the structure on which\nall computations done by the LDE will operate.  In the main Lurch\napplication, it will represent the meaningful content that has been\nextracted from the user's document.\n\n\nManipulating the Document\n\n\nThe document can be manipulated with four functions in the public API of\nthis module:\n\n\n\n\ninsert(structureToInsert,parentID,insertionIndex)\n inserts a new\n   structure within the global document hierarchy, as follows:\n\n\nstructureToInsert\n should be the serialized form of the structure to\n  insert (optionally created with \n.toJSON()\n in a \nStructure\n\n  instance).  After the structure is deserialized and inserted into the\n  document, \ntrackIDs()\n will be called in it; for more information on\n  that function, see \nits entry in the API docs\n.\n\n\nparentID\n is the ID of the parent under which this new child should\n  be inserted.  This must be a string ID that belongs to a structure\n  already in the global document hierarchy.  Note that the root of the\n  hierarchy is given the ID \"root\" at the time the module is loaded.\n\n\ninsertionIndex\n is the index of the child to insert, which must be\n  greater than or equal to zero and less than or equal to the number of\n  children of the parent\n\n\n\n\n\n\ndelete(ID)\n deletes from the global document hierarchy the structure\n   with the given ID, which is interpreted with the same conventions as the\n   \nparentID\n is for the \ninsert\n function.  After the structure is deleted,\n   \nuntrackIDs()\n will be called in it; for more information on that\n   function, see \nits entry in the API docs\n.\n\n\nreplace(ID,newStructure)\n replaces the structure with the given ID with\n   the given new structure.\n\n\nID\n is interpreted with the same conventions as the \nparentID\n is for\n  the \ninsert\n function\n\n\nnewStructure\n is a serialized structure, as \nstructureToInsert\n is\n  for the \ninsert\n function\n\n\nAfter this operation, \nuntrackIDs()\n will be called in the replaced\n  structure and \ntrackIDs()\n in the replacement; for more information\n  on those functions, see\n  \ntheir entries in the API docs\n.\n\n\n\n\n\n\nsetAttribute(ID,key,value)\n modifies a single external attribute of a\n   structure within the global document hierarchy, as follows:\n\n\nID\n is interpreted with the same conventions as the \nparentID\n is for\n  the \ninsert\n function\n\n\nkey\n is the key of the external attribute to create or overwrite.  If\n  this key happens to be \"id\", then the class-level tracking of IDs\n  will be updated to repsect the change.\n\n\nvalue\n is the new value, which must be JSON data.  (No checks are\n  done to verify that it is JSON data, but errors will transpire\n  eventually if non-JSON data is passed.)\n\n\n\n\n\n\n\n\nAsynchronous API\n\n\nIf the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners will\nhandle messages of four types, \ninsert\n/\ndelete\n/\nreplace\n/\nsetAttribute\n,\nmirroring the four functions given above, and calling them internally.\n\n\nThey can be called by passing a message of the form \n[ command, args... ]\n,\nwhere the command is a string (one of \n\"insert\"\n, \n\"delete\"\n, etc.) and the\narguments list is the same list that would be passed to the function itself,\nas documented in the previous section on this page.\n\n\nFor example, you could start an LDE in a WebWorker and insert a new\nstructure as the first child of its global document as follows.\n\n\n    // import the lde.js file (kept in the release/ folder)\n    // (This requires having the structure.js file in the same folder.)\n    var worker = new Worker( 'lde.js' );\n    var A = new Structure();\n    worker.postMessage( [ 'insert', A.toJSON(), 'root', 0 ] );", 
            "title": "The LDE"
        }, 
        {
            "location": "/api-lde/#api-documentation-for-the-lde-module", 
            "text": "The main LDE module is not yet complete.  So far it supports only the\nfunctionality documented below, which will grow with time.", 
            "title": "API Documentation for the LDE Module"
        }, 
        {
            "location": "/api-lde/#one-global-document", 
            "text": "The module initializes a single  Structure  instance in a global variable,\nwhich can be queried with the public API function  getDocument() .  It\nbegins life as a freshly created  Structure  with no attributes, but an ID.  This document is called the  LDE Document,  and is the structure on which\nall computations done by the LDE will operate.  In the main Lurch\napplication, it will represent the meaningful content that has been\nextracted from the user's document.", 
            "title": "One Global Document"
        }, 
        {
            "location": "/api-lde/#manipulating-the-document", 
            "text": "The document can be manipulated with four functions in the public API of\nthis module:   insert(structureToInsert,parentID,insertionIndex)  inserts a new\n   structure within the global document hierarchy, as follows:  structureToInsert  should be the serialized form of the structure to\n  insert (optionally created with  .toJSON()  in a  Structure \n  instance).  After the structure is deserialized and inserted into the\n  document,  trackIDs()  will be called in it; for more information on\n  that function, see  its entry in the API docs .  parentID  is the ID of the parent under which this new child should\n  be inserted.  This must be a string ID that belongs to a structure\n  already in the global document hierarchy.  Note that the root of the\n  hierarchy is given the ID \"root\" at the time the module is loaded.  insertionIndex  is the index of the child to insert, which must be\n  greater than or equal to zero and less than or equal to the number of\n  children of the parent    delete(ID)  deletes from the global document hierarchy the structure\n   with the given ID, which is interpreted with the same conventions as the\n    parentID  is for the  insert  function.  After the structure is deleted,\n    untrackIDs()  will be called in it; for more information on that\n   function, see  its entry in the API docs .  replace(ID,newStructure)  replaces the structure with the given ID with\n   the given new structure.  ID  is interpreted with the same conventions as the  parentID  is for\n  the  insert  function  newStructure  is a serialized structure, as  structureToInsert  is\n  for the  insert  function  After this operation,  untrackIDs()  will be called in the replaced\n  structure and  trackIDs()  in the replacement; for more information\n  on those functions, see\n   their entries in the API docs .    setAttribute(ID,key,value)  modifies a single external attribute of a\n   structure within the global document hierarchy, as follows:  ID  is interpreted with the same conventions as the  parentID  is for\n  the  insert  function  key  is the key of the external attribute to create or overwrite.  If\n  this key happens to be \"id\", then the class-level tracking of IDs\n  will be updated to repsect the change.  value  is the new value, which must be JSON data.  (No checks are\n  done to verify that it is JSON data, but errors will transpire\n  eventually if non-JSON data is passed.)", 
            "title": "Manipulating the Document"
        }, 
        {
            "location": "/api-lde/#asynchronous-api", 
            "text": "If the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners will\nhandle messages of four types,  insert / delete / replace / setAttribute ,\nmirroring the four functions given above, and calling them internally.  They can be called by passing a message of the form  [ command, args... ] ,\nwhere the command is a string (one of  \"insert\" ,  \"delete\" , etc.) and the\narguments list is the same list that would be passed to the function itself,\nas documented in the previous section on this page.  For example, you could start an LDE in a WebWorker and insert a new\nstructure as the first child of its global document as follows.      // import the lde.js file (kept in the release/ folder)\n    // (This requires having the structure.js file in the same folder.)\n    var worker = new Worker( 'lde.js' );\n    var A = new Structure();\n    worker.postMessage( [ 'insert', A.toJSON(), 'root', 0 ] );", 
            "title": "Asynchronous API"
        }, 
        {
            "location": "/api-structures/", 
            "text": "API Documentation for the \nStructure\n Class\n\n\nSource Code\n\n\n\n\nThe \nStructure\n class\n\n\nUnit tests of the \nStructure\n class\n\n\n\n\nPurpose\n\n\nThe Lurch Deductive Engine (LDE, \ndocumented here\n) maintains a\ndocument called the LDE Document, which is a hierarchy (or tree).  The nodes\nin that tree are instances of this class (\nStructure\n) or one of its\nsubclasses.\n\n\nWe build into this base class all the functionality that must be present at\nevery point in that hierarchy, and leave to subclasses that functionality\nthat makes sense only for specific types of structures.  For instance, this\nclass contains no functionality to support rules of inference, because they\nare one specific type of structure, so their functionality will be\nimplemented in a subclass for that purpose.\n\n\nConstructing and Serialization\n\n\nThere is one constructor for the class\n(\nsee source code\n):\n\n\nStructure(child1,child2,...)\n creates a new instance, with the given list\nof children, each of which must be a \nStructure\n instance (or it will be\nignored).  All such children are removed from any old parent they had before\nbeing inserted into this newly created one.\n\n\nInstances can be converted to and from JSON, for saving to a file, storing\npermanently anywhere, or transmitting across threads or network connections.\nTo ensure that deserialization correctly reconstructs instances of the right\nsubclass of \nStructure\n, each subclass must be registered.  To do so, we\nprovide the \naddSubclass\n function.  Use it like so.\n\n\nJavaScript:\n\n\n    MySubclass = function ( /* ... */ ) { /* ... */ };\n    // ...\n    MySubclass.prototype.className = Structure.addSubclass( 'MySubclass', MySubclass );\n\n\n\n\nCoffeeScript, somewhere inside the class definition:\n\n\n    class MySubclass extends Structure\n        # ...\n        className : Structure.addSubclass 'MySubclass', MySubclass\n        # ...\n\n\n\n\nThen one can serialize and deserialize any hierarchy containing \nStructure\n\ninstances, as well as instances of its subclasses, using the member function\n\nsomeInstance.toJSON()\n (which obviously yields a JSON structure) or the\nclass function \nStructure.fromJSON(data)\n, which accepts JSON data created\nfrom the first function.\n\n\nSerializing a structure preserves its class, its external and computed\nattributes (\ndocumented below\n), and\nthe hierarchy for which it is the root.\n\n\nStructure hierarchies\n\n\nTo navigate or alter a hierarchy of \nStructure\n instances, use the\nfollowing member functions present in each instance.\n\n\n\n\ninstance.parent()\n yields the parent structure, or \nnull\n if there is\n   no parent (i.e., the instance is the root of a hierarchy)\n\n\ninstance.children()\n yields an array containing the children structures,\n   in order, or an empty array if there are none\n\n\ninstance.indexInParent()\n yields the index of the child in its parent's\n   ordered list of children, or unddefined if the instance has no parent\n\n\ninstance.previousSibling()\n and \ninstance.nextSibling()\n yield the\n   adjacent structure in the parent's child list, forward or backward, as\n   expected, or undefined if there is no such sibling\n\n\ninstance.removeFromParent()\n drops the instance from it's parent's list\n   of children (thereby decreasing the length of that child list by 1) and\n   thus making \ninstance.parent()\n null\n\n\ninstance.removeChild(index)\n is a convenience equivalent to\n   \ninstance.children()[index].removeFromParent()\n\n\ninstance.insertChild(child,index)\n expects a structure instance as the\n   first argument and an index into the children list as the second.  It\n   inserts the new child at that index, thus increasing the number of\n   children by 1.  You may use an index equal to the length of the child\n   list to append.  The child is removed from its previous parent, if any,\n   before being inserted here.\n\n\ninstance.replaceWith(other)\n expects another structure instance as its\n   argument.  It removes \ninstance\n from its parent, if there is one, and\n   then inserts \nother\n at the same index in the parent, thus replacing\n   \ninstance\n.  This has no effect if \ninstance\n has no parent.  It is\n   equivalent to successive calls to \nremoveFromParent()\n and\n   \ninsertChild()\n at the instance and its parent, respectively.\n\n\ninstance.copy()\n makes a deep copy of the instance, including all nodes\n   below it in the hierarchy.  This new copy will have all the same IDs as\n   the previous copy, so to preserve uniqueness of IDs, you will usually\n   want to call \ncopiedInstance.clearIDs()\n afterwards.\n\n\n\n\nThe order of nodes in the hierarchy is often important.  We have one simple\norder relation on the nodes in the hierarchy, and one more complex.  The\nsimplest is just whether node A is \"earlier than\" node B, in the order\ninduced by an in-order tree traversal (that is, the order in which the open\nparentheses would appear if the tree were written as a LISP expression).\nThis relation can be tested with \ninstance.isEarlierThan(other)\n.\n\n\nThe more complex order relation is accessibility, which we do not define\nhere, because it is already defined \nin the source code\ndocumentation\n.\nThat relation is implemented with the following member functions available\nin all instances of the class.\n\n\n\n\nA.isAccessibleTo(B)\n implements the relation as defined at the link\n   given above.\n\n\nA.isInTheScopeOf(B)\n is equivalent to \nB.isAccessibleTo(A)\n.\n\n\nA.iteratorOverAccessibles()\n yields an \"iterator\" object, which is an\n   object that can produce the list of nodes accessible to \nA\n by repeated\n   calls to the \nnext()\n member of the object.  Consider the following\n   JavaScript code that would use such an iterator.\n\n\n\n\n    var iterator = A.iteratorOverAccessibles();\n    var accessible;\n    while ( accessible = iterator.next() ) {\n        console.log( 'The next accessible structure is:',\n            accessible.toJSON() );\n    }\n\n\n\n\nNodes are produced by the iterator in reverse order (under the\n\nisEarlierThan\n relation) starting from the first accessible node before\n\nA\n.  When the \nnext()\n function yields null for the first time, the end of\nthe list has been reached.  (The \nnext()\n function will yield null forever\nthereafter.)\n\n\nIterators are more efficient than producing the entire list and returning\nit, because the client may be seeking just one particular node in the list,\nand thus producing the entire list so that the client can search just a\nsmall part of it could be wasteful.\n\n\nThere is an analogous function for scopes.\n\n\n\n\nA.iteratorOverScope()\n functions like \nA.iteratorOverAccessibles()\n, but\n   walks forwards through the structure, including precisely those nodes for\n   which \nB.isInTheScopeOf(A)\n holds true.\n\n\n\n\nThere are then four functions that use these iterators under the hood.\nClients will most likely wish to use these rather than have direct access\nto the iterators.\n\n\n\n\nA.firstAccessible(P)\n expects \nP\n to be a one-place predicate (that is,\n   a JavaScript function that can be evaluated on a single argument, and\n   yields true or false in each case) and yields the first item on the\n   \"accessibles\" list (as given by \nA.iteratorOverAccessibles()\n) for which\n   \nP\n yields true.  It returns undefined if there is no such thing.\n\n\nA.firstInScope(P)\n expects \nP\n to be a one-place predicate, as just\n   defined, and behaves just like \nfirstAccessible()\n, except it walks\n   through \nA.iteratorOverScope()\n instead.\n\n\nA.allAccessibles(P)\n expects \nP\n as in the previous two functions, and\n   yields all nodes accessible to \nA\n that satisfy \nP\n, in the same order\n   they would be reported by \niteratorOverAccessibles()\n.\n\n\nA.allInScope(P)\n expects \nP\n as in the previous two functions, and\n   yields all nodes in the scope of \nA\n that satisfy \nP\n, in the same order\n   they would be reported by \niteratorOverScope()\n.\n\n\n\n\nStructure attributes and connections\n\n\nAttributes in general\n\n\nStructures have two types of attributes, computed and external.  The\ndistinction is documented in the source code,\n\nhere\n and\n\nhere\n.\n\n\nThe following functions available in each instance of the structure class\nsupport external and computed attributes.\n\n\n\n\ninstance.getComputedAttribute(key)\n and\n   \ninstance.getExternalAttribute(key)\n look up computed or external\n   attributes by a given string \nkey\n.\n\n\ninstance.setComputedAttribute(key,value)\n and\n   \ninstance.setExternalAttribute(key,value)\n store computed or external\n   attributes under a given string \nkey\n with value \nvalue\n, which should be\n   a JSON structure (or atomic data).  No check is made to verify that the\n   value is of this type, but errors will transpire later if this condition\n   is not satisfied (specifically, serialization errors).\n\n\ninstance.clearComputedAttributes(key1,key2,...)\n and\n   \ninstance.clearExternalAttributes(key1,key2,...)\n remove the key-value\n   pairs of computed or external attributes associated with any of the keys\n   passed as parameters.  It is acceptable to pass any number of keys,\n   including just one.  If zero are passed, \nall\n key-value pairs are\n   removed.\n\n\ninstance.attr(object)\n adds all attributes of the given object as\n   external attributes to the instance, and returns the instance itself.\n   This is useful when constructing hierarchies, as follows.\n\n\n\n\n    var A = new Structure(\n        ( new Structure() ).attr( { name : 'example structure' } ),\n        ( new Structure() ).attr( { color : '#99ff00' } )\n    );\n\n\n\n\n\n\ninstance.compute(arguments)\n is a useful shortcut for storing computed\n   attributes.  We do not redocument its details here; see the documentation\n   in the source code at the end of\n   \nthis section\n.\n\n\n\n\nConnections as a type of attribute\n\n\nWithin a structure's external attributes are two key-value pairs that should\nnot be used for any other purpose, those with keys \nconnectionsOut\n and\n\nconnectionsIn\n.  These store data about connections between pairs of\nstructures in the same heirarchy.  The data is stored by structure IDs, so\nmaking connections assumes that structures each have a unique ID, as\ndocumented \nbelow\n.\n\n\nYou can query the connections among structures with these functions:\n\n\n\n\nsource.allConnectionsOut(type)\n returns a list of all destinations to\n   which the source is connected by one or more connections of the given\n   type.  Each destination appears on the list a number of times equal to\n   the number of connections of the given type from the source to that\n   destination.\n\n\ndestination.allConnectionsIn(type)\n functions analogously to the\n   previous, but for connections into a destination, rather than out from a\n   source.\n\n\nsource.allConnectionsOut()\n returns a list of destination-type pairs,\n   all connections that go out from the given source structure.\n\n\ndestination.allConnectionsIn()\n functions analogously to the previous,\n   but for connections into a destination, rather than out from a source.\n\n\n\n\nTo create or destroy connections, use these functions:\n\n\n\n\nsource.connectTo(destination,type)\n, where \nsource\n and \ndestination\n\n   are \nStructure\n instances and \ntype\n is a string containing the type of\n   connection, creates a new connection.  There can be multiple connections\n   between the same two structures, even of the same type.  Returns true if\n   the connection was formed, false if some error prevented it (such as the\n   destination not being a structure, or not having an ID, or the source\n   not having an ID).\n\n\nsource.disconnectFrom(destination,type)\n undoes the previous operation.\n   Because there may be multiple connections between the source and\n   destination of the same type, this simply decreases that number by one.\n   Returns true on success or false on failure (for example, if there were\n   no connection to delete).\n\n\n\n\nIf the \nconnectionsOut\n and \nconnectionsIn\n data is directly manipulated by\nthe client (not recommended), then you can call \nroot.fillOutConnections()\n\nto ensure that the connection data stored in every source matches that\nstored in the corresponding destinations, and vice versa.\n\n\nUnique IDs\n\n\nThe \nStructure\n class maintains a mapping from IDs (as strings) to\ninstances of the class.  An instance gets its ID from the external attribute\nwith key \"id.\"  All IDs in a hierarchy can be tracked (that is, recorded\ninto this class-level mapping) with the \ntrackIDs()\n function documented\nbelow.\n\n\nHere are the relevant functions:\n\n\n\n\ninstance.id()\n returns the instance's ID, if it has one, or undefined if\n   not\n\n\ninstance.trackIDs()\n asks the class to update the class variable that\n   maps IDs to instances, recording the connection of all IDs for all nodes\n   in the hierarchy whose root is \ninstance\n.  This will overwrite earlier\n   data in that mapping if and only if you have not kept IDs unique.\n\n\ninstance.untrackIDs()\n removes from the class-level mapping all IDs that\n   appear in the hierarchy whose root is \ninstance\n.  If you are done with\n   a \nStructure\n instance, you must call this function in it, so that its\n   memory is guaranteed to eventually be garbage collected.\n\n\nStructure.instanceWithID(id)\n takes a string ID and yields the instance\n   with that ID, if there is one, and that instance has recorded its ID in\n   the class-level variable for this purpose by means of a call to\n   \ntrackIDs()\n, or null or undefined if there is none.\n\n\n\n\nEvents and event handlers\n\n\nAny \nStructure\n instance fires up to six different types of events during\nits lifetime: \nwillBeInserted\n, \nwasInserted\n, \nwillBeRemoved\n,\n\nwasRemoved\n, \nwillBeChanged\n, and \nwasChanged\n.  To install an event\nhandler for one of these, simply overwrite that key in the \nStructure\n\nobject itself, as in \nmyStructure.willBeRemoved = myHandlerFunction\n.\n\n\nInsertion events are fired immediately before/after the \nStructure\n is added\nas a child under a new parent.  Removal events are fired immediately\nbefore/after the \nStructure\n is removed from an existing parent.  Change\nevents are fired immediately before/after an external attribute of the\n\nStructure\n instance changes.  No events are fired when computed attributes\nchange.\n\n\nExample:\n\n\n    var A = new Structure();\n    var B = new Structure();\n    A.willBeInserted = function () { console.log( 'Now!' ); };\n    B.insertChild( A ); // prints 'Now!' to console just before inserting", 
            "title": "Structures"
        }, 
        {
            "location": "/api-structures/#api-documentation-for-the-structure-class", 
            "text": "", 
            "title": "API Documentation for the Structure Class"
        }, 
        {
            "location": "/api-structures/#source-code", 
            "text": "The  Structure  class  Unit tests of the  Structure  class", 
            "title": "Source Code"
        }, 
        {
            "location": "/api-structures/#purpose", 
            "text": "The Lurch Deductive Engine (LDE,  documented here ) maintains a\ndocument called the LDE Document, which is a hierarchy (or tree).  The nodes\nin that tree are instances of this class ( Structure ) or one of its\nsubclasses.  We build into this base class all the functionality that must be present at\nevery point in that hierarchy, and leave to subclasses that functionality\nthat makes sense only for specific types of structures.  For instance, this\nclass contains no functionality to support rules of inference, because they\nare one specific type of structure, so their functionality will be\nimplemented in a subclass for that purpose.", 
            "title": "Purpose"
        }, 
        {
            "location": "/api-structures/#constructing-and-serialization", 
            "text": "There is one constructor for the class\n( see source code ):  Structure(child1,child2,...)  creates a new instance, with the given list\nof children, each of which must be a  Structure  instance (or it will be\nignored).  All such children are removed from any old parent they had before\nbeing inserted into this newly created one.  Instances can be converted to and from JSON, for saving to a file, storing\npermanently anywhere, or transmitting across threads or network connections.\nTo ensure that deserialization correctly reconstructs instances of the right\nsubclass of  Structure , each subclass must be registered.  To do so, we\nprovide the  addSubclass  function.  Use it like so.  JavaScript:      MySubclass = function ( /* ... */ ) { /* ... */ };\n    // ...\n    MySubclass.prototype.className = Structure.addSubclass( 'MySubclass', MySubclass );  CoffeeScript, somewhere inside the class definition:      class MySubclass extends Structure\n        # ...\n        className : Structure.addSubclass 'MySubclass', MySubclass\n        # ...  Then one can serialize and deserialize any hierarchy containing  Structure \ninstances, as well as instances of its subclasses, using the member function someInstance.toJSON()  (which obviously yields a JSON structure) or the\nclass function  Structure.fromJSON(data) , which accepts JSON data created\nfrom the first function.  Serializing a structure preserves its class, its external and computed\nattributes ( documented below ), and\nthe hierarchy for which it is the root.", 
            "title": "Constructing and Serialization"
        }, 
        {
            "location": "/api-structures/#structure-hierarchies", 
            "text": "To navigate or alter a hierarchy of  Structure  instances, use the\nfollowing member functions present in each instance.   instance.parent()  yields the parent structure, or  null  if there is\n   no parent (i.e., the instance is the root of a hierarchy)  instance.children()  yields an array containing the children structures,\n   in order, or an empty array if there are none  instance.indexInParent()  yields the index of the child in its parent's\n   ordered list of children, or unddefined if the instance has no parent  instance.previousSibling()  and  instance.nextSibling()  yield the\n   adjacent structure in the parent's child list, forward or backward, as\n   expected, or undefined if there is no such sibling  instance.removeFromParent()  drops the instance from it's parent's list\n   of children (thereby decreasing the length of that child list by 1) and\n   thus making  instance.parent()  null  instance.removeChild(index)  is a convenience equivalent to\n    instance.children()[index].removeFromParent()  instance.insertChild(child,index)  expects a structure instance as the\n   first argument and an index into the children list as the second.  It\n   inserts the new child at that index, thus increasing the number of\n   children by 1.  You may use an index equal to the length of the child\n   list to append.  The child is removed from its previous parent, if any,\n   before being inserted here.  instance.replaceWith(other)  expects another structure instance as its\n   argument.  It removes  instance  from its parent, if there is one, and\n   then inserts  other  at the same index in the parent, thus replacing\n    instance .  This has no effect if  instance  has no parent.  It is\n   equivalent to successive calls to  removeFromParent()  and\n    insertChild()  at the instance and its parent, respectively.  instance.copy()  makes a deep copy of the instance, including all nodes\n   below it in the hierarchy.  This new copy will have all the same IDs as\n   the previous copy, so to preserve uniqueness of IDs, you will usually\n   want to call  copiedInstance.clearIDs()  afterwards.   The order of nodes in the hierarchy is often important.  We have one simple\norder relation on the nodes in the hierarchy, and one more complex.  The\nsimplest is just whether node A is \"earlier than\" node B, in the order\ninduced by an in-order tree traversal (that is, the order in which the open\nparentheses would appear if the tree were written as a LISP expression).\nThis relation can be tested with  instance.isEarlierThan(other) .  The more complex order relation is accessibility, which we do not define\nhere, because it is already defined  in the source code\ndocumentation .\nThat relation is implemented with the following member functions available\nin all instances of the class.   A.isAccessibleTo(B)  implements the relation as defined at the link\n   given above.  A.isInTheScopeOf(B)  is equivalent to  B.isAccessibleTo(A) .  A.iteratorOverAccessibles()  yields an \"iterator\" object, which is an\n   object that can produce the list of nodes accessible to  A  by repeated\n   calls to the  next()  member of the object.  Consider the following\n   JavaScript code that would use such an iterator.       var iterator = A.iteratorOverAccessibles();\n    var accessible;\n    while ( accessible = iterator.next() ) {\n        console.log( 'The next accessible structure is:',\n            accessible.toJSON() );\n    }  Nodes are produced by the iterator in reverse order (under the isEarlierThan  relation) starting from the first accessible node before A .  When the  next()  function yields null for the first time, the end of\nthe list has been reached.  (The  next()  function will yield null forever\nthereafter.)  Iterators are more efficient than producing the entire list and returning\nit, because the client may be seeking just one particular node in the list,\nand thus producing the entire list so that the client can search just a\nsmall part of it could be wasteful.  There is an analogous function for scopes.   A.iteratorOverScope()  functions like  A.iteratorOverAccessibles() , but\n   walks forwards through the structure, including precisely those nodes for\n   which  B.isInTheScopeOf(A)  holds true.   There are then four functions that use these iterators under the hood.\nClients will most likely wish to use these rather than have direct access\nto the iterators.   A.firstAccessible(P)  expects  P  to be a one-place predicate (that is,\n   a JavaScript function that can be evaluated on a single argument, and\n   yields true or false in each case) and yields the first item on the\n   \"accessibles\" list (as given by  A.iteratorOverAccessibles() ) for which\n    P  yields true.  It returns undefined if there is no such thing.  A.firstInScope(P)  expects  P  to be a one-place predicate, as just\n   defined, and behaves just like  firstAccessible() , except it walks\n   through  A.iteratorOverScope()  instead.  A.allAccessibles(P)  expects  P  as in the previous two functions, and\n   yields all nodes accessible to  A  that satisfy  P , in the same order\n   they would be reported by  iteratorOverAccessibles() .  A.allInScope(P)  expects  P  as in the previous two functions, and\n   yields all nodes in the scope of  A  that satisfy  P , in the same order\n   they would be reported by  iteratorOverScope() .", 
            "title": "Structure hierarchies"
        }, 
        {
            "location": "/api-structures/#structure-attributes-and-connections", 
            "text": "", 
            "title": "Structure attributes and connections"
        }, 
        {
            "location": "/api-structures/#attributes-in-general", 
            "text": "Structures have two types of attributes, computed and external.  The\ndistinction is documented in the source code, here  and here .  The following functions available in each instance of the structure class\nsupport external and computed attributes.   instance.getComputedAttribute(key)  and\n    instance.getExternalAttribute(key)  look up computed or external\n   attributes by a given string  key .  instance.setComputedAttribute(key,value)  and\n    instance.setExternalAttribute(key,value)  store computed or external\n   attributes under a given string  key  with value  value , which should be\n   a JSON structure (or atomic data).  No check is made to verify that the\n   value is of this type, but errors will transpire later if this condition\n   is not satisfied (specifically, serialization errors).  instance.clearComputedAttributes(key1,key2,...)  and\n    instance.clearExternalAttributes(key1,key2,...)  remove the key-value\n   pairs of computed or external attributes associated with any of the keys\n   passed as parameters.  It is acceptable to pass any number of keys,\n   including just one.  If zero are passed,  all  key-value pairs are\n   removed.  instance.attr(object)  adds all attributes of the given object as\n   external attributes to the instance, and returns the instance itself.\n   This is useful when constructing hierarchies, as follows.       var A = new Structure(\n        ( new Structure() ).attr( { name : 'example structure' } ),\n        ( new Structure() ).attr( { color : '#99ff00' } )\n    );   instance.compute(arguments)  is a useful shortcut for storing computed\n   attributes.  We do not redocument its details here; see the documentation\n   in the source code at the end of\n    this section .", 
            "title": "Attributes in general"
        }, 
        {
            "location": "/api-structures/#connections-as-a-type-of-attribute", 
            "text": "Within a structure's external attributes are two key-value pairs that should\nnot be used for any other purpose, those with keys  connectionsOut  and connectionsIn .  These store data about connections between pairs of\nstructures in the same heirarchy.  The data is stored by structure IDs, so\nmaking connections assumes that structures each have a unique ID, as\ndocumented  below .  You can query the connections among structures with these functions:   source.allConnectionsOut(type)  returns a list of all destinations to\n   which the source is connected by one or more connections of the given\n   type.  Each destination appears on the list a number of times equal to\n   the number of connections of the given type from the source to that\n   destination.  destination.allConnectionsIn(type)  functions analogously to the\n   previous, but for connections into a destination, rather than out from a\n   source.  source.allConnectionsOut()  returns a list of destination-type pairs,\n   all connections that go out from the given source structure.  destination.allConnectionsIn()  functions analogously to the previous,\n   but for connections into a destination, rather than out from a source.   To create or destroy connections, use these functions:   source.connectTo(destination,type) , where  source  and  destination \n   are  Structure  instances and  type  is a string containing the type of\n   connection, creates a new connection.  There can be multiple connections\n   between the same two structures, even of the same type.  Returns true if\n   the connection was formed, false if some error prevented it (such as the\n   destination not being a structure, or not having an ID, or the source\n   not having an ID).  source.disconnectFrom(destination,type)  undoes the previous operation.\n   Because there may be multiple connections between the source and\n   destination of the same type, this simply decreases that number by one.\n   Returns true on success or false on failure (for example, if there were\n   no connection to delete).   If the  connectionsOut  and  connectionsIn  data is directly manipulated by\nthe client (not recommended), then you can call  root.fillOutConnections() \nto ensure that the connection data stored in every source matches that\nstored in the corresponding destinations, and vice versa.", 
            "title": "Connections as a type of attribute"
        }, 
        {
            "location": "/api-structures/#unique-ids", 
            "text": "The  Structure  class maintains a mapping from IDs (as strings) to\ninstances of the class.  An instance gets its ID from the external attribute\nwith key \"id.\"  All IDs in a hierarchy can be tracked (that is, recorded\ninto this class-level mapping) with the  trackIDs()  function documented\nbelow.  Here are the relevant functions:   instance.id()  returns the instance's ID, if it has one, or undefined if\n   not  instance.trackIDs()  asks the class to update the class variable that\n   maps IDs to instances, recording the connection of all IDs for all nodes\n   in the hierarchy whose root is  instance .  This will overwrite earlier\n   data in that mapping if and only if you have not kept IDs unique.  instance.untrackIDs()  removes from the class-level mapping all IDs that\n   appear in the hierarchy whose root is  instance .  If you are done with\n   a  Structure  instance, you must call this function in it, so that its\n   memory is guaranteed to eventually be garbage collected.  Structure.instanceWithID(id)  takes a string ID and yields the instance\n   with that ID, if there is one, and that instance has recorded its ID in\n   the class-level variable for this purpose by means of a call to\n    trackIDs() , or null or undefined if there is none.", 
            "title": "Unique IDs"
        }, 
        {
            "location": "/api-structures/#events-and-event-handlers", 
            "text": "Any  Structure  instance fires up to six different types of events during\nits lifetime:  willBeInserted ,  wasInserted ,  willBeRemoved , wasRemoved ,  willBeChanged , and  wasChanged .  To install an event\nhandler for one of these, simply overwrite that key in the  Structure \nobject itself, as in  myStructure.willBeRemoved = myHandlerFunction .  Insertion events are fired immediately before/after the  Structure  is added\nas a child under a new parent.  Removal events are fired immediately\nbefore/after the  Structure  is removed from an existing parent.  Change\nevents are fired immediately before/after an external attribute of the Structure  instance changes.  No events are fired when computed attributes\nchange.  Example:      var A = new Structure();\n    var B = new Structure();\n    A.willBeInserted = function () { console.log( 'Now!' ); };\n    B.insertChild( A ); // prints 'Now!' to console just before inserting", 
            "title": "Events and event handlers"
        }
    ]
}