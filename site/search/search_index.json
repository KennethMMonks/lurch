{
    "docs": [
        {
            "location": "/", 
            "text": "The Lurch Deductive Engine (LDE)\n\n\nThis documentation site contains the design of the LDE.\n\n\nWe will implement that design, and as we do so, the various phases of\ndevelopment (accessible from the navigation menu above) will be converted\nfrom pages describing the plan into pages describing the completed API.\n\n\nUse the menu at the top of this site to find content.\n\n\nSee the source code repository here.", 
            "title": "Home"
        }, 
        {
            "location": "/#the-lurch-deductive-engine-lde", 
            "text": "This documentation site contains the design of the LDE.  We will implement that design, and as we do so, the various phases of\ndevelopment (accessible from the navigation menu above) will be converted\nfrom pages describing the plan into pages describing the completed API.  Use the menu at the top of this site to find content.  See the source code repository here.", 
            "title": "The Lurch Deductive Engine (LDE)"
        }, 
        {
            "location": "/design-overview/", 
            "text": "LDE Design Overview\n\n\nThis page lists the design principles adopted by the Lurch team to date\nregarding the LDE, with reasons and explanations for each.  This document\ncan be used as reference, and to guide development, but it may also be\nchanged as better ideas come along.\n\n\nTo see the specific phases of development planned for the LDE, and what's\ncompleted, use the \"Phases\" menu above.\n\n\nElegance and Simplicity\n\n\nThese are of utmost importance, because\n\n\n\n\nthey make Lurch easier to explain to students or in an Advanced User's\n   Guide (AUG),\n\n\nthey make Lurch easier to test because it has fewer unusual corner cases\n   or special handling of odd circumstances,\n\n\nthey make Lurch easier to implement for the same reason, and\n\n\nthey make it easier for us to be confident that our designs are good,\n   because they're easier to hold in your head and grok all at once.\n\n\n\n\nFeedback and Validation\n\n\n\n\nThe primary purpose of the Lurch application is to give feedback to the\n   user about the work they type into their document.\n\n\nBecause this will often involve validating steps of work in a proof, we\n   may use the terms \"feedback\" and \"validation\" interchangeably, even\n   though technically validation is just a particular type of feedback\n   (though the most common type in our case).\n\n\nOne-Pass Validation (OPV)\n is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   does so by reprocessing every bit of meaningful content from scratch, in\n   one (large, possibly time-consuming) pass over the whole document.\n\n\nReal-Time Validation (RTV)\n is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   attempts to re-use as much information from previous validation as\n   possible, only updating those portions of it that need updating in\n   response to the specific change the user just made.  Thus RTV is\n   trickier to design and implement than OPV, but more efficient at\n   run-time.\n\n\nAn important concept for our test suite is that any RTV design can be\n   converted to an OPV design trivially, and then used for comparison\n   testing.  Simply replace all sophisticated RTV-style change event\n   handlers with OPV-style ones, that mark the entire document as needing\n   reprocessing.  Then any potential change that can be made to the user's\n   document can be run through each of these engines in parallel, and the\n   results compared for equivalence.\n\n\nNote that the choice of OPV vs. RTV is independent of the choice of\n   manual validation vs. automatic validation.  RTV certainly makes\n   automatic validation nicer, and thus makes manual validation less\n   appealing, but you could choose anything from among\n   \n\\{\\text{OPV},\\text{RTV}\\}\\times\\{\\text{auto},\\text{manual}\\}\n.\n\n\n\n\nLDE and UI\n\n\n\n\nWe have a paradigm in which the UI is exactly that (user interface) and\n   the LDE (Lurch Deductive Engine) is the brain that operates in one or\n   more background threads, processing what the user has given the app\n   through the UI.\n\n\nWe aim to implement every feature in the LDE if possible, but implement\n   in the UI only those features that can't be implemented in the LDE.\n   Here, \"if possible\" means that it would not break the model-view\n   paradigm to implement it in the LDE (i.e., the LDE wouldn't need to\n   speak HTML).  Reasons for this:\n\n\nThe LDE will be implemented in pure JS, no DOM, so that it can be\n  used in a WebWorker and in the unit testing suite.\n\n\nTherefore the bigger the LDE is, the more of our code has been\n  subject to rigorous unit tests.\n\n\nAnd the bigger the LDE is, the more of our code is run out of the UX\n  thread, and thus the more responsive our app is.\n\n\n\n\n\n\nThe decisions recorded here are almost entirely about the design of the\n   LDE, not the UI.\n\n\n\n\nStructures\n\n\n\n\nDefine a \nstructure\n to be the basic unit of meaning in the LDE.\n\n\nThis includes document-level structures such as a section,\n  subsection, proof, subproof, etc., which are analogous to block-level\n  items like DIV or P in HTML, and \n\\begin{X}...\\end{X}\n in LaTeX.\n\n\nBut it also includes inline structures (SPANs in HTML, \n\\foo{...}\n or\n  \n$...$\n in LaTeX).\n\n\nStructures can be nested acyclically.\n\n\n\n\n\n\nExamples of types of structures that we may choose to define later:\n\n\nProofs/Subproofs, with one specific flavor of it being the kind that\n  declares a variable first\n\n\nDefinitions of rules, axioms, language rules\n\n\nFormal systems (or \"mathematical topics\")\n\n\nTheorems and pairing of them with proofs\n\n\nExpressions\n\n\nMaybe variables will be declared by based on placing a variable\n  inside an expression by itself, at the head of a variable declaration\n  subproof, or maybe by creating a new structure type for variable\n  declarations, or maybe something else\n\n\nHomework problems\n\n\nExamples (an environment in which anything you declare ends its scope\n  at the end of the example, no matter what it was)\n\n\n\n\n\n\nThe set of structure types should equal the set of common mathematical\n   structures that mathematics students should be learning anyway, and they\n   should behave the same in Lurch as in mathematics.  This ensures that\n   Lurch doesn't add to the mathematics learning curve in this sense.\n\n\nNot every structure is permitted to contain every other type of\n   structure.  But such rules are enforced through validation, which we\n   will not be defining for some time yet, so this comment is just a\n   preview of what's to come.  For instance, expressions can contain only\n   other expressions.\n\n\nAt some later point, we may care about the meanings of structures, so\n   that they can be used as premises in proofs.  At such a time, we will\n   ensure that a structure's meaning includes the unjustified steps in the\n   structure (which function as premises), the final step in the structure\n   (which functions as its conclusion), any variables declared within it\n   (which are bound in it), and so on, but it is not necessary to define\n   those details yet.  I mention them here merely so that the idea is not\n   lost.\n\n\n\n\nAccessibility\n\n\n\n\nA structure A is accessible to a structure B if some ancestor structure\n   of B (possibly B itself) is a sibling of A, but A is the (strictly)\n   earlier of the two siblings within their parent structure.\n\n\nEquivalently, we can speak of \"scope\" rather than accessibility.  The\n   scope of a structure A is all later siblings of A in the same parent,\n   along with all their descendants.  Thus B is in the scope of A iff A is\n   accessible to B.\n\n\n\n\nAttributes\n\n\n\n\nEvery structure contains a key-value dictionary called \nattributes,\n\n   which are read-only from the point of view of the LDE, and are\n   read-write from the point of view of the UI.  From the LDE's point of\n   view, they come from elsewhere (the UI).\n\n\n\n\nDocument\n\n\n\n\nThe entire document will be represented to the LDE as a single\n   structure, usually with a nonzero number of inner structures.\n\n\nWe call the representation of the entire document as a structure the LDE\n   Document, a phrase chosen to connote \"the LDE's view of the document,\n   not the one the user sees in the UI.\"\n\n\nOne main job of the UI is to convert from what the user sees into the\n   LDE Document.\n\n\nSo to the list of structure types above, add \"Document.\"\n\n\nThe entire LDE Document data structure will live inside the LDE module.\n   In the main Lurch app, this implies that the LDE Document will be stored\n   in the background thread where the LDE runs, not in the UI.  Thus the UI\n   will communicate across threads to create the LDE Document.  Details on\n   this later.\n\n\n\n\nSome brief UI comments\n\n\n\n\nMost of the purpose of the UI will be to convert the HTML document the\n   user sees into the LDE Document the LDE processes, then to show the user\n   in the HTML document and feedback the LDE sends back.\n\n\nIn service to that purpose, the UI contains many (largely independent\n  and usually small) features for encoding the HTML document into the\n  LDE Document.\n\n\nExamples include conventions for processing groups, connections,\n  numbered lists, section headings, finding meaning in text through\n  regular expressions, and the meanings of various LaTeX-like\n  \n\\shortcuts\n.\n\n\nA document author chooses which subset of these features to enable by\n  making choices in the document settings dialog.  Those settings are\n  stored in document metadata, and propagate to dependencies (defined\n  below).\n\n\nThe UI will have very little hard-coded (i.e., non-customizable)\n  procedures for interpreting the HTML document into the LDE document;\n  the settings above are highly choosable by the user.\n\n\nThe only constrained interpretation conventions (i.e., few or no\n  options for changing the interpretation) would be those that have\n  mathematical names, such as \"proof,\" which have a specific meaning\n  that it would be educationally counterproductive to interpret another\n  way.\n\n\nIn addition, we may choose a specific set of document settings to use\n  throughout the standard libraries that ship with Lurch, to show best\n  practices and help users with consistency and predictability.\n\n\n\n\n\n\nOther UI details:\n\n\nBecause we have a UI that allows users to make connections among\n  groups, the structures in the hierarchy may include, among their\n  attributes, a binary, edge-labeled multigraph.  (Note that this does\n  not require that every connection in the HTML document become two\n  Structures in the LDE Document with attributes connecting them.  Nor\n  does it stipulate that some concept--such as labeling--that we might\n  decide to represent as part of this multigraph can't also be\n  represented sometimes in another way as well.)\n\n\nIf we require the LDE to send a signal when validation completes,\n  then we can make a UI setting of whether to show feedback as the\n  feedback arrives, or only after the \"all validation complete\" signal\n  arrives (and thus feedback has stabilized).\n\n\n\n\n\n\n\n\nStructures are OOP Objects\n\n\n\n\nA structure exposes a set of data and methods about its internal state\n   to the rest of the app, in much the same way as Objects in OOP do, with\n   the type of structure (from the list above, e.g., Theorem or Example)\n   functioning as the \"class\" of the Object.\n\n\nSome methods in a structure will be time-intensive to run, and thus\n   should use an asynchronous paradigm, queueing the tasks for running when\n   the LDE thread has time.  The most time-intensive tasks, such as\n   matching and parsing, may be delegated to yet other background threads\n   by the LDE thread.\n\n\n\n\nExporting data from structures\n\n\n\n\nHere is an important example method that all structures should have\n   (though each class may implement it differently):\n\n\nA method that reports which structures (usually child structures of\n  A), if any, are to be made accessible to any structure B in the scope\n  of A (thus changing the normal scoping rules).\n\n\nThe flexibility inherent in the vagueness of this exporting notion is\n  useful.  For instance, a single theorem in the document might be\n  encoded in the LDE document as having many children, some of which\n  are its various interpretations as a rule of inference, and export\n  them all, so that any can be used/cited later.\n\n\nNote that the exports method need not copy child structures directly\n  for exporting.  It may combine/manipulate/compute structures to\n  export based on its children in any way.  Thus \"scope\" is a simple\n  and clean definition, which this function sort of indirectly extends.\n\n\n\n\n\n\nWe will define much of the functionality of the LDE as the various\n   structures in the document calling methods in one another, which is\n   simple and elegant.  But it requires that we carefully track and cache\n   the clean/dirty status of each structure, to retain efficiency.\n\n\n\n\nDependencies as a special case\n\n\n\n\nThe current paradigm (already implemented) in webLurch is that a\n   dependency must specify what data it exports to any document that\n   depends on it.\n\n\nSuch data will be stored in the dependency document's metadata, so that\n   documents depending on it can easily import it.  It will include\n   anything that the dependency imported from its dependencies, and so on\n   to arbitrary depth.\n\n\nBecause we now require every structure to know what it exports to later\n   structures, the question of what a document exports is simply a special\n   case of that.  The document is itself a structure, and thus it can\n   already answer the \"what does this document export?\" question.\n\n\nRecall from above that one of the pieces of data that a document will\n   export is its document settings, as described earlier.\n\n\n\n\nDesign Phases\n\n\n\n\nThe question, \"Which structure should be designed first?\" is tricky\n   because each structure is rather complex, and they're rather\n   interdependent.\n\n\nOne approach would be to design each structure incrementally, adding\n   features in phases.\n\n\nThus we might begin with an LDE implementation that has just a few\n   features for a few structure types, and yet is sufficient for building\n   very simply Lurch libraries.\n\n\nThis lets us build familiarity and knowledge as we do the design, so\n   we're better at it by the time we get to the hard stuff.\n\n\nPhases 2, 3, and so on can add features and structure types, thus\n   enabling more and more sophisticated Lurch libraries, until we have\n   reached the level of power that supports a first proof course.\n\n\n\n\nHow to design support for new concepts\n\n\n\n\nBegin with how the new concept will be represented in the Output Tree\n   (OT).  As you do so, respect these constraints.\n\n\nThe OT is pure data that the user never sees, so we are free to store\n  things there without concern for how they will appear to users.\n\n\nThe OT must support validation, so we are constrained to storing\n  things there in a way that makes it easy to write and maintain\n  validation algorithms.\n\n\nValidation is complicated, and yet it must be 100% airtight and\n  correct; therefore we don't want our data storage decisions to add\n  any unnecessary complexity to validation and/or the OT.\n\n\nAs a consequence, there should be one unique, canonical way to store\n  any given concept in the OT.\n\n\n\n\n\n\nThen ask \nbriefly\n how the concept will show up in the main Lurch UI.\n\n\nAdmit up front that it is something that will expand a lot with\n  time.  That is, whatever we design now will be the tip of the iceberg\n  of ideas that will occur to us over the coming years, and we should\n  accept that up front and plan for that as best we can.\n\n\nStart by listing the few ways that you already know that the new\n  feature will show up in the UI, simultaneously admitting that it is\n  just a sample of the ways that the feature might eventually appear.\n\n\n\n\n\n\nCome to the middle of the pipeline, the Input Tree (IT), whose job is to\n   bridge between the UI and the OT.  Recall that the UI will have many ways\n   to represent the new features, and the OT only one.  There are two steps\n   of translation between there that could possibly handle the conversion:\n   Should the UI-to-InputTree phase handle it, or should interpretation\n   handle it, or some combination?  Decide based on these guidelines:\n\n\nThe UI-to-IT conversion does not know about the array of accessible\n  nodes, nor does it know about any of their semantics.  Only the\n  interpretation phase can depend on the semantics of all nodes\n  accessible to the one being interpreted.  So if that information is\n  relevant, the computation must be pushed to the interpretation\n  phase.  For instance, if some feature needs to know what variables\n  are declared and in scope, it would need to wait for the\n  interpretation phase, which will have access to all accessible nodes,\n  including all declarations.\n\n\nOnly the UI knows about any of its features that are specific to that\n  UI.  For instance in the main UI, there may be features specific to\n  HTML and/or mouse events, or in a LaTeX package there may be features\n  specific to LaTeX.  Obviously such features must be handled in the\n  UI-to-IT conversion, because they depend upon the specific UI in\n  which they were invented.\n\n\nIf the previous guidelines do not apply, prefer doing the work in the\n  interpretation phase rather than the UI-to-IT phase, for these\n  reasons:\n\n\nDoing so makes the whole LDE better, rather than just making one\n     of its UIs better.\n\n\nThe interpretation phase can be converted into a queue and handled\n     efficiently, so adding computation burden to it is better than\n     adding computation burden where such efficiency measures are not\n     available.\n\n\nKeep in mind at all times that the features in the UI that\n  interpretation must support are just an example set that will grow\n  over time, so try to design an interpretation phase that can easily\n  be expanded also, to be ready for such later expansion in the UI.\n\n\n\n\n\n\n\n\nSee other documentation on this site for the contents of each design phase.", 
            "title": "Overview"
        }, 
        {
            "location": "/design-overview/#lde-design-overview", 
            "text": "This page lists the design principles adopted by the Lurch team to date\nregarding the LDE, with reasons and explanations for each.  This document\ncan be used as reference, and to guide development, but it may also be\nchanged as better ideas come along.  To see the specific phases of development planned for the LDE, and what's\ncompleted, use the \"Phases\" menu above.", 
            "title": "LDE Design Overview"
        }, 
        {
            "location": "/design-overview/#elegance-and-simplicity", 
            "text": "These are of utmost importance, because   they make Lurch easier to explain to students or in an Advanced User's\n   Guide (AUG),  they make Lurch easier to test because it has fewer unusual corner cases\n   or special handling of odd circumstances,  they make Lurch easier to implement for the same reason, and  they make it easier for us to be confident that our designs are good,\n   because they're easier to hold in your head and grok all at once.", 
            "title": "Elegance and Simplicity"
        }, 
        {
            "location": "/design-overview/#feedback-and-validation", 
            "text": "The primary purpose of the Lurch application is to give feedback to the\n   user about the work they type into their document.  Because this will often involve validating steps of work in a proof, we\n   may use the terms \"feedback\" and \"validation\" interchangeably, even\n   though technically validation is just a particular type of feedback\n   (though the most common type in our case).  One-Pass Validation (OPV)  is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   does so by reprocessing every bit of meaningful content from scratch, in\n   one (large, possibly time-consuming) pass over the whole document.  Real-Time Validation (RTV)  is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   attempts to re-use as much information from previous validation as\n   possible, only updating those portions of it that need updating in\n   response to the specific change the user just made.  Thus RTV is\n   trickier to design and implement than OPV, but more efficient at\n   run-time.  An important concept for our test suite is that any RTV design can be\n   converted to an OPV design trivially, and then used for comparison\n   testing.  Simply replace all sophisticated RTV-style change event\n   handlers with OPV-style ones, that mark the entire document as needing\n   reprocessing.  Then any potential change that can be made to the user's\n   document can be run through each of these engines in parallel, and the\n   results compared for equivalence.  Note that the choice of OPV vs. RTV is independent of the choice of\n   manual validation vs. automatic validation.  RTV certainly makes\n   automatic validation nicer, and thus makes manual validation less\n   appealing, but you could choose anything from among\n    \\{\\text{OPV},\\text{RTV}\\}\\times\\{\\text{auto},\\text{manual}\\} .", 
            "title": "Feedback and Validation"
        }, 
        {
            "location": "/design-overview/#lde-and-ui", 
            "text": "We have a paradigm in which the UI is exactly that (user interface) and\n   the LDE (Lurch Deductive Engine) is the brain that operates in one or\n   more background threads, processing what the user has given the app\n   through the UI.  We aim to implement every feature in the LDE if possible, but implement\n   in the UI only those features that can't be implemented in the LDE.\n   Here, \"if possible\" means that it would not break the model-view\n   paradigm to implement it in the LDE (i.e., the LDE wouldn't need to\n   speak HTML).  Reasons for this:  The LDE will be implemented in pure JS, no DOM, so that it can be\n  used in a WebWorker and in the unit testing suite.  Therefore the bigger the LDE is, the more of our code has been\n  subject to rigorous unit tests.  And the bigger the LDE is, the more of our code is run out of the UX\n  thread, and thus the more responsive our app is.    The decisions recorded here are almost entirely about the design of the\n   LDE, not the UI.", 
            "title": "LDE and UI"
        }, 
        {
            "location": "/design-overview/#structures", 
            "text": "Define a  structure  to be the basic unit of meaning in the LDE.  This includes document-level structures such as a section,\n  subsection, proof, subproof, etc., which are analogous to block-level\n  items like DIV or P in HTML, and  \\begin{X}...\\end{X}  in LaTeX.  But it also includes inline structures (SPANs in HTML,  \\foo{...}  or\n   $...$  in LaTeX).  Structures can be nested acyclically.    Examples of types of structures that we may choose to define later:  Proofs/Subproofs, with one specific flavor of it being the kind that\n  declares a variable first  Definitions of rules, axioms, language rules  Formal systems (or \"mathematical topics\")  Theorems and pairing of them with proofs  Expressions  Maybe variables will be declared by based on placing a variable\n  inside an expression by itself, at the head of a variable declaration\n  subproof, or maybe by creating a new structure type for variable\n  declarations, or maybe something else  Homework problems  Examples (an environment in which anything you declare ends its scope\n  at the end of the example, no matter what it was)    The set of structure types should equal the set of common mathematical\n   structures that mathematics students should be learning anyway, and they\n   should behave the same in Lurch as in mathematics.  This ensures that\n   Lurch doesn't add to the mathematics learning curve in this sense.  Not every structure is permitted to contain every other type of\n   structure.  But such rules are enforced through validation, which we\n   will not be defining for some time yet, so this comment is just a\n   preview of what's to come.  For instance, expressions can contain only\n   other expressions.  At some later point, we may care about the meanings of structures, so\n   that they can be used as premises in proofs.  At such a time, we will\n   ensure that a structure's meaning includes the unjustified steps in the\n   structure (which function as premises), the final step in the structure\n   (which functions as its conclusion), any variables declared within it\n   (which are bound in it), and so on, but it is not necessary to define\n   those details yet.  I mention them here merely so that the idea is not\n   lost.", 
            "title": "Structures"
        }, 
        {
            "location": "/design-overview/#accessibility", 
            "text": "A structure A is accessible to a structure B if some ancestor structure\n   of B (possibly B itself) is a sibling of A, but A is the (strictly)\n   earlier of the two siblings within their parent structure.  Equivalently, we can speak of \"scope\" rather than accessibility.  The\n   scope of a structure A is all later siblings of A in the same parent,\n   along with all their descendants.  Thus B is in the scope of A iff A is\n   accessible to B.", 
            "title": "Accessibility"
        }, 
        {
            "location": "/design-overview/#attributes", 
            "text": "Every structure contains a key-value dictionary called  attributes, \n   which are read-only from the point of view of the LDE, and are\n   read-write from the point of view of the UI.  From the LDE's point of\n   view, they come from elsewhere (the UI).", 
            "title": "Attributes"
        }, 
        {
            "location": "/design-overview/#document", 
            "text": "The entire document will be represented to the LDE as a single\n   structure, usually with a nonzero number of inner structures.  We call the representation of the entire document as a structure the LDE\n   Document, a phrase chosen to connote \"the LDE's view of the document,\n   not the one the user sees in the UI.\"  One main job of the UI is to convert from what the user sees into the\n   LDE Document.  So to the list of structure types above, add \"Document.\"  The entire LDE Document data structure will live inside the LDE module.\n   In the main Lurch app, this implies that the LDE Document will be stored\n   in the background thread where the LDE runs, not in the UI.  Thus the UI\n   will communicate across threads to create the LDE Document.  Details on\n   this later.", 
            "title": "Document"
        }, 
        {
            "location": "/design-overview/#some-brief-ui-comments", 
            "text": "Most of the purpose of the UI will be to convert the HTML document the\n   user sees into the LDE Document the LDE processes, then to show the user\n   in the HTML document and feedback the LDE sends back.  In service to that purpose, the UI contains many (largely independent\n  and usually small) features for encoding the HTML document into the\n  LDE Document.  Examples include conventions for processing groups, connections,\n  numbered lists, section headings, finding meaning in text through\n  regular expressions, and the meanings of various LaTeX-like\n   \\shortcuts .  A document author chooses which subset of these features to enable by\n  making choices in the document settings dialog.  Those settings are\n  stored in document metadata, and propagate to dependencies (defined\n  below).  The UI will have very little hard-coded (i.e., non-customizable)\n  procedures for interpreting the HTML document into the LDE document;\n  the settings above are highly choosable by the user.  The only constrained interpretation conventions (i.e., few or no\n  options for changing the interpretation) would be those that have\n  mathematical names, such as \"proof,\" which have a specific meaning\n  that it would be educationally counterproductive to interpret another\n  way.  In addition, we may choose a specific set of document settings to use\n  throughout the standard libraries that ship with Lurch, to show best\n  practices and help users with consistency and predictability.    Other UI details:  Because we have a UI that allows users to make connections among\n  groups, the structures in the hierarchy may include, among their\n  attributes, a binary, edge-labeled multigraph.  (Note that this does\n  not require that every connection in the HTML document become two\n  Structures in the LDE Document with attributes connecting them.  Nor\n  does it stipulate that some concept--such as labeling--that we might\n  decide to represent as part of this multigraph can't also be\n  represented sometimes in another way as well.)  If we require the LDE to send a signal when validation completes,\n  then we can make a UI setting of whether to show feedback as the\n  feedback arrives, or only after the \"all validation complete\" signal\n  arrives (and thus feedback has stabilized).", 
            "title": "Some brief UI comments"
        }, 
        {
            "location": "/design-overview/#structures-are-oop-objects", 
            "text": "A structure exposes a set of data and methods about its internal state\n   to the rest of the app, in much the same way as Objects in OOP do, with\n   the type of structure (from the list above, e.g., Theorem or Example)\n   functioning as the \"class\" of the Object.  Some methods in a structure will be time-intensive to run, and thus\n   should use an asynchronous paradigm, queueing the tasks for running when\n   the LDE thread has time.  The most time-intensive tasks, such as\n   matching and parsing, may be delegated to yet other background threads\n   by the LDE thread.", 
            "title": "Structures are OOP Objects"
        }, 
        {
            "location": "/design-overview/#exporting-data-from-structures", 
            "text": "Here is an important example method that all structures should have\n   (though each class may implement it differently):  A method that reports which structures (usually child structures of\n  A), if any, are to be made accessible to any structure B in the scope\n  of A (thus changing the normal scoping rules).  The flexibility inherent in the vagueness of this exporting notion is\n  useful.  For instance, a single theorem in the document might be\n  encoded in the LDE document as having many children, some of which\n  are its various interpretations as a rule of inference, and export\n  them all, so that any can be used/cited later.  Note that the exports method need not copy child structures directly\n  for exporting.  It may combine/manipulate/compute structures to\n  export based on its children in any way.  Thus \"scope\" is a simple\n  and clean definition, which this function sort of indirectly extends.    We will define much of the functionality of the LDE as the various\n   structures in the document calling methods in one another, which is\n   simple and elegant.  But it requires that we carefully track and cache\n   the clean/dirty status of each structure, to retain efficiency.", 
            "title": "Exporting data from structures"
        }, 
        {
            "location": "/design-overview/#dependencies-as-a-special-case", 
            "text": "The current paradigm (already implemented) in webLurch is that a\n   dependency must specify what data it exports to any document that\n   depends on it.  Such data will be stored in the dependency document's metadata, so that\n   documents depending on it can easily import it.  It will include\n   anything that the dependency imported from its dependencies, and so on\n   to arbitrary depth.  Because we now require every structure to know what it exports to later\n   structures, the question of what a document exports is simply a special\n   case of that.  The document is itself a structure, and thus it can\n   already answer the \"what does this document export?\" question.  Recall from above that one of the pieces of data that a document will\n   export is its document settings, as described earlier.", 
            "title": "Dependencies as a special case"
        }, 
        {
            "location": "/design-overview/#design-phases", 
            "text": "The question, \"Which structure should be designed first?\" is tricky\n   because each structure is rather complex, and they're rather\n   interdependent.  One approach would be to design each structure incrementally, adding\n   features in phases.  Thus we might begin with an LDE implementation that has just a few\n   features for a few structure types, and yet is sufficient for building\n   very simply Lurch libraries.  This lets us build familiarity and knowledge as we do the design, so\n   we're better at it by the time we get to the hard stuff.  Phases 2, 3, and so on can add features and structure types, thus\n   enabling more and more sophisticated Lurch libraries, until we have\n   reached the level of power that supports a first proof course.", 
            "title": "Design Phases"
        }, 
        {
            "location": "/design-overview/#how-to-design-support-for-new-concepts", 
            "text": "Begin with how the new concept will be represented in the Output Tree\n   (OT).  As you do so, respect these constraints.  The OT is pure data that the user never sees, so we are free to store\n  things there without concern for how they will appear to users.  The OT must support validation, so we are constrained to storing\n  things there in a way that makes it easy to write and maintain\n  validation algorithms.  Validation is complicated, and yet it must be 100% airtight and\n  correct; therefore we don't want our data storage decisions to add\n  any unnecessary complexity to validation and/or the OT.  As a consequence, there should be one unique, canonical way to store\n  any given concept in the OT.    Then ask  briefly  how the concept will show up in the main Lurch UI.  Admit up front that it is something that will expand a lot with\n  time.  That is, whatever we design now will be the tip of the iceberg\n  of ideas that will occur to us over the coming years, and we should\n  accept that up front and plan for that as best we can.  Start by listing the few ways that you already know that the new\n  feature will show up in the UI, simultaneously admitting that it is\n  just a sample of the ways that the feature might eventually appear.    Come to the middle of the pipeline, the Input Tree (IT), whose job is to\n   bridge between the UI and the OT.  Recall that the UI will have many ways\n   to represent the new features, and the OT only one.  There are two steps\n   of translation between there that could possibly handle the conversion:\n   Should the UI-to-InputTree phase handle it, or should interpretation\n   handle it, or some combination?  Decide based on these guidelines:  The UI-to-IT conversion does not know about the array of accessible\n  nodes, nor does it know about any of their semantics.  Only the\n  interpretation phase can depend on the semantics of all nodes\n  accessible to the one being interpreted.  So if that information is\n  relevant, the computation must be pushed to the interpretation\n  phase.  For instance, if some feature needs to know what variables\n  are declared and in scope, it would need to wait for the\n  interpretation phase, which will have access to all accessible nodes,\n  including all declarations.  Only the UI knows about any of its features that are specific to that\n  UI.  For instance in the main UI, there may be features specific to\n  HTML and/or mouse events, or in a LaTeX package there may be features\n  specific to LaTeX.  Obviously such features must be handled in the\n  UI-to-IT conversion, because they depend upon the specific UI in\n  which they were invented.  If the previous guidelines do not apply, prefer doing the work in the\n  interpretation phase rather than the UI-to-IT phase, for these\n  reasons:  Doing so makes the whole LDE better, rather than just making one\n     of its UIs better.  The interpretation phase can be converted into a queue and handled\n     efficiently, so adding computation burden to it is better than\n     adding computation burden where such efficiency measures are not\n     available.  Keep in mind at all times that the features in the UI that\n  interpretation must support are just an example set that will grow\n  over time, so try to design an interpretation phase that can easily\n  be expanded also, to be ready for such later expansion in the UI.     See other documentation on this site for the contents of each design phase.", 
            "title": "How to design support for new concepts"
        }, 
        {
            "location": "/phase1-structures/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 1: Structures\n\n\nContent\n\n\nIn this phase, we just design the generic Structure class on which\neverything else will depend, and the infrastructure of the LDE itself.\n\n\nThe \nStructure\n module defines a single \nStructure\n class, and has been\nimplemented. \nIts API Documentation appears here\n.\n\n\nThe \nLDE\n module defines several global functions, and has been implemented.\n\nIts API Documentation appears here\n.\n\n\nGoal\n\n\nAt the end of this phase, we could write unit tests of the whole Structure\nclass and its LDE context, thus guaranteeing that all later phases rest on a\ngood foundation.\n\n\nStatus\n\n\nThis phase has been implemented and documented in the API Documentation,\nand then was thoroughly overhauled to match a new and updated design.  That\noverhaul is complete, and this phase is ready to be used in later phases.", 
            "title": "Phase 1, Structures"
        }, 
        {
            "location": "/phase1-structures/#lde-design-phase-1-structures", 
            "text": "", 
            "title": "LDE Design Phase 1: Structures"
        }, 
        {
            "location": "/phase1-structures/#content", 
            "text": "In this phase, we just design the generic Structure class on which\neverything else will depend, and the infrastructure of the LDE itself.  The  Structure  module defines a single  Structure  class, and has been\nimplemented.  Its API Documentation appears here .  The  LDE  module defines several global functions, and has been implemented. Its API Documentation appears here .", 
            "title": "Content"
        }, 
        {
            "location": "/phase1-structures/#goal", 
            "text": "At the end of this phase, we could write unit tests of the whole Structure\nclass and its LDE context, thus guaranteeing that all later phases rest on a\ngood foundation.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase1-structures/#status", 
            "text": "This phase has been implemented and documented in the API Documentation,\nand then was thoroughly overhauled to match a new and updated design.  That\noverhaul is complete, and this phase is ready to be used in later phases.", 
            "title": "Status"
        }, 
        {
            "location": "/phase2-input-tree/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 2: The Input Tree\n\n\nContent\n\n\nIn this phase, we add the Input Tree, a hierarchy comprised of a new kind of\n\nStructure\n subclass, called \nInputStructure\n.\n\n\nGoal\n\n\nThe \nInputStructure\n class will exist and be used by the LDE module.\n\n\nStatus\n\n\nThis phase has been implemented and documented in the API Documentation.\nIt added some features to the \nStructure\n module\n(\nAPI Documentation here\n) and some features to the \nLDE\n\nmodule (\nAPI Documentation here\n) and created the\n\nInputStructure\n module (\nAPI documentation here\n).", 
            "title": "Phase 2, The Input Tree"
        }, 
        {
            "location": "/phase2-input-tree/#lde-design-phase-2-the-input-tree", 
            "text": "", 
            "title": "LDE Design Phase 2: The Input Tree"
        }, 
        {
            "location": "/phase2-input-tree/#content", 
            "text": "In this phase, we add the Input Tree, a hierarchy comprised of a new kind of Structure  subclass, called  InputStructure .", 
            "title": "Content"
        }, 
        {
            "location": "/phase2-input-tree/#goal", 
            "text": "The  InputStructure  class will exist and be used by the LDE module.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase2-input-tree/#status", 
            "text": "This phase has been implemented and documented in the API Documentation.\nIt added some features to the  Structure  module\n( API Documentation here ) and some features to the  LDE \nmodule ( API Documentation here ) and created the InputStructure  module ( API documentation here ).", 
            "title": "Status"
        }, 
        {
            "location": "/phase3-output-tree/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 3: The Output Tree\n\n\nContent\n\n\nIn this phase, we add the Output Tree, a hierarchy comprised of a new kind\nof \nStructure\n subclass, called \nOutputStructure\n.\n\n\nGoal\n\n\nThe \nOutputStructure\n class will exist and be imported by the LDE module\nbut not yet used for anything.\n\n\nStatus\n\n\nThis phase has been implemented and documented in the API Documentation. It\nadded some features to the \nLDE\n module (\nAPI Documentation\nhere\n) and created the \nOutputStructure\n module (\nAPI\ndocumentation here\n).", 
            "title": "Phase 3, The Output Tree"
        }, 
        {
            "location": "/phase3-output-tree/#lde-design-phase-3-the-output-tree", 
            "text": "", 
            "title": "LDE Design Phase 3: The Output Tree"
        }, 
        {
            "location": "/phase3-output-tree/#content", 
            "text": "In this phase, we add the Output Tree, a hierarchy comprised of a new kind\nof  Structure  subclass, called  OutputStructure .", 
            "title": "Content"
        }, 
        {
            "location": "/phase3-output-tree/#goal", 
            "text": "The  OutputStructure  class will exist and be imported by the LDE module\nbut not yet used for anything.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase3-output-tree/#status", 
            "text": "This phase has been implemented and documented in the API Documentation. It\nadded some features to the  LDE  module ( API Documentation\nhere ) and created the  OutputStructure  module ( API\ndocumentation here ).", 
            "title": "Status"
        }, 
        {
            "location": "/phase4-modification/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 4: Expressions and Modifiers\n\n\nContent\n\n\nIn this phase, we specialize the \nInputStructure\n class into two subclasses,\n\nInputExpression\n and \nInputModifier\n.\n\n\nGoal\n\n\nThe \nInputExpression\n and \nInputModifier\n classes will exist with all their\nmethods and the Modification phase will be implemented.\n\n\nStatus\n\n\nAll essential work on this phase is complete.  What remains is optional\nefficiency improvements, documented in the following section.  These were\nnot implemented at first because it is not clear that they are necessary,\nand it would be a waste of development time for no clear benefit.  But if\nlater performance bottlenecks arise that could be solved by any of the ideas\nexpressed below, the plans are written here for execution.\n\n\nOptional efficiency improvements for later\n\n\nFirst, efficiency improvements to the \nupdateData()\n and \nupdateDataIn()\n\nroutines:\n\n\n\n\n Write a function that creates a backup copy of all attributes in an\n   \nInputExpression\n that were set by modifiers, by looping through all\n   attribute keys, and when it encounters any of the form \n\"_modified $k$\"\n,\n   it lifts out the value associated with $k$ and stores a copy of it in\n   the backup being generated.  That backup object is returned.\n\n\n Extend the unit tests for \nInputExpression\ns to test this new\n   routine and document such tests.\n\n\n Write a function for comparing the state of an \nInputExpression\n to\n   such a backup, either reporting that its set of attributes changed by\n   modifiers matches the backup (nothing has changed) or it does not\n   (something was added, removed, or changed by an IM).\n\n\n Extend the unit tests for \nInputExpression\ns to test this new\n   routine and document such tests.\n\n\n Call the backup routine in the target at the start of the\n   \nupdateData()\n function in \nInputExpression\n.  At the end, mark the\n   expression dirty if and only if its new state is different from its\n   original state in some attribute set by a modifier.\n\n\n Extend the unit tests for \nInputExpression\ns to test this new\n   routine and document such tests.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nSecond, efficiency improvements to the modification phase overall:\n\n\n\n\n Enhance \nrunModification()\n to initialize a list of \nInputModifier\n\n   instances that are to be processed, then start a chain of \nsetTimeout()\n\n   calls that pop things off the list and process them, calling the callback\n   when the list is empty.  (Use extremely brief timeout delays.)\n\n\n Ensure that the unit tests still handle this asynchronous version.\n\n\n Enhance \nrunModification()\n so that, if any LDE API call is made\n   while the modification phase is ongoing, it resets the list of instances\n   to process to be the entire set of \nInputModifier\ns in the Input Tree,\n   thus restarting the whole modification process.\n\n\n Extend the unit tests to test this feature.  That is, make some\n   \nupdateConnections()\n routines that take a long time to compute (say, 0.5\n   seconds) and that also log their calls to a global array.  Make a set of\n   API calls in succession about 0.3 seconds apart, and ensure that the\n   global call log is as expected.\n\n\n Extend each of the four LDE API functions so that it calls\n   \nmarkDirty()\n on the appropriate \nInputStructure\n instance, then\n   \nrunModification()\n.\n\n\n Update the documentation to describe the changes just made.\n\n\n Extend the unit tests for the LDE module to verify that this works.\n\n\n Once the unit tests pass, build everything and commit.", 
            "title": "Phase 4, Modification"
        }, 
        {
            "location": "/phase4-modification/#lde-design-phase-4-expressions-and-modifiers", 
            "text": "", 
            "title": "LDE Design Phase 4: Expressions and Modifiers"
        }, 
        {
            "location": "/phase4-modification/#content", 
            "text": "In this phase, we specialize the  InputStructure  class into two subclasses, InputExpression  and  InputModifier .", 
            "title": "Content"
        }, 
        {
            "location": "/phase4-modification/#goal", 
            "text": "The  InputExpression  and  InputModifier  classes will exist with all their\nmethods and the Modification phase will be implemented.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase4-modification/#status", 
            "text": "All essential work on this phase is complete.  What remains is optional\nefficiency improvements, documented in the following section.  These were\nnot implemented at first because it is not clear that they are necessary,\nand it would be a waste of development time for no clear benefit.  But if\nlater performance bottlenecks arise that could be solved by any of the ideas\nexpressed below, the plans are written here for execution.", 
            "title": "Status"
        }, 
        {
            "location": "/phase4-modification/#optional-efficiency-improvements-for-later", 
            "text": "First, efficiency improvements to the  updateData()  and  updateDataIn() \nroutines:    Write a function that creates a backup copy of all attributes in an\n    InputExpression  that were set by modifiers, by looping through all\n   attribute keys, and when it encounters any of the form  \"_modified $k$\" ,\n   it lifts out the value associated with $k$ and stores a copy of it in\n   the backup being generated.  That backup object is returned.   Extend the unit tests for  InputExpression s to test this new\n   routine and document such tests.   Write a function for comparing the state of an  InputExpression  to\n   such a backup, either reporting that its set of attributes changed by\n   modifiers matches the backup (nothing has changed) or it does not\n   (something was added, removed, or changed by an IM).   Extend the unit tests for  InputExpression s to test this new\n   routine and document such tests.   Call the backup routine in the target at the start of the\n    updateData()  function in  InputExpression .  At the end, mark the\n   expression dirty if and only if its new state is different from its\n   original state in some attribute set by a modifier.   Extend the unit tests for  InputExpression s to test this new\n   routine and document such tests.   Once the unit tests pass, build everything and commit.   Second, efficiency improvements to the modification phase overall:    Enhance  runModification()  to initialize a list of  InputModifier \n   instances that are to be processed, then start a chain of  setTimeout() \n   calls that pop things off the list and process them, calling the callback\n   when the list is empty.  (Use extremely brief timeout delays.)   Ensure that the unit tests still handle this asynchronous version.   Enhance  runModification()  so that, if any LDE API call is made\n   while the modification phase is ongoing, it resets the list of instances\n   to process to be the entire set of  InputModifier s in the Input Tree,\n   thus restarting the whole modification process.   Extend the unit tests to test this feature.  That is, make some\n    updateConnections()  routines that take a long time to compute (say, 0.5\n   seconds) and that also log their calls to a global array.  Make a set of\n   API calls in succession about 0.3 seconds apart, and ensure that the\n   global call log is as expected.   Extend each of the four LDE API functions so that it calls\n    markDirty()  on the appropriate  InputStructure  instance, then\n    runModification() .   Update the documentation to describe the changes just made.   Extend the unit tests for the LDE module to verify that this works.   Once the unit tests pass, build everything and commit.", 
            "title": "Optional efficiency improvements for later"
        }, 
        {
            "location": "/phase5-interpretation/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 5: Interpretation\n\n\nContent\n\n\nIn this phase, we implement the Interpretation Phase of the LDE.\n\n\nGoal\n\n\nThe LDE will be able to interpret the Input Tree, creating an Output Tree\nfrom it.\n\n\nStatus\n\n\nAll essential work on this phase is complete.  What remains are a more\nrobust set of tests for interpretation and some optional efficiency\nimprovements, both of which are documented below.\n\n\nMore robust unit tests for interpretation\n\n\n\n\n Add to the \nInputExpression\n test file more unit tests that create\n   and register dummy subclasses of \nInputStructure\n that have additional\n   custom \ninterpret\n routines (besides those types already tested).  Verify\n   that those routines get called and do exactly what's expected in the\n   creation of their portion of the Output Tree.  Ensure you test a variety\n   of different kinds of \ninterpret\n routines, including ones that copy or\n   create attributes, delete children, don't include the default wrapper,\n   etc.\n\n\n Add documentation in that test file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nEfficiency improvements\n\n\nThese optional efficiency improvements were not implemented at first because\nit is not clear that they are necessary, and it would be a waste of\ndevelopment time for no clear benefit.  But if later performance bottlenecks\narise that could be solved by any of the ideas expressed below, the plans\nare written here for execution.\n\n\nCaching interpretation results\n\n\n\n\n Extend the \nInputStructure\n class with a field called\n   \nlastInterpretation\n, which is initialized to undefined in the\n   constructor.  This field does not need to be part of any serialization\n   or deserialization of instances.\n\n\n Create an \ngetLastInterpretation()\n method that returns the value of\n   that member variable.\n\n\n Create a \nsaveInterpretation(I)\n method in the \nInputStructure\n class\n   that stores the array \nI\n (of zero or more Output Structures) in the\n   \nlastInterpretation\n field.  If no parameter is passed, clear the cached\n   value.\n\n\n At the end of the \nrecursiveInterpret()\n routine, just before\n   returning the result, call \nsaveInterpretation()\n on it.\n\n\n At the start of the \nrecursiveInterpret()\n routine, if the structure\n   is not marked dirty and there is a \nlastInterpretation\n defined, just\n   return that immediately.\n\n\n Update all documentation in that file to reflect the changes just\n   made.\n\n\n Add to the unit tests for \nInputStructure\ns a few simple tests for\n   these new routines.\n\n\n Add documentation in that file describing the changes just made.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nMiscellaneous\n\n\n\n\n Create a \nsetChildrenList(newChildren)\n function in the \nStructure\n\n   base class.  It should change as little as possible (maybe nothing) to\n   make the structure's children array equal to the given one.  This lets\n   \ninterpret()\n routines reuse old Output Structures from cache, just\n   adjusting their children lists, rather than constructing new ones, even\n   if their children list changed.  Many \ninterpret()\n routines may\n   therefore be simply \nlastInterpretation.setChildrenList(childResults)\n\n   followed by returning the last interpretation again.  This will often\n   just verify that the children list is already correct, change nothing,\n   and move on.\n\n\n Add to the unit tests for this new routine.\n\n\n Add documentation in the \nStructure\n module describing the new\n   routine.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nRecursive interpretation\n\n\n\n\n Create a subclass of \nOutputStructure\n, in the \nOutputStructure\n\n   module, called \nInterpretationDirective\n.\n\n\n Add documentation explaining what it is and will do (though that\n   documentation can grow with time).\n\n\n Ensure that the \nInterpretationDirective\n subclass registers itself\n   with the serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'InterpretationDirective', InterpretationDirective\n in\n   the \nInterpretationDirective\n class code.)\n\n\n Create a new unit test file for \nInterpretationDirective\ns that is\n   extremely basic, just testing to be sure that the symbol\n   \nInterpretationDirective\n is defined at the global scope and creates\n   things that are instances of the \nInterpretationDirective\n class.\n\n\n Add documentation for that unit test file, following the pattern\n   established in the documentation of other unit test files in this\n   repository.\n\n\n Create a subclass \nFilterableArray\n of \nArray\n that, at construction\n   time, is given a predicate.  It stores, internally, a filtered version of\n   itself, which is initialized to the empty array.  It guarantees to keep\n   this filtered version correct iff it is manipulated only through calls to\n   its \npush()\n and \npop()\n routines, which we override below.\n\n\n Override \nFilterableArray::push()\n to do an ordinary \nArray::push()\n\n   and then also a push on the internal filtered version iff the predicate\n   holds of the new item.\n\n\n Override \nFilterableArray::pop()\n to do an ordinary \nArray::pop()\n\n   and then also a pop on the internal filtered version iff the object\n   popped was also on the end of that array.\n\n\n Add a new method \nFilterableArray::filtered()\n that returns the\n   filtered version.\n\n\n Update the default version of \nrecursiveInterpret()\n to create the\n   \naccessibles\n array as an instance of \nFilterableArray\n, with the\n   predicate being whether the Structure is an instance of the\n   \nInterpretationDirective\n class.  Ensure that adding items to the array\n   and removing them from it are done with calls to \npush()\n and \npop()\n.\n\n\n Document this so that later implementations of \ninterpret()\n can be\n   faster by leveraging \naccessibles.filtered()\n rather than the entire\n   \naccessibles\n array.\n\n\n Ensure all the unit tests still pass.\n\n\n Add new unit tests for the \nFilterableArray\n class independently of\n   the rest of the LDE.\n\n\n Add some new unit tests that verify that \naccessibles.filtered()\n is\n   exactly what it should be (i.e., the Interpretation Directive predicate\n   is being used correctly).\n\n\n Once the unit tests pass, build everything and commit.", 
            "title": "Phase 5, Interpretation"
        }, 
        {
            "location": "/phase5-interpretation/#lde-design-phase-5-interpretation", 
            "text": "", 
            "title": "LDE Design Phase 5: Interpretation"
        }, 
        {
            "location": "/phase5-interpretation/#content", 
            "text": "In this phase, we implement the Interpretation Phase of the LDE.", 
            "title": "Content"
        }, 
        {
            "location": "/phase5-interpretation/#goal", 
            "text": "The LDE will be able to interpret the Input Tree, creating an Output Tree\nfrom it.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase5-interpretation/#status", 
            "text": "All essential work on this phase is complete.  What remains are a more\nrobust set of tests for interpretation and some optional efficiency\nimprovements, both of which are documented below.", 
            "title": "Status"
        }, 
        {
            "location": "/phase5-interpretation/#more-robust-unit-tests-for-interpretation", 
            "text": "Add to the  InputExpression  test file more unit tests that create\n   and register dummy subclasses of  InputStructure  that have additional\n   custom  interpret  routines (besides those types already tested).  Verify\n   that those routines get called and do exactly what's expected in the\n   creation of their portion of the Output Tree.  Ensure you test a variety\n   of different kinds of  interpret  routines, including ones that copy or\n   create attributes, delete children, don't include the default wrapper,\n   etc.   Add documentation in that test file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "More robust unit tests for interpretation"
        }, 
        {
            "location": "/phase5-interpretation/#efficiency-improvements", 
            "text": "These optional efficiency improvements were not implemented at first because\nit is not clear that they are necessary, and it would be a waste of\ndevelopment time for no clear benefit.  But if later performance bottlenecks\narise that could be solved by any of the ideas expressed below, the plans\nare written here for execution.", 
            "title": "Efficiency improvements"
        }, 
        {
            "location": "/phase5-interpretation/#caching-interpretation-results", 
            "text": "Extend the  InputStructure  class with a field called\n    lastInterpretation , which is initialized to undefined in the\n   constructor.  This field does not need to be part of any serialization\n   or deserialization of instances.   Create an  getLastInterpretation()  method that returns the value of\n   that member variable.   Create a  saveInterpretation(I)  method in the  InputStructure  class\n   that stores the array  I  (of zero or more Output Structures) in the\n    lastInterpretation  field.  If no parameter is passed, clear the cached\n   value.   At the end of the  recursiveInterpret()  routine, just before\n   returning the result, call  saveInterpretation()  on it.   At the start of the  recursiveInterpret()  routine, if the structure\n   is not marked dirty and there is a  lastInterpretation  defined, just\n   return that immediately.   Update all documentation in that file to reflect the changes just\n   made.   Add to the unit tests for  InputStructure s a few simple tests for\n   these new routines.   Add documentation in that file describing the changes just made.   Once the unit tests pass, build everything and commit.", 
            "title": "Caching interpretation results"
        }, 
        {
            "location": "/phase5-interpretation/#miscellaneous", 
            "text": "Create a  setChildrenList(newChildren)  function in the  Structure \n   base class.  It should change as little as possible (maybe nothing) to\n   make the structure's children array equal to the given one.  This lets\n    interpret()  routines reuse old Output Structures from cache, just\n   adjusting their children lists, rather than constructing new ones, even\n   if their children list changed.  Many  interpret()  routines may\n   therefore be simply  lastInterpretation.setChildrenList(childResults) \n   followed by returning the last interpretation again.  This will often\n   just verify that the children list is already correct, change nothing,\n   and move on.   Add to the unit tests for this new routine.   Add documentation in the  Structure  module describing the new\n   routine.   Once the unit tests pass, build everything and commit.", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/phase5-interpretation/#recursive-interpretation", 
            "text": "Create a subclass of  OutputStructure , in the  OutputStructure \n   module, called  InterpretationDirective .   Add documentation explaining what it is and will do (though that\n   documentation can grow with time).   Ensure that the  InterpretationDirective  subclass registers itself\n   with the serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'InterpretationDirective', InterpretationDirective  in\n   the  InterpretationDirective  class code.)   Create a new unit test file for  InterpretationDirective s that is\n   extremely basic, just testing to be sure that the symbol\n    InterpretationDirective  is defined at the global scope and creates\n   things that are instances of the  InterpretationDirective  class.   Add documentation for that unit test file, following the pattern\n   established in the documentation of other unit test files in this\n   repository.   Create a subclass  FilterableArray  of  Array  that, at construction\n   time, is given a predicate.  It stores, internally, a filtered version of\n   itself, which is initialized to the empty array.  It guarantees to keep\n   this filtered version correct iff it is manipulated only through calls to\n   its  push()  and  pop()  routines, which we override below.   Override  FilterableArray::push()  to do an ordinary  Array::push() \n   and then also a push on the internal filtered version iff the predicate\n   holds of the new item.   Override  FilterableArray::pop()  to do an ordinary  Array::pop() \n   and then also a pop on the internal filtered version iff the object\n   popped was also on the end of that array.   Add a new method  FilterableArray::filtered()  that returns the\n   filtered version.   Update the default version of  recursiveInterpret()  to create the\n    accessibles  array as an instance of  FilterableArray , with the\n   predicate being whether the Structure is an instance of the\n    InterpretationDirective  class.  Ensure that adding items to the array\n   and removing them from it are done with calls to  push()  and  pop() .   Document this so that later implementations of  interpret()  can be\n   faster by leveraging  accessibles.filtered()  rather than the entire\n    accessibles  array.   Ensure all the unit tests still pass.   Add new unit tests for the  FilterableArray  class independently of\n   the rest of the LDE.   Add some new unit tests that verify that  accessibles.filtered()  is\n   exactly what it should be (i.e., the Interpretation Directive predicate\n   is being used correctly).   Once the unit tests pass, build everything and commit.", 
            "title": "Recursive interpretation"
        }, 
        {
            "location": "/phase6-labels/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 6: Labels\n\n\nContent\n\n\nIn this phase, we make it possible for \nOutputStructure\n instances to be\nlabeled.\n\n\nGoal\n\n\nThe LDE will be able to look up \nOutputStructure\n instances by the labels\nattached to them, and we will have a convention for citing labels\nestablished and implemented.\n\n\nStatus\n\n\nThis has not been implemented.  See the tasks below.\n\n\nLabeling \nOutputStructure\n instances\n\n\n\n\n Create in the \nOutputStructure\n base class a function called\n   \nhasLabel(str)\n that returns false always.\n\n\n Create a function \naddLabel(targets)\n in the \nInputStructure\n class.\n   It should accept an array of \nOutputStructure\n instances, and should loop\n   through all of them, obeying the following conventions.\n\n\nIf the \nInputStructure\n has an attribute with key \"label regex\", then\n  place into the \nOutputStructure\ns a \nhasLabel(str)\n function that\n  tests the given string against the given regular expression.\n\n\nIf the \nInputStructure\n has an attribute with key \"label regex flags\",\n  then apply those to the regular expression object you create in the\n  previous item.\n\n\nIf the \nInputStructure\n has an attribute with key \"label targets\",\n  then call its value $V$ and apply the above techniques to only those\n  targets whose indices are on the $V$, when $V$ is treated as an array.\n\n\n\n\n\n\n Add documentation in that file describing the changes just made.\n\n\n Extend the unit tests for the \nInputStructure\n module to include some\n   calls to this routine, passing it various example parameters and\n   verifying that it does its job as specified.\n\n\n Extend \nrecursiveInterpret()\n so that it calls this function in an\n   \nInputStructure\n as soon as it has completed \ninterpret()\n on that\n   structure, passing in the set of interpretation results.\n\n\n Extend the unit tests to ensure that this is now a part of the\n   Interpretation Phase.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nLookup\n\n\n\n\n Create a class method \nlookup(string,accessibles)\n in the\n   \nOutputStructure\n class, which loops backwards through the list of\n   \naccessibles\n, trying to find one that \nhasLabel()\n the given \nstring\n.\n   It returns the latest one found, or null if there is none.\n\n\n Create an instance method \nlookup(string)\n in the \nOutputStructure\n\n   class, which loops backwards through the list of structures accessible to\n   the one on which it was called, trying to find one that \nhasLabel()\n the\n   given \nstring\n.  It returns the first one encountered, or null if there\n   is none.\n\n\n\n\nCitations\n\n\n\n\n Create a stub function \ncopyCitations(targets)\n in the\n   \nInputStructure\n base class, but at first it should do nothing.\n\n\n Establish a convention for use in the Input Tree for citing reasons\n   and premises and document that convention above the stub function just\n   created.  Possibilities include the following.\n\n\nAn attribute with key \"premise citations\" indicates that its value is\n  a list of premise citations by label (that should be looked up with\n  the labels feature described above).  If its value is an array, it\n  will be treated as an array of strings.  If its value is not an array,\n  it will be converted to a string and treated as a one-element array\n  containing that string.\n\n\nAn attribute with key \"reason citations\" behaves the same way, but\n  with obviously different semantics.\n\n\nA connection of type \"premise citation\" indicates that the source\n  wants to cite the target as a premise.\n\n\nA connection of type \"reason citation\" behaves the same way, but with\n  obviously different semantics.\n\n\n\n\n\n\n Implement the \ncopyCitations(targets)\n function to copy all of the\n   data indicated by those document conventions from the \nInputStructure\n in\n   which it's called into all of the given targets, which will be an array\n   of \nOutputStructure\n instances just created from the given\n   \nInputStructure\n.\n\n\nNote that \nX.copyCitations(targets)\n should copy all citations that go\n  to \nor come from\n nodes \nY\n that are before (or equal to) \nX\n in the\n  Input Tree.\n\n\nIt can make the connections in the Output Tree by looking up the last\n  interpretation of such nodes \nY\n.\n\n\nIf \nX\n has connections to or from nodes that appear after \nX\n in the\n  tree, then those nodes will create the connections later, when\n  recursive interpretation visits them.\n\n\n\n\n\n\n Extend \nrecursiveInterpret()\n so that it calls this function in an\n   \nInputStructure\n as soon as it has completed \ninterpret()\n on that\n   structure, passing in the set of interpretation results.\n\n\n Extend the unit tests to ensure that this is now a part of the\n   Interpretation Phase.  Be sure to test connections that go both\n   directions (forward and backward) in the Input Tree and ensure that they\n   are both correctly copied to the Output Tree.  Ensure that no connection\n   is copied redundantly.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nAPI Documentation\n\n\n\n\n Extend the \nOutputStructure\n page of the API Documentation to include\n   all the work done in this phase.\n\n\n Rebuild docs and commit.\n\n\n\n\nEfficiency improvements\n\n\nThis section lists a potential efficiency improvement related to all the\ncode written during this phase of development.  Because it is only an\nefficiency improvement (and thus not required to make the code work\ncorrectly), it can be deferred until later in the project.  It is not\nsensible to invest development time on an efficiency improvement if we do\nnot even yet know whether its lack will be perceived.  If we notice any\nperformance bottlenecks that this improvement could fix, we can return to it\nlater and follow the steps below to implement it.\n\n\n\n\n Extend the \nDependency\n subclass of IS so that it marks all of its\n   interpretation results with an attribute, flagging them as having come\n   from a dependency.  Let us call such \nOutputStructures\n \"fromdeps,\" and\n   \nOutputStructures\n that are not so marked we will call \"non-fromdeps.\"\n\n\n We will be creating a cache to speed up lookups into dependencies.\n   To support this, create an LDE-global variable\n   \nLDE.dependencyLookupCache\n, and initialize it to the empty object.\n\n\n Extend the \nlookup(string)\n routine so that any time it is called\n   from a non-fromdep, and the result is either null or a fromdep, then we\n   store in \nLDE.dependencyLookupCache\n the association of the given\n   \nstring\n as a key with the result (a fromdep or null) as the value.\n   Future calls of \nlookup()\n from a non-fromdep can be sped up by, whenever\n   their search first comes upon a fromdep, if there is a cached result\n   (which can be null) for the \nstring\n they're searching, just return that\n   immediately.  This work is not yet correct without the next bullet point.\n\n\n Extend the \nDependency\n subclass of IS so that, if it ever needs to\n   actually reload content from the dependency, and thus possibly change the\n   set of fromdeps it placed in the Output Tree, then it should also revert\n   the value of \nLDE.dependencyLookupCache\n to the empty object.\n\n\n Extend the unit tests to ensure that this works.  This can be done by\n   defining a custom \nhasLabel()\n routine that records when it was called,\n   and ensuring it is called only once for many lookups.\n\n\n Once the unit tests pass, build everything and commit.", 
            "title": "Phase 6, Labels"
        }, 
        {
            "location": "/phase6-labels/#lde-design-phase-6-labels", 
            "text": "", 
            "title": "LDE Design Phase 6: Labels"
        }, 
        {
            "location": "/phase6-labels/#content", 
            "text": "In this phase, we make it possible for  OutputStructure  instances to be\nlabeled.", 
            "title": "Content"
        }, 
        {
            "location": "/phase6-labels/#goal", 
            "text": "The LDE will be able to look up  OutputStructure  instances by the labels\nattached to them, and we will have a convention for citing labels\nestablished and implemented.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase6-labels/#status", 
            "text": "This has not been implemented.  See the tasks below.", 
            "title": "Status"
        }, 
        {
            "location": "/phase6-labels/#labeling-outputstructure-instances", 
            "text": "Create in the  OutputStructure  base class a function called\n    hasLabel(str)  that returns false always.   Create a function  addLabel(targets)  in the  InputStructure  class.\n   It should accept an array of  OutputStructure  instances, and should loop\n   through all of them, obeying the following conventions.  If the  InputStructure  has an attribute with key \"label regex\", then\n  place into the  OutputStructure s a  hasLabel(str)  function that\n  tests the given string against the given regular expression.  If the  InputStructure  has an attribute with key \"label regex flags\",\n  then apply those to the regular expression object you create in the\n  previous item.  If the  InputStructure  has an attribute with key \"label targets\",\n  then call its value $V$ and apply the above techniques to only those\n  targets whose indices are on the $V$, when $V$ is treated as an array.     Add documentation in that file describing the changes just made.   Extend the unit tests for the  InputStructure  module to include some\n   calls to this routine, passing it various example parameters and\n   verifying that it does its job as specified.   Extend  recursiveInterpret()  so that it calls this function in an\n    InputStructure  as soon as it has completed  interpret()  on that\n   structure, passing in the set of interpretation results.   Extend the unit tests to ensure that this is now a part of the\n   Interpretation Phase.   Once the unit tests pass, build everything and commit.", 
            "title": "Labeling OutputStructure instances"
        }, 
        {
            "location": "/phase6-labels/#lookup", 
            "text": "Create a class method  lookup(string,accessibles)  in the\n    OutputStructure  class, which loops backwards through the list of\n    accessibles , trying to find one that  hasLabel()  the given  string .\n   It returns the latest one found, or null if there is none.   Create an instance method  lookup(string)  in the  OutputStructure \n   class, which loops backwards through the list of structures accessible to\n   the one on which it was called, trying to find one that  hasLabel()  the\n   given  string .  It returns the first one encountered, or null if there\n   is none.", 
            "title": "Lookup"
        }, 
        {
            "location": "/phase6-labels/#citations", 
            "text": "Create a stub function  copyCitations(targets)  in the\n    InputStructure  base class, but at first it should do nothing.   Establish a convention for use in the Input Tree for citing reasons\n   and premises and document that convention above the stub function just\n   created.  Possibilities include the following.  An attribute with key \"premise citations\" indicates that its value is\n  a list of premise citations by label (that should be looked up with\n  the labels feature described above).  If its value is an array, it\n  will be treated as an array of strings.  If its value is not an array,\n  it will be converted to a string and treated as a one-element array\n  containing that string.  An attribute with key \"reason citations\" behaves the same way, but\n  with obviously different semantics.  A connection of type \"premise citation\" indicates that the source\n  wants to cite the target as a premise.  A connection of type \"reason citation\" behaves the same way, but with\n  obviously different semantics.     Implement the  copyCitations(targets)  function to copy all of the\n   data indicated by those document conventions from the  InputStructure  in\n   which it's called into all of the given targets, which will be an array\n   of  OutputStructure  instances just created from the given\n    InputStructure .  Note that  X.copyCitations(targets)  should copy all citations that go\n  to  or come from  nodes  Y  that are before (or equal to)  X  in the\n  Input Tree.  It can make the connections in the Output Tree by looking up the last\n  interpretation of such nodes  Y .  If  X  has connections to or from nodes that appear after  X  in the\n  tree, then those nodes will create the connections later, when\n  recursive interpretation visits them.     Extend  recursiveInterpret()  so that it calls this function in an\n    InputStructure  as soon as it has completed  interpret()  on that\n   structure, passing in the set of interpretation results.   Extend the unit tests to ensure that this is now a part of the\n   Interpretation Phase.  Be sure to test connections that go both\n   directions (forward and backward) in the Input Tree and ensure that they\n   are both correctly copied to the Output Tree.  Ensure that no connection\n   is copied redundantly.   Once the unit tests pass, build everything and commit.", 
            "title": "Citations"
        }, 
        {
            "location": "/phase6-labels/#api-documentation", 
            "text": "Extend the  OutputStructure  page of the API Documentation to include\n   all the work done in this phase.   Rebuild docs and commit.", 
            "title": "API Documentation"
        }, 
        {
            "location": "/phase6-labels/#efficiency-improvements", 
            "text": "This section lists a potential efficiency improvement related to all the\ncode written during this phase of development.  Because it is only an\nefficiency improvement (and thus not required to make the code work\ncorrectly), it can be deferred until later in the project.  It is not\nsensible to invest development time on an efficiency improvement if we do\nnot even yet know whether its lack will be perceived.  If we notice any\nperformance bottlenecks that this improvement could fix, we can return to it\nlater and follow the steps below to implement it.    Extend the  Dependency  subclass of IS so that it marks all of its\n   interpretation results with an attribute, flagging them as having come\n   from a dependency.  Let us call such  OutputStructures  \"fromdeps,\" and\n    OutputStructures  that are not so marked we will call \"non-fromdeps.\"   We will be creating a cache to speed up lookups into dependencies.\n   To support this, create an LDE-global variable\n    LDE.dependencyLookupCache , and initialize it to the empty object.   Extend the  lookup(string)  routine so that any time it is called\n   from a non-fromdep, and the result is either null or a fromdep, then we\n   store in  LDE.dependencyLookupCache  the association of the given\n    string  as a key with the result (a fromdep or null) as the value.\n   Future calls of  lookup()  from a non-fromdep can be sped up by, whenever\n   their search first comes upon a fromdep, if there is a cached result\n   (which can be null) for the  string  they're searching, just return that\n   immediately.  This work is not yet correct without the next bullet point.   Extend the  Dependency  subclass of IS so that, if it ever needs to\n   actually reload content from the dependency, and thus possibly change the\n   set of fromdeps it placed in the Output Tree, then it should also revert\n   the value of  LDE.dependencyLookupCache  to the empty object.   Extend the unit tests to ensure that this works.  This can be done by\n   defining a custom  hasLabel()  routine that records when it was called,\n   and ensuring it is called only once for many lookups.   Once the unit tests pass, build everything and commit.", 
            "title": "Efficiency improvements"
        }, 
        {
            "location": "/phase7-validation/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 7: Validation\n\n\nContent\n\n\nIn this phase, we define the Validation Phase.\n\n\nGoal\n\n\nThe LDE will be able to follow the Interpretation Phase with the Validation\nPhase, giving semantic feedback about the validity of steps of work.\n\n\nStatus\n\n\nThis has not been implemented.  See the tasks below.\n\n\nMaking background threads easy to use\n\n\n\n\n Create a worker script that enables us to create instances of\n   \nWebWorker\ns who are able to respond to a variety of functions for\n   installing various routines and data in the workers, including:\n\n\nworker.installScript(filename)\n\n\nworker.installFunction(varname,func)\n\n\nworker.installData(key,value)\n\n\nworker.uninstallData(key)\n\n\nworker.run(code,callback)\n\n\nworker.reboot(callback)\n (which calls \nterminate()\n in the internal\n  \nWebWorker\n instance, then discards it and replaces it with a new one)\n\n\n\n\n\n\n Create a new unit testing file for these advanced \nWebWorker\ns,\n   documenting it in the same style as the rest of the test suite.\n\n\n Once it is robust and all tests pass, commit the changes.\n\n\n Create a global variable in the LDE that holds a pool of these\n   workers, with a function that lets you specify the size of the pool.\n   It should initialize itself, by default, to the number of threads the\n   CPU supports, minus 1 for the main thread.  (The minimum value is 1.)\n\n\n Create a function in each worker for marking it available or\n   unavailable.\n\n\n Create a function in the worker pool for getting the next available\n   worker, or null if there isn't one.\n\n\n Add and document tests for these new features.\n\n\n\n\nThe Validation Phase\n\n\n\n\n Create a global validation pool in the LDE, which is a priority queue\n   that comes with a routine for adding an \nOutputStructure\n instance to the\n   queue, after first verifying that it has a \nvalidate()\n routine.\n\n\n Create a routine that, if a worker is available, dequeues a structure\n   from the validation pool and calls its validation routine, passing it the\n   available worker.  If one is not available, this routine does nothing.\n   In the callback that routine passes the validation routine, place the\n   worker back on the list of available workers.  Also, the routine does\n   nothing in the case where modification or interpretation is currently\n   running.  We expect to define validation routines somewhat like this:\n\n\n\n\nMyOutputStructure.validate = function ( callback, worker ) {\n    worker.installScript( \nsome script file\n );\n    worker.installFunction( \nfoo\n, foo );\n    worker.installData( \nkey\n, value );\n    worker.run( \nsome code\n, function ( result, error ) {\n        // here, generate feedback from result and/or error\n        callback();\n    } );\n};\n\n\n\n\n\n\n Call that dequeueing routine whenever a worker becomes available.\n\n\n Make unit tests for this much functionality, in a new unit testing\n   file for validation specifically.  Document such tests the usual way.\n\n\n Extend the enqueue process so that if a structure is already\n   enqueued, then enqueueing again does nothing.\n\n\n Extend the enqueue process so that if the structure being enqueued,\n   while not currently on the queue, has its validation routine still\n   running in a worker, then we find and reboot that worker, mark the\n   structure as no longer being validated, and \nthen\n enqueue it as usual.\n\n\n Create unit tests that ensure these behaviors work.\n\n\n Create a default implementation of \njustChanged()\n in the\n   \nOutputStructure\n class that does the following things.\n\n\nIf the OS has a validate routine, add it to the global pool.  If its\n  origin IS has a validation priority, use that, otherwise use zero.  If\n  its origin has a validation priority of null, skip this step (no\n  enqueueing).  If you enqueue the OS, emit feedback saying its\n  validation is being recomputed.  If it had null priority, emit\n  feedback saying that its validation is being skipped.\n\n\nIf any OS in the scope of this one cites this one, then add that other\n  OS to the validation pool.  Set priorities and emit feedback in the\n  same way.\n\n\n\n\n\n\n Call the dequeueing routine whenever interpretation ends.\n\n\n Write unit tests to ensure that the already-tested validation\n   features still function when they are automatically triggered at the end\n   of the implementation phase.\n\n\n\n\nAPI Documentation\n\n\n\n\n Extend the processing phases page of the API Documentation to include\n   all the work done in this phase, including validation.\n\n\n Rebuild docs and commit.", 
            "title": "Phase 7, Validation"
        }, 
        {
            "location": "/phase7-validation/#lde-design-phase-7-validation", 
            "text": "", 
            "title": "LDE Design Phase 7: Validation"
        }, 
        {
            "location": "/phase7-validation/#content", 
            "text": "In this phase, we define the Validation Phase.", 
            "title": "Content"
        }, 
        {
            "location": "/phase7-validation/#goal", 
            "text": "The LDE will be able to follow the Interpretation Phase with the Validation\nPhase, giving semantic feedback about the validity of steps of work.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase7-validation/#status", 
            "text": "This has not been implemented.  See the tasks below.", 
            "title": "Status"
        }, 
        {
            "location": "/phase7-validation/#making-background-threads-easy-to-use", 
            "text": "Create a worker script that enables us to create instances of\n    WebWorker s who are able to respond to a variety of functions for\n   installing various routines and data in the workers, including:  worker.installScript(filename)  worker.installFunction(varname,func)  worker.installData(key,value)  worker.uninstallData(key)  worker.run(code,callback)  worker.reboot(callback)  (which calls  terminate()  in the internal\n   WebWorker  instance, then discards it and replaces it with a new one)     Create a new unit testing file for these advanced  WebWorker s,\n   documenting it in the same style as the rest of the test suite.   Once it is robust and all tests pass, commit the changes.   Create a global variable in the LDE that holds a pool of these\n   workers, with a function that lets you specify the size of the pool.\n   It should initialize itself, by default, to the number of threads the\n   CPU supports, minus 1 for the main thread.  (The minimum value is 1.)   Create a function in each worker for marking it available or\n   unavailable.   Create a function in the worker pool for getting the next available\n   worker, or null if there isn't one.   Add and document tests for these new features.", 
            "title": "Making background threads easy to use"
        }, 
        {
            "location": "/phase7-validation/#the-validation-phase", 
            "text": "Create a global validation pool in the LDE, which is a priority queue\n   that comes with a routine for adding an  OutputStructure  instance to the\n   queue, after first verifying that it has a  validate()  routine.   Create a routine that, if a worker is available, dequeues a structure\n   from the validation pool and calls its validation routine, passing it the\n   available worker.  If one is not available, this routine does nothing.\n   In the callback that routine passes the validation routine, place the\n   worker back on the list of available workers.  Also, the routine does\n   nothing in the case where modification or interpretation is currently\n   running.  We expect to define validation routines somewhat like this:   MyOutputStructure.validate = function ( callback, worker ) {\n    worker.installScript(  some script file  );\n    worker.installFunction(  foo , foo );\n    worker.installData(  key , value );\n    worker.run(  some code , function ( result, error ) {\n        // here, generate feedback from result and/or error\n        callback();\n    } );\n};    Call that dequeueing routine whenever a worker becomes available.   Make unit tests for this much functionality, in a new unit testing\n   file for validation specifically.  Document such tests the usual way.   Extend the enqueue process so that if a structure is already\n   enqueued, then enqueueing again does nothing.   Extend the enqueue process so that if the structure being enqueued,\n   while not currently on the queue, has its validation routine still\n   running in a worker, then we find and reboot that worker, mark the\n   structure as no longer being validated, and  then  enqueue it as usual.   Create unit tests that ensure these behaviors work.   Create a default implementation of  justChanged()  in the\n    OutputStructure  class that does the following things.  If the OS has a validate routine, add it to the global pool.  If its\n  origin IS has a validation priority, use that, otherwise use zero.  If\n  its origin has a validation priority of null, skip this step (no\n  enqueueing).  If you enqueue the OS, emit feedback saying its\n  validation is being recomputed.  If it had null priority, emit\n  feedback saying that its validation is being skipped.  If any OS in the scope of this one cites this one, then add that other\n  OS to the validation pool.  Set priorities and emit feedback in the\n  same way.     Call the dequeueing routine whenever interpretation ends.   Write unit tests to ensure that the already-tested validation\n   features still function when they are automatically triggered at the end\n   of the implementation phase.", 
            "title": "The Validation Phase"
        }, 
        {
            "location": "/phase7-validation/#api-documentation", 
            "text": "Extend the processing phases page of the API Documentation to include\n   all the work done in this phase, including validation.   Rebuild docs and commit.", 
            "title": "API Documentation"
        }, 
        {
            "location": "/phase8-expressions-and-rules/", 
            "text": "We have designed the work on the Lurch Deductive Engine (LDE) to progress in\nphases.  The idea is that each phase ends with a completed whole that can be\ntested in that state, and that provides more features than the previous\nstate did.  By the time the final phase is complete, the LDE will be a\nrobust and useful product.\n\n\nLDE Design Phase 8: Expressions and Rules\n\n\nContent\n\n\nIn this phase, we define mathematical expressions and rules of inference.\n\n\nGoal\n\n\nThe LDE will be able to validate much of the mathematics we expect to use it\nfor, without yet permitting customizable mathematical notation.\n\n\nStatus\n\n\nThis has not been implemented.  See the tasks below.\n\n\nExpressions\n\n\n\n\n Create a subclass of \nOutputStructure\n, in the \nOutputStructure\n\n   module, called \nOutputExpression\n.\n\n\n Add documentation explaining what it is and will do.\n\n\n Ensure that the \nOutputExpression\n subclass registers itself with the\n   serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'OutputExpression', OutputExpression\n\n   in the \nOutputExpression\n class code.)\n\n\n Add a constructor that takes three fields: OpenMath type (\nOMS\n,\n   \nOMI\n, etc.), atomic content (if any), and indices of bound variables (if\n   any).\n\n\n Add an instance method \ntoOpenMath()\n that converts instances of\n   the class to OpenMath expressions, using\n   \nthe OpenMath package\n.\n\n\n Add a class method \nfromOpenMath()\n that converts instances of\n   OpenMath expressions into \nOutputExpression\n trees.\n\n\n Extend the OpenMath class with a \ntoOutputExpression()\n function that\n   just defers the task to \nfromOpenMath()\n in the \nOutputExpression\n class.\n\n\n Write and document unit tests.\n\n\n\n\nCommon types of interpretation\n\n\n\n\n Extend the default implementation of \ninterpret()\n so that, if the\n   instance has a property called \ncorrespondingClass\n, then that property\n   is used to instantiate an \nOutputStructure\n instance rather than using\n   the base \nOutputStructure\n class.  This should be sufficient to implement\n   corresponding input and output expressions.\n\n\n Extend the unit tests for interpretation to verify that this can be\n   used to create arbitrary-sized trees that are nested combinations of the\n   correct subclasses of \nOutputStructure\n.  This will require creating some\n   dummy subclasses for testing purposes.\n\n\n Create a subclass \nParsableExpression\n of \nInputExpression\n that has\n   a property \nparse\n that maps strings to \nOutputStructure\n instances.  The\n   \ninterpret()\n routine in the \nParsableExpression\n class should call the\n   parser on the \"text\" attribute of the \nInputExpression\n, returning the\n   result.\n\n\n Add documentation for that new subclass.\n\n\n Ensure that the \nParsableExpression\n subclass registers itself with the\n   serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'ParsableExpression', ParsableExpression\n\n   in the \nParsableExpression\n class code.)\n\n\n Define a global function in the LDE that uses the simple notation in\n   the OpenMath package (e.g., \nf(x,y,2)\n) to create OpenMath instances and\n   then converts them to \nOutputExpression\n trees.\n\n\n Write unit tests that interpretation can use this global function.\n\n\n Repeat the previous two steps for OpenMath XML as well.\n\n\n Extend the unit tests for interpretation to verify that parsable\n   nodes can exist on their own or within corresponding nodes in the Input\n   Tree, and the correct hierarchies will be produced in any case.\n\n\n Once the unit tests pass, build everything and commit.\n\n\n\n\nRules of inference\n\n\n\n\n Create a subclass \nOutputRule\n of \nOutputStructure\n that has\n   a member \nvalidateStep(step,callback,worker)\n that can validate other\n   \nOutputStructure\n instances.  The default implementation just calls the\n   callback object with a feedback object expressing that it didn't\n   actually validate anything.\n\n\n Add documentation for that new subclass.\n\n\n Ensure that the \nOutputRule\n subclass registers itself with the\n   serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'OutputRule', OutputRule\n in the\n   \nOutputRule\n class code.)\n\n\n Define in the LDE a \nbasicValidate(callback,worker)\n function that\n   can be installed in \nOutputStructure\n instances as their \nvalidate\n\n   field, and that finds the rule of inference cited by the\n   \nOutputStructure\n instance and defers validation to that rule's\n   \nvalidateStep()\n routine, passing both parameters along.\n\n\n Test that \nOutputStructures\n can cite rules that will do the\n   validation for the structure.  Ensure that validation continues to work\n   even when delegated (athough so far all feedback will say no work was\n   done).\n\n\n Create a subclass \nTemplateRule\n of \nOutputRule\n.\n\n\n Ensure that the \nTemplateRule\n subclass registers itself with the\n   serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'TemplateRule', TemplateRule\n in the\n   \nTemplateRule\n class code.)\n\n\n In \nTemplateRule\n, override \nvalidateStep()\n so that it reads the\n   appropriate attributes and children of the rule object to determine how\n   to do validation.  For now, assume tree-based matching and if-style\n   inference.  You will need to use\n   \nthe Matching Package\n,\n   probably loaded into background workers.\n\n\n Add documentation for that new subclass.\n\n\n Test that \nOutputStructures\n can cite rules that will do the\n   template-based validation, which is a huge step!\n\n\n Extend \nTemplateRule\n with the option to be iff rather than just if.\n\n\n Add unit tests for this new feature.\n\n\n Extend \nTemplateRule\n with the option to use string-based matching\n   rather than just tree-based matching.\n\n\n Add unit tests for this new feature.\n\n\n Create a subclass \nInputRule\n of \nInputStructure\n.\n\n\n Ensure that the \nInputRule\n subclass registers itself with the\n   serialization code, as\n   \nthe documentation here\n\n   describes.  (That is, use a line like\n   \nclassName : Structure.addSubclass 'InputRule', InputRule\n in the\n   \nInputRule\n class code.)\n\n\n Override \ninterpret()\n in \nInputRule\n to create generic \nOutputRule\n\n   instances if a generic validation procedure is present, or specifically\n   \nTemplateRule\n instances if that kind of data is present.\n\n\n Add unit tests to show that the LDE can validate conclusions based on\n   rules defined earlier in the same document.\n\n\n\n\nAPI Documentation\n\n\n\n\n Extend the \nOutputStructure\n page of the API Documentation to include\n   the \nOutputExpression\n class.\n\n\n Extend the processing phases page of the API Documentation to include\n   the enhancements to interpretation and validation accomplished in this\n   phase.\n\n\n Rebuild docs and commit.", 
            "title": "Phase 8, Expressions and Rules"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#lde-design-phase-8-expressions-and-rules", 
            "text": "", 
            "title": "LDE Design Phase 8: Expressions and Rules"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#content", 
            "text": "In this phase, we define mathematical expressions and rules of inference.", 
            "title": "Content"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#goal", 
            "text": "The LDE will be able to validate much of the mathematics we expect to use it\nfor, without yet permitting customizable mathematical notation.", 
            "title": "Goal"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#status", 
            "text": "This has not been implemented.  See the tasks below.", 
            "title": "Status"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#expressions", 
            "text": "Create a subclass of  OutputStructure , in the  OutputStructure \n   module, called  OutputExpression .   Add documentation explaining what it is and will do.   Ensure that the  OutputExpression  subclass registers itself with the\n   serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'OutputExpression', OutputExpression \n   in the  OutputExpression  class code.)   Add a constructor that takes three fields: OpenMath type ( OMS ,\n    OMI , etc.), atomic content (if any), and indices of bound variables (if\n   any).   Add an instance method  toOpenMath()  that converts instances of\n   the class to OpenMath expressions, using\n    the OpenMath package .   Add a class method  fromOpenMath()  that converts instances of\n   OpenMath expressions into  OutputExpression  trees.   Extend the OpenMath class with a  toOutputExpression()  function that\n   just defers the task to  fromOpenMath()  in the  OutputExpression  class.   Write and document unit tests.", 
            "title": "Expressions"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#common-types-of-interpretation", 
            "text": "Extend the default implementation of  interpret()  so that, if the\n   instance has a property called  correspondingClass , then that property\n   is used to instantiate an  OutputStructure  instance rather than using\n   the base  OutputStructure  class.  This should be sufficient to implement\n   corresponding input and output expressions.   Extend the unit tests for interpretation to verify that this can be\n   used to create arbitrary-sized trees that are nested combinations of the\n   correct subclasses of  OutputStructure .  This will require creating some\n   dummy subclasses for testing purposes.   Create a subclass  ParsableExpression  of  InputExpression  that has\n   a property  parse  that maps strings to  OutputStructure  instances.  The\n    interpret()  routine in the  ParsableExpression  class should call the\n   parser on the \"text\" attribute of the  InputExpression , returning the\n   result.   Add documentation for that new subclass.   Ensure that the  ParsableExpression  subclass registers itself with the\n   serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'ParsableExpression', ParsableExpression \n   in the  ParsableExpression  class code.)   Define a global function in the LDE that uses the simple notation in\n   the OpenMath package (e.g.,  f(x,y,2) ) to create OpenMath instances and\n   then converts them to  OutputExpression  trees.   Write unit tests that interpretation can use this global function.   Repeat the previous two steps for OpenMath XML as well.   Extend the unit tests for interpretation to verify that parsable\n   nodes can exist on their own or within corresponding nodes in the Input\n   Tree, and the correct hierarchies will be produced in any case.   Once the unit tests pass, build everything and commit.", 
            "title": "Common types of interpretation"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#rules-of-inference", 
            "text": "Create a subclass  OutputRule  of  OutputStructure  that has\n   a member  validateStep(step,callback,worker)  that can validate other\n    OutputStructure  instances.  The default implementation just calls the\n   callback object with a feedback object expressing that it didn't\n   actually validate anything.   Add documentation for that new subclass.   Ensure that the  OutputRule  subclass registers itself with the\n   serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'OutputRule', OutputRule  in the\n    OutputRule  class code.)   Define in the LDE a  basicValidate(callback,worker)  function that\n   can be installed in  OutputStructure  instances as their  validate \n   field, and that finds the rule of inference cited by the\n    OutputStructure  instance and defers validation to that rule's\n    validateStep()  routine, passing both parameters along.   Test that  OutputStructures  can cite rules that will do the\n   validation for the structure.  Ensure that validation continues to work\n   even when delegated (athough so far all feedback will say no work was\n   done).   Create a subclass  TemplateRule  of  OutputRule .   Ensure that the  TemplateRule  subclass registers itself with the\n   serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'TemplateRule', TemplateRule  in the\n    TemplateRule  class code.)   In  TemplateRule , override  validateStep()  so that it reads the\n   appropriate attributes and children of the rule object to determine how\n   to do validation.  For now, assume tree-based matching and if-style\n   inference.  You will need to use\n    the Matching Package ,\n   probably loaded into background workers.   Add documentation for that new subclass.   Test that  OutputStructures  can cite rules that will do the\n   template-based validation, which is a huge step!   Extend  TemplateRule  with the option to be iff rather than just if.   Add unit tests for this new feature.   Extend  TemplateRule  with the option to use string-based matching\n   rather than just tree-based matching.   Add unit tests for this new feature.   Create a subclass  InputRule  of  InputStructure .   Ensure that the  InputRule  subclass registers itself with the\n   serialization code, as\n    the documentation here \n   describes.  (That is, use a line like\n    className : Structure.addSubclass 'InputRule', InputRule  in the\n    InputRule  class code.)   Override  interpret()  in  InputRule  to create generic  OutputRule \n   instances if a generic validation procedure is present, or specifically\n    TemplateRule  instances if that kind of data is present.   Add unit tests to show that the LDE can validate conclusions based on\n   rules defined earlier in the same document.", 
            "title": "Rules of inference"
        }, 
        {
            "location": "/phase8-expressions-and-rules/#api-documentation", 
            "text": "Extend the  OutputStructure  page of the API Documentation to include\n   the  OutputExpression  class.   Extend the processing phases page of the API Documentation to include\n   the enhancements to interpretation and validation accomplished in this\n   phase.   Rebuild docs and commit.", 
            "title": "API Documentation"
        }, 
        {
            "location": "/enhancements/", 
            "text": "Enhancements for Later\n\n\nThis page lists helpful enhancements to work already completed, but which\nwere not essential enough to have been included in the work done so far.  We\nlist them here so as not to lose track of important improvements we might\nmake later, and we leave empty check boxes next to them so that we can later\nmark them complete as they are implemented.\n\n\n(Entries that were here have been deleted.  This page continues to exist in\nthe event that it may be used again later for other ideas.)", 
            "title": "Enhancements for Later"
        }, 
        {
            "location": "/enhancements/#enhancements-for-later", 
            "text": "This page lists helpful enhancements to work already completed, but which\nwere not essential enough to have been included in the work done so far.  We\nlist them here so as not to lose track of important improvements we might\nmake later, and we leave empty check boxes next to them so that we can later\nmark them complete as they are implemented.  (Entries that were here have been deleted.  This page continues to exist in\nthe event that it may be used again later for other ideas.)", 
            "title": "Enhancements for Later"
        }, 
        {
            "location": "/api-overview/", 
            "text": "API Documentation Overview\n\n\nDesign Plans vs. API Documentation\n\n\nAt the top of this site, notice the two navigation menus entitled \"Design\nPlans\" and \"API Documentation.\"  The difference between them is this:\n\n\n\n\nDesign Plans\n lists concepts that have not yet been implemented and\n   documented.  Consequently, the concepts are usually not described in full\n   detail, but just the best detail available in the planning phase.\n   It answers the question, \"What do we plan to build?\"\n\n\nAPI Documentation\n lists concepts that have been implemented, and for\n   which the developers have therefore been able to document their work.\n   Having the benefit of hindsight, this is therefore more detailed, and\n   often even contains links directly into the source code.\n   It answers the question, \"What did we build?\" and is the official\n   documentation for the modules.\n\n\n\n\nAny page in the Design Plans that has been complete has had most of its\ncontent removed, because it has been superceded by the corresponding API\ndocumentation.  What remains is just a record of what was planne for that\nphase, with links to the corresponding API Documentation.\n\n\nDeveloper Workflow\n\n\nDevelopers designing and/or implementing concepts should therefore progress\nthose concepts through a lifecycle like so:\n\n\n\n\nDescribe the concept in one of the Design Plans page.  Provide as much\n    detail as you can, knowing of course that full details is impossible to\n    provide before the work has been done.\n\n\nAs you implement and test the concept, update those design documents\n    with whatever new information you create or learn as part of the work,\n    thus making them more precise.\n\n\nOnce the concept is fully implemented and tested, document the work in\n    an existing or new page in the API Documentation section.  This may\n    involve copying and pasting some of the content from the design plan,\n    provided that it still applies.  It will probably also involve adding\n    significant detail about the particulars of the implementation.\n\n\nReplace the original (less detailed) documentation in the design plans\n    with a brief description of the concept, followed by a link to the\n    corresponding part of the API Documentation for full details.\n\n\n\n\nFor the Reader\n\n\nReaders of this documentation will therefore be able to see how much has\nbeen implemented by perusing the Design Plans pages.  Those that are brief\noverviews of concepts with links to API Documentation have been implemented.\nThose that are plans for future work, with no links to any API\nDocumentation, have not yet been implemented.", 
            "title": "Overview"
        }, 
        {
            "location": "/api-overview/#api-documentation-overview", 
            "text": "", 
            "title": "API Documentation Overview"
        }, 
        {
            "location": "/api-overview/#design-plans-vs-api-documentation", 
            "text": "At the top of this site, notice the two navigation menus entitled \"Design\nPlans\" and \"API Documentation.\"  The difference between them is this:   Design Plans  lists concepts that have not yet been implemented and\n   documented.  Consequently, the concepts are usually not described in full\n   detail, but just the best detail available in the planning phase.\n   It answers the question, \"What do we plan to build?\"  API Documentation  lists concepts that have been implemented, and for\n   which the developers have therefore been able to document their work.\n   Having the benefit of hindsight, this is therefore more detailed, and\n   often even contains links directly into the source code.\n   It answers the question, \"What did we build?\" and is the official\n   documentation for the modules.   Any page in the Design Plans that has been complete has had most of its\ncontent removed, because it has been superceded by the corresponding API\ndocumentation.  What remains is just a record of what was planne for that\nphase, with links to the corresponding API Documentation.", 
            "title": "Design Plans vs. API Documentation"
        }, 
        {
            "location": "/api-overview/#developer-workflow", 
            "text": "Developers designing and/or implementing concepts should therefore progress\nthose concepts through a lifecycle like so:   Describe the concept in one of the Design Plans page.  Provide as much\n    detail as you can, knowing of course that full details is impossible to\n    provide before the work has been done.  As you implement and test the concept, update those design documents\n    with whatever new information you create or learn as part of the work,\n    thus making them more precise.  Once the concept is fully implemented and tested, document the work in\n    an existing or new page in the API Documentation section.  This may\n    involve copying and pasting some of the content from the design plan,\n    provided that it still applies.  It will probably also involve adding\n    significant detail about the particulars of the implementation.  Replace the original (less detailed) documentation in the design plans\n    with a brief description of the concept, followed by a link to the\n    corresponding part of the API Documentation for full details.", 
            "title": "Developer Workflow"
        }, 
        {
            "location": "/api-overview/#for-the-reader", 
            "text": "Readers of this documentation will therefore be able to see how much has\nbeen implemented by perusing the Design Plans pages.  Those that are brief\noverviews of concepts with links to API Documentation have been implemented.\nThose that are plans for future work, with no links to any API\nDocumentation, have not yet been implemented.", 
            "title": "For the Reader"
        }, 
        {
            "location": "/api-lde/", 
            "text": "API Documentation for the LDE Module\n\n\nThe main LDE module is not yet complete.  So far it supports only the\nfunctionality documented below, which will grow with time.\n\n\nThe Input Tree\n\n\nThe module initializes a single \nInputStructure\n instance in a global\nvariable, which can be queried with the public API function\n\ngetInputTree()\n.  It begins life as a freshly created \nInputStructure\n with\nno attributes, but an ID.\n\n\nThis structure is called the \nInput Tree,\n and is the structure in which the\nLDE stores all input passed from the client.  In particular, the LDE never\nmodifies this structure except at the request of the client.\n\n\nThe phases by which the Input Tree is processed into the Output Tree and\nvalidated are discussed \nin a separate document\n.\n\n\nManipulating the Input Tree\n\n\nThe Input Tree can be manipulated with seven functions in the public API of\nthis module.\n\n\nFunctions for manipulating \nStructure\ns\n\n\n\n\ninsertStructure(structureToInsert,parentID,insertionIndex)\n inserts a\n   new \nInputStructure\n within the Input Tree, as follows:\n\n\nstructureToInsert\n should be either the structure to insert or the\n  serialized version thereof (optionally created with \n.toJSON()\n in an\n  \nInputStructure\n instance).  After the structure is deserialized (if\n  needed) and inserted into the document, \ntrackIDs()\n will be called\n  in it; for more information on that function, see \nits entry in the\n  API docs\n.  Note that if the deserialized\n  object is not an \nInputStructure\n instance, \ninsertStructure()\n does\n  nothing.\n\n\nparentID\n is the ID of the parent under which this new child should\n  be inserted.  This must be a string ID that belongs to a structure\n  already in the Input Tree.  If it is not, \ninsertStructure()\n does\n  nothing.  Note that the root of the hierarchy is given the ID \"root\"\n  at the time the module is loaded.\n\n\ninsertionIndex\n is the index of the child to insert, which must be\n  greater than or equal to zero and less than or equal to the number of\n  children of the parent.  If that constraint does not hold,\n  \ninsertStructure()\n does nothing.\n\n\n\n\n\n\ndeleteStructure(ID)\n deletes from the Input Tree the structure with the\n   given ID, which is interpreted with the same conventions as the\n   \nparentID\n is for the \ninsertStructure()\n function.  After the structure\n   is deleted, \nuntrackIDs()\n will be called in it; for more information on\n   that function, see \nits entry in the API docs\n.\n\n\nreplaceStructure(ID,newStructure)\n replaces the structure with the\n   given ID with the given new structure.\n\n\nID\n is interpreted with the same conventions as the \nparentID\n is for\n  the \ninsertStructure()\n function\n\n\nnewStructure\n is a structure (optionally serialized), as\n  \nstructureToInsert\n is for the \ninsertStructure()\n function (and\n  again, if it is not an \nInputStructure\n instance or the serialization\n  of one, this function does nothing)\n\n\nAfter this operation, \nuntrackIDs()\n will be called in the replaced\n  structure and \ntrackIDs()\n in the replacement; for more information\n  on those functions, see\n  \ntheir entries in the API docs\n.\n\n\n\n\n\n\nsetStructureAttribute(ID,key,value)\n modifies a single attribute of a\n   structure within the Input Tree, as follows:\n\n\nID\n is interpreted with the same conventions as the \nparentID\n is for\n  the \ninsertStructure()\n function\n\n\nkey\n is the key of the attribute to create or overwrite.  If this\n  key happens to be \"id\", then the class-level tracking of IDs will be\n  updated to respect the change.  This is not permitted to begin with an\n  underscore; such key names are reserved for internal use by the LDE.\n  If the given key begins with an underscore, this function does\n  nothing.\n\n\nvalue\n is the new value, which must be JSON data.  (No checks are\n  done to verify that it is JSON data, but errors will transpire\n  eventually if non-JSON data is passed.)  Alternately, \nvalue\n can be\n  \nundefined\n, which will serve to delete the old key-value pair from\n  the attributes without replacing it with any new key-value pair.\n\n\n\n\n\n\n\n\nFunctions for manipulating connections\n\n\n\n\ninsertConnection(sourceID,targetID,connectionData)\n inserts a new\n   connection between two existing \nInputStructure\n instances, as follows:\n\n\nsourceID\n must be the ID of an \nInputStructure\n already in the Input\n  Tree.  If not, this function does nothing.\n\n\ntargetID\n must be the ID of an \nInputStructure\n already in the Input\n  Tree.  If not, this function does nothing.  It is acceptable for the\n  source and target to be the same node; connections from a thing to\n  itself are permitted.\n\n\nconnectionData\n an object containing arbitrary JSON data about the\n  new connection.  It must at least contain a field whose key is \n\"id\"\n\n  and whose value is a new, unique ID (which no connection has yet).\n  If this is not satisfied, this function does nothing.  If all the\n  above conditions are satisfied, a new connection is formed from the\n  source to the target with the given data.\n\n\n\n\n\n\nremoveConnection(ID)\n deletes from the Input Tree the connection with\n   the given ID, which must be the unique ID of a connection given to the\n   \ninsertConnection()\n function documented immediately above, otherwise,\n   this function does nothing.  If it is a valid connection ID, then the\n   connection is removed from the Input Tree and the ID is available to be\n   used again.\n\n\nsetConnectionAttribute(ID,key,value)\n modifies a single attribute of a\n   connection within the Input Tree, as follows:\n\n\nID\n is interpreted just as in \nremoveConnection()\n, above.\n\n\nkey\n is the key of the attribute to create or overwrite.  This may\n  not be the string \n\"id\"\n, which is already used to store the\n  connection's unique ID, which cannot be changed.  (If this is \n\"id\"\n,\n  this function does nothing.)\n\n\nvalue\n is the new value, which must be JSON data.  (No checks are\n  done to verify that it is JSON data, but errors will transpire\n  eventually if non-JSON data is passed.)  Alternately, \nvalue\n can be\n  \nundefined\n, which will serve to delete the old key-value pair from\n  the attributes without replacing it with any new key-value pair.\n\n\n\n\n\n\n\n\nAsynchronous API\n\n\nIf the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners will\nhandle messages of four types (\ninsertStructure\n, \ndeleteStructure\n,\n\nreplaceStructure\n, \nsetStructureAttribute\n, and \ngetInputTree\n) mirroring\nthe four functions given above (plus \ngetInputTree()\n) and calling them\ninternally.\n\n\nThey can be called by passing a message of the form \n[ command, args... ]\n,\nwhere the command is a string (one of \n\"insertStructure\"\n,\n\n\"deleteStructure\"\n, etc.) and the arguments list is the same list that\nwould be passed to the function itself, as documented above.\n\n\nFor example, you could start an LDE in a WebWorker and insert a new\n\nInputStructure\n as the first child of its global document as follows.\n\n\n    // import the lde.js file (kept in the release/ folder)\n    // (This requires having the structure.js file in the same folder.)\n    var worker = new Worker( 'lde.js' );\n    var A = new InputStructure();\n    worker.postMessage( [ 'insertStructure', A.toJSON(), 'root', 0 ] );\n\n\n\n\nBecause message passing across thread boundaries can only transfer JSON\ndata, the versions of \ninsertStructure()\n and \nreplaceStructure()\n that take\n\nInputStructure\n instances will need to be called with serialized\n\nInputStructure\ns instead.\n\n\nOnly one of these five functions sends a message back to the parent context.\nIf you post a \ngetInputTree\n message (which requires no parameters), you\nwill immediately get a message in response whose event has the following\nproperties.\n\n\n\n\nevent.data.type\n is the string \n\"getInputTree\"\n.\n\n\nevent.data.payload\n is the JSON representation of the entire Input Tree,\n   as serialized by \nStructure.toJSON()\n.\n\n\n\n\nReceiving Feedback\n\n\nThe LDE will occasionally need to send feedback to the client about the\ninput provided to it.  This takes different forms, depending on how the LDE\nhas been loaded.\n\n\n\n\nIf the LDE has been loaded into a node.js application as a module, using\n   \nrequire()\n, then the module will have a member called \nFeedback\n, an\n   instance of \nEventEmitter\n.  Clients can listen for feedback events by\n   calling \ntheModule.Feedback.addEventListener('feedback',f)\n, with their\n   own function \nf\n.  That function will be called with one argument when\n   the LDE generates feedback, a JSON object with feedback data.  The most\n   important field in the object is the \nsubject\n field, which will contain\n   the ID of the \nInputStructure\n instance to which the feedback pertains.\n\n\nIf the LDE has been loaded into the browser directly (not in a WebWorker\n   instance, but in the UI thread) then it installs a \nFeedback\n object in\n   the \nwindow\n namespace.  The client can listen to events by calling\n   \nwindow.Feedback.addEventListener('feedback',f)\n, and \nf\n will be called\n   with an event \nE\n such that \nE.data\n has the structure described in the\n   previous bullet point (e.g., \nE.data.subject\n is an \nInputStructure\n ID).\n\n\nIf the LDE has been loaded into a node.js application in a background\n   thread, using Workers, then it will occasionally post messages to the\n   parent context when one of its computations requires sending feedback\n   about the result.  If the LDE is loaded into a worker \nW\n, then you can\n   listen for such messages with \nW.onmessage = function (event) {...}\n.\n   Feedback events passed to such a handler will have \nevent.type\n equal to\n   the string \n\"feedback\"\n and \nevent.payload\n equal to the feedback data\n   itself as documented in the previous two bullet points (e.g.,\n   \nevent.payload.subject\n an \nInputStructure\n ID).\n\n\n\n\nFor an example of how this works, see\n\nthe unit tests regarding feedback in the LDE\n.\n\n\nTypes of feedback\n\n\nWe will establish conventions about the \ntype\n attribute of the feedback\nobject.  A predefined list of string constants will be permitted as \ntype\ns,\neach with a meaning specified here, so that various clients and user\ninterfaces can decide how best to express these meanings to their users.\n(Sending the short strings given here rather than their detailed meanings\nalso makes the LDE ready for localization and more efficient in the amount\nof data it transmits.)\n\n\n\n\n\"updated LDE state\"\n - feedback of this type means that the LDE has just\n   finished recomputing the Output Tree from the Input Tree, and these can\n   now be queried using the \ngetInternalState()\n function of the LDE.\n   (Validation has not necessarily yet begun.)\n\n\n\"interpretation error\"\n - feedback of this type means that an internal\n   error occurred (at the level of the JavaScript implementation of the LDE\n   or one of its \nStructure\n subclasses) when trying to interpret the Input\n   Tree, and thus the Output Tree has not been updated.  In this case, the\n   \ndetails\n member of the feedback object will have a brief, English phrase\n   summarizing the problem.\n\n\n\"dirty loop\"\n - feedback of this type means that some \nInputStructure\n\n   tried to mark dirty another \nInputStructure\n whose interpretation had\n   already begun.  This could lead to an infinite loop of interpretation,\n   and thus it is disallowed, sending this feedback to help in debugging.\n\n\n\"connection removed\"\n - feedback of this type means that an illegal\n   connection was formed in the Output Tree by the interpretation procedure,\n   and that connection was severed.  \"Illegal\" means it connected a node in\n   the Output Tree to some \nStructure\n not in the Output Tree.  The feedback\n   will also contain an \nid\n field containing the unique ID of the\n   connection that was severed.", 
            "title": "The LDE"
        }, 
        {
            "location": "/api-lde/#api-documentation-for-the-lde-module", 
            "text": "The main LDE module is not yet complete.  So far it supports only the\nfunctionality documented below, which will grow with time.", 
            "title": "API Documentation for the LDE Module"
        }, 
        {
            "location": "/api-lde/#the-input-tree", 
            "text": "The module initializes a single  InputStructure  instance in a global\nvariable, which can be queried with the public API function getInputTree() .  It begins life as a freshly created  InputStructure  with\nno attributes, but an ID.  This structure is called the  Input Tree,  and is the structure in which the\nLDE stores all input passed from the client.  In particular, the LDE never\nmodifies this structure except at the request of the client.  The phases by which the Input Tree is processed into the Output Tree and\nvalidated are discussed  in a separate document .", 
            "title": "The Input Tree"
        }, 
        {
            "location": "/api-lde/#manipulating-the-input-tree", 
            "text": "The Input Tree can be manipulated with seven functions in the public API of\nthis module.", 
            "title": "Manipulating the Input Tree"
        }, 
        {
            "location": "/api-lde/#functions-for-manipulating-structures", 
            "text": "insertStructure(structureToInsert,parentID,insertionIndex)  inserts a\n   new  InputStructure  within the Input Tree, as follows:  structureToInsert  should be either the structure to insert or the\n  serialized version thereof (optionally created with  .toJSON()  in an\n   InputStructure  instance).  After the structure is deserialized (if\n  needed) and inserted into the document,  trackIDs()  will be called\n  in it; for more information on that function, see  its entry in the\n  API docs .  Note that if the deserialized\n  object is not an  InputStructure  instance,  insertStructure()  does\n  nothing.  parentID  is the ID of the parent under which this new child should\n  be inserted.  This must be a string ID that belongs to a structure\n  already in the Input Tree.  If it is not,  insertStructure()  does\n  nothing.  Note that the root of the hierarchy is given the ID \"root\"\n  at the time the module is loaded.  insertionIndex  is the index of the child to insert, which must be\n  greater than or equal to zero and less than or equal to the number of\n  children of the parent.  If that constraint does not hold,\n   insertStructure()  does nothing.    deleteStructure(ID)  deletes from the Input Tree the structure with the\n   given ID, which is interpreted with the same conventions as the\n    parentID  is for the  insertStructure()  function.  After the structure\n   is deleted,  untrackIDs()  will be called in it; for more information on\n   that function, see  its entry in the API docs .  replaceStructure(ID,newStructure)  replaces the structure with the\n   given ID with the given new structure.  ID  is interpreted with the same conventions as the  parentID  is for\n  the  insertStructure()  function  newStructure  is a structure (optionally serialized), as\n   structureToInsert  is for the  insertStructure()  function (and\n  again, if it is not an  InputStructure  instance or the serialization\n  of one, this function does nothing)  After this operation,  untrackIDs()  will be called in the replaced\n  structure and  trackIDs()  in the replacement; for more information\n  on those functions, see\n   their entries in the API docs .    setStructureAttribute(ID,key,value)  modifies a single attribute of a\n   structure within the Input Tree, as follows:  ID  is interpreted with the same conventions as the  parentID  is for\n  the  insertStructure()  function  key  is the key of the attribute to create or overwrite.  If this\n  key happens to be \"id\", then the class-level tracking of IDs will be\n  updated to respect the change.  This is not permitted to begin with an\n  underscore; such key names are reserved for internal use by the LDE.\n  If the given key begins with an underscore, this function does\n  nothing.  value  is the new value, which must be JSON data.  (No checks are\n  done to verify that it is JSON data, but errors will transpire\n  eventually if non-JSON data is passed.)  Alternately,  value  can be\n   undefined , which will serve to delete the old key-value pair from\n  the attributes without replacing it with any new key-value pair.", 
            "title": "Functions for manipulating Structures"
        }, 
        {
            "location": "/api-lde/#functions-for-manipulating-connections", 
            "text": "insertConnection(sourceID,targetID,connectionData)  inserts a new\n   connection between two existing  InputStructure  instances, as follows:  sourceID  must be the ID of an  InputStructure  already in the Input\n  Tree.  If not, this function does nothing.  targetID  must be the ID of an  InputStructure  already in the Input\n  Tree.  If not, this function does nothing.  It is acceptable for the\n  source and target to be the same node; connections from a thing to\n  itself are permitted.  connectionData  an object containing arbitrary JSON data about the\n  new connection.  It must at least contain a field whose key is  \"id\" \n  and whose value is a new, unique ID (which no connection has yet).\n  If this is not satisfied, this function does nothing.  If all the\n  above conditions are satisfied, a new connection is formed from the\n  source to the target with the given data.    removeConnection(ID)  deletes from the Input Tree the connection with\n   the given ID, which must be the unique ID of a connection given to the\n    insertConnection()  function documented immediately above, otherwise,\n   this function does nothing.  If it is a valid connection ID, then the\n   connection is removed from the Input Tree and the ID is available to be\n   used again.  setConnectionAttribute(ID,key,value)  modifies a single attribute of a\n   connection within the Input Tree, as follows:  ID  is interpreted just as in  removeConnection() , above.  key  is the key of the attribute to create or overwrite.  This may\n  not be the string  \"id\" , which is already used to store the\n  connection's unique ID, which cannot be changed.  (If this is  \"id\" ,\n  this function does nothing.)  value  is the new value, which must be JSON data.  (No checks are\n  done to verify that it is JSON data, but errors will transpire\n  eventually if non-JSON data is passed.)  Alternately,  value  can be\n   undefined , which will serve to delete the old key-value pair from\n  the attributes without replacing it with any new key-value pair.", 
            "title": "Functions for manipulating connections"
        }, 
        {
            "location": "/api-lde/#asynchronous-api", 
            "text": "If the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners will\nhandle messages of four types ( insertStructure ,  deleteStructure , replaceStructure ,  setStructureAttribute , and  getInputTree ) mirroring\nthe four functions given above (plus  getInputTree() ) and calling them\ninternally.  They can be called by passing a message of the form  [ command, args... ] ,\nwhere the command is a string (one of  \"insertStructure\" , \"deleteStructure\" , etc.) and the arguments list is the same list that\nwould be passed to the function itself, as documented above.  For example, you could start an LDE in a WebWorker and insert a new InputStructure  as the first child of its global document as follows.      // import the lde.js file (kept in the release/ folder)\n    // (This requires having the structure.js file in the same folder.)\n    var worker = new Worker( 'lde.js' );\n    var A = new InputStructure();\n    worker.postMessage( [ 'insertStructure', A.toJSON(), 'root', 0 ] );  Because message passing across thread boundaries can only transfer JSON\ndata, the versions of  insertStructure()  and  replaceStructure()  that take InputStructure  instances will need to be called with serialized InputStructure s instead.  Only one of these five functions sends a message back to the parent context.\nIf you post a  getInputTree  message (which requires no parameters), you\nwill immediately get a message in response whose event has the following\nproperties.   event.data.type  is the string  \"getInputTree\" .  event.data.payload  is the JSON representation of the entire Input Tree,\n   as serialized by  Structure.toJSON() .", 
            "title": "Asynchronous API"
        }, 
        {
            "location": "/api-lde/#receiving-feedback", 
            "text": "The LDE will occasionally need to send feedback to the client about the\ninput provided to it.  This takes different forms, depending on how the LDE\nhas been loaded.   If the LDE has been loaded into a node.js application as a module, using\n    require() , then the module will have a member called  Feedback , an\n   instance of  EventEmitter .  Clients can listen for feedback events by\n   calling  theModule.Feedback.addEventListener('feedback',f) , with their\n   own function  f .  That function will be called with one argument when\n   the LDE generates feedback, a JSON object with feedback data.  The most\n   important field in the object is the  subject  field, which will contain\n   the ID of the  InputStructure  instance to which the feedback pertains.  If the LDE has been loaded into the browser directly (not in a WebWorker\n   instance, but in the UI thread) then it installs a  Feedback  object in\n   the  window  namespace.  The client can listen to events by calling\n    window.Feedback.addEventListener('feedback',f) , and  f  will be called\n   with an event  E  such that  E.data  has the structure described in the\n   previous bullet point (e.g.,  E.data.subject  is an  InputStructure  ID).  If the LDE has been loaded into a node.js application in a background\n   thread, using Workers, then it will occasionally post messages to the\n   parent context when one of its computations requires sending feedback\n   about the result.  If the LDE is loaded into a worker  W , then you can\n   listen for such messages with  W.onmessage = function (event) {...} .\n   Feedback events passed to such a handler will have  event.type  equal to\n   the string  \"feedback\"  and  event.payload  equal to the feedback data\n   itself as documented in the previous two bullet points (e.g.,\n    event.payload.subject  an  InputStructure  ID).   For an example of how this works, see the unit tests regarding feedback in the LDE .", 
            "title": "Receiving Feedback"
        }, 
        {
            "location": "/api-lde/#types-of-feedback", 
            "text": "We will establish conventions about the  type  attribute of the feedback\nobject.  A predefined list of string constants will be permitted as  type s,\neach with a meaning specified here, so that various clients and user\ninterfaces can decide how best to express these meanings to their users.\n(Sending the short strings given here rather than their detailed meanings\nalso makes the LDE ready for localization and more efficient in the amount\nof data it transmits.)   \"updated LDE state\"  - feedback of this type means that the LDE has just\n   finished recomputing the Output Tree from the Input Tree, and these can\n   now be queried using the  getInternalState()  function of the LDE.\n   (Validation has not necessarily yet begun.)  \"interpretation error\"  - feedback of this type means that an internal\n   error occurred (at the level of the JavaScript implementation of the LDE\n   or one of its  Structure  subclasses) when trying to interpret the Input\n   Tree, and thus the Output Tree has not been updated.  In this case, the\n    details  member of the feedback object will have a brief, English phrase\n   summarizing the problem.  \"dirty loop\"  - feedback of this type means that some  InputStructure \n   tried to mark dirty another  InputStructure  whose interpretation had\n   already begun.  This could lead to an infinite loop of interpretation,\n   and thus it is disallowed, sending this feedback to help in debugging.  \"connection removed\"  - feedback of this type means that an illegal\n   connection was formed in the Output Tree by the interpretation procedure,\n   and that connection was severed.  \"Illegal\" means it connected a node in\n   the Output Tree to some  Structure  not in the Output Tree.  The feedback\n   will also contain an  id  field containing the unique ID of the\n   connection that was severed.", 
            "title": "Types of feedback"
        }, 
        {
            "location": "/api-structures/", 
            "text": "API Documentation for the \nStructure\n Class\n\n\nSource Code\n\n\n\n\nThe \nStructure\n class\n\n\nUnit tests of the \nStructure\n class\n\n\n\n\nPurpose\n\n\nThe Lurch Deductive Engine (LDE, \ndocumented here\n) maintains\ntwo data structures, one called the Input Tree and one called the Output\nTree.  In both cases, the trees' nodes are instances of this class\n(\nStructure\n).  In particular, the Input Tree is composed of\n\nInputStructure\n instances (a direct subclass of \nStructure\n) and the Output\nTree is composed of \nOutputStructure\n instances (another direct subclass).\nSee also \nthe API documentation for the \nInputStructure\n class and its\nsubclasses\n.\n\n\nWe build into this base class all the functionality that must be present at\nevery point in those hierarchies, and leave to subclasses that functionality\nthat makes sense only for specific types of structures.  For instance, this\nclass contains no functionality to support rules of inference, because they\nare one specific type of \nOutputStructure\n, so their functionality will be\nimplemented in a subclass for that purpose.\n\n\nConstructing and Serialization\n\n\nThere is one constructor for the class\n(\nsee source code\n):\n\n\nStructure(child1,child2,...)\n creates a new instance, with the given list\nof children, each of which must be a \nStructure\n instance (or it will be\nignored).  All such children are removed from any old parent they had before\nbeing inserted into this newly created one.\n\n\nInstances can be converted to and from JSON, for saving to a file, storing\npermanently anywhere, or transmitting across threads or network connections.\nTo ensure that deserialization correctly reconstructs instances of the right\nsubclass of \nStructure\n, each subclass must be registered.  To do so, we\nprovide the \naddSubclass\n function.  Use it like so.\n\n\nJavaScript:\n\n\n    MySubclass = function ( /* ... */ ) { /* ... */ };\n    // ...\n    MySubclass.prototype.className = Structure.addSubclass( 'MySubclass', MySubclass );\n\n\n\n\nCoffeeScript, somewhere inside the class definition:\n\n\n    class MySubclass extends Structure\n        # ...\n        className : Structure.addSubclass 'MySubclass', MySubclass\n        # ...\n\n\n\n\nThen one can serialize and deserialize any hierarchy containing \nStructure\n\ninstances, as well as instances of its subclasses, using the member function\n\nsomeInstance.toJSON()\n (which obviously yields a JSON structure) or the\nclass function \nStructure.fromJSON(data)\n, which accepts JSON data created\nfrom the first function.\n\n\nSerializing a structure preserves its class, its attributes (\ndocumented\nbelow\n), and the hierarchy for which\nit is the root.\n\n\nStructure hierarchies\n\n\nTo navigate or alter a hierarchy of \nStructure\n instances, use the\nfollowing member functions present in each instance.\n\n\n\n\ninstance.parent()\n yields the parent structure, or \nnull\n if there is\n   no parent (i.e., the instance is the root of a hierarchy)\n\n\ninstance.children()\n yields an array containing the children structures,\n   in order, or an empty array if there are none\n\n\ninstance.indexInParent()\n yields the index of the child in its parent's\n   ordered list of children, or unddefined if the instance has no parent\n\n\ninstance.previousSibling()\n and \ninstance.nextSibling()\n yield the\n   adjacent structure in the parent's child list, forward or backward, as\n   expected, or undefined if there is no such sibling\n\n\ninstance.removeFromParent()\n drops the instance from it's parent's list\n   of children (thereby decreasing the length of that child list by 1) and\n   thus making \ninstance.parent()\n null\n\n\ninstance.removeChild(index)\n is a convenience equivalent to\n   \ninstance.children()[index].removeFromParent()\n\n\ninstance.insertChild(child,index)\n expects a structure instance as the\n   first argument and an index into the children list as the second.  It\n   inserts the new child at that index, thus increasing the number of\n   children by 1.  You may use an index equal to the length of the child\n   list to append.  The child is removed from its previous parent, if any,\n   before being inserted here.\n\n\ninstance.replaceWith(other)\n expects another structure instance as its\n   argument.  It removes \ninstance\n from its parent, if there is one, and\n   then inserts \nother\n at the same index in the parent, thus replacing\n   \ninstance\n.  This has no effect if \ninstance\n has no parent.  It is\n   equivalent to successive calls to \nremoveFromParent()\n and\n   \ninsertChild()\n at the instance and its parent, respectively.\n\n\ninstance.copy()\n makes a deep copy of the instance, including all nodes\n   below it in the hierarchy.  This new copy will have all the same IDs as\n   the previous copy, so to preserve uniqueness of IDs, you will usually\n   want to call \ncopiedInstance.clearIDs()\n afterwards.\n\n\n\n\nThe order of nodes in the hierarchy is often important.  We have one simple\norder relation on the nodes in the hierarchy and one more complex.  The\nsimplest is just whether node A is \"earlier than\" node B, in the order\ninduced by an in-order tree traversal (that is, the order in which the open\nparentheses would appear if the tree were written as a LISP expression).\nThis relation can be tested with \ninstance.isEarlierThan(other)\n.\n\n\nThe more complex order relation is accessibility, which we do not define\nhere, because it is already defined \nin the source code\ndocumentation\n.\nThat relation is implemented with the following member functions available\nin all instances of the class.\n\n\n\n\nA.isAccessibleTo(B)\n implements the relation as defined at the link\n   given above.\n\n\nA.isInTheScopeOf(B)\n is equivalent to \nB.isAccessibleTo(A)\n.\n\n\nA.iteratorOverAccessibles()\n yields an \"iterator\" object, which is an\n   object that can produce the list of nodes accessible to \nA\n by repeated\n   calls to the \nnext()\n member of the object.  Consider the following\n   JavaScript code that would use such an iterator.\n\n\n\n\n    var iterator = A.iteratorOverAccessibles();\n    var accessible;\n    while ( accessible = iterator.next() ) {\n        console.log( 'The next accessible structure is:',\n            accessible.toJSON() );\n    }\n\n\n\n\nNodes are produced by the iterator in reverse order (under the\n\nisEarlierThan\n relation) starting from the first accessible node before\n\nA\n.  When the \nnext()\n function yields null for the first time, the end of\nthe list has been reached.  (The \nnext()\n function will yield null forever\nthereafter.)\n\n\nIterators are more efficient than producing the entire list and returning\nit, because the client may be seeking just one particular node in the list,\nand thus producing the entire list so that the client can search just a\nsmall part of it could be wasteful.\n\n\nThere is an analogous function for scopes.\n\n\n\n\nA.iteratorOverScope()\n functions like \nA.iteratorOverAccessibles()\n, but\n   walks forwards through the structure, including precisely those nodes for\n   which \nB.isInTheScopeOf(A)\n holds true.\n\n\n\n\nThere are then four functions that use these iterators under the hood.\nClients will most likely wish to use these rather than have direct access\nto the iterators.\n\n\n\n\nA.firstAccessible(P)\n expects \nP\n to be a one-place predicate (that is,\n   a JavaScript function that can be evaluated on a single argument, and\n   yields true or false in each case) and yields the first item on the\n   \"accessibles\" list (as given by \nA.iteratorOverAccessibles()\n) for which\n   \nP\n yields true.  It returns undefined if there is no such thing.\n\n\nA.firstInScope(P)\n expects \nP\n to be a one-place predicate, as just\n   defined, and behaves just like \nfirstAccessible()\n, except it walks\n   through \nA.iteratorOverScope()\n instead.\n\n\nA.allAccessibles(P)\n expects \nP\n as in the previous two functions, and\n   yields all nodes accessible to \nA\n that satisfy \nP\n, in the same order\n   they would be reported by \niteratorOverAccessibles()\n.\n\n\nA.allInScope(P)\n expects \nP\n as in the previous two functions, and\n   yields all nodes in the scope of \nA\n that satisfy \nP\n, in the same order\n   they would be reported by \niteratorOverScope()\n.\n\n\n\n\nStructure attributes\n\n\nThe following functions available in each instance of the structure class\nsupport attributes.\n\n\n\n\ninstance.getAttribute(key)\n looks up attributes by a given string \nkey\n.\n\n\ninstance.setAttribute(key,value)\n stores attributes under a given\n   string \nkey\n with value \nvalue\n, which should be a JSON structure (or\n   atomic data).  No check is made to verify that the value is of this\n   type, but errors will transpire later if this condition is not satisfied\n   (specifically, serialization errors).\n\n\ninstance.clearAttributes(key1,key2,...)\n removes the key-value pairs\n   of attributes associated with any of the keys passed as parameters.  It\n   is acceptable to pass any number of keys, including just one.  If zero\n   are passed, \nall\n key-value pairs are removed.\n\n\ninstance.attr(object)\n adds all attributes of the given object as\n   attributes to the instance, and returns the instance itself.  This is\n   useful when constructing hierarchies, as follows.\n\n\n\n\n    var A = new Structure(\n        ( new Structure() ).attr( { name : 'example structure' } ),\n        ( new Structure() ).attr( { color : '#99ff00' } )\n    );\n\n\n\n\nYou may not use attribute keys that begin with an underscore.  These are\nreserved for internal use.\n\n\nConnections\n\n\nStructure hierarchies support the notion of making connections (directed\nedges, in the graph theory sense) between any two nodes in a hierarchy.\n(Actually, between any two \nStructure\n instances at all, but typically we\nuse it within the same hierarchy.)  Each such edge can have arbitrary JSON\ndata attached to it.\n\n\nTo enable this feature, we expose the following functions from the\n\nStructure\n class.  They will function only if both ends of the connection\nhave a unique ID, as documented \nbelow\n.\n\n\nTo create or destroy connections, use these functions:\n\n\n\n\nsource.connectTo(target,data)\n, where \nsource\n and \ntarget\n are\n   \nStructure\n instances and \ndata\n is an object containing the JSON data of\n   connection, which must at least contain the connection's unique ID in the\n   \n\"id\"\n field.  There can be multiple connections between the same two\n   structures, even with the same JSON data, except for their unique IDs.\n   Returns true if the connection was formed, false if some error prevented\n   it (such as the destination not being a structure, or not having an ID,\n   or the source not having an ID, or the connection ID already in use).\n\n\nStructure.disconnect(connectionID)\n undoes the previous operation.\n   Returns true on success or false on failure (for example, if there were\n   no connection with that ID).\n\n\nStructure.setConnectionData(connectionID,key,value)\n can be called after\n   a connection was already formed to update its data.\n\n\nmyStructure.removeAllConnections()\n does exactly what it sounds like;\n   the \nStructure\n will then have no connections in or out.\n\n\n\n\nYou can query the connections among structures with these functions:\n\n\n\n\nsource.getConnectionsOut()\n returns a list of unique IDs for\n   connections (which are different than the IDs for structures\n   themselves).  To see what you can do with a connection ID, read on.\n   The IDs are always returned in alphabetical order.\n\n\ntarget.getConnectionsIn()\n functions analogously to the previous, but\n   for connections into a target, rather than out from a source.\n\n\nnode.getAllConnections()\n returns the union of the previous two lists,\n   each entry listed only once (even if the node connects to itself), and\n   still in alphabetical order.\n\n\nStructure.getConnectionSource(ID)\n returns the \nStructure\n instance that\n   is the source for the connection with the given ID (or undefined if the\n   ID is not in use).\n\n\nStructure.getConnectionTarget(ID)\n and \nStructure.getConnectionData(ID)\n\n   are similar to the previous.\n\n\n\n\nExample usage:\n\n\nfunction getConnectionsBetween ( A, B ) {\n    var result = [ ];\n    var connIDs = A.getConnectionsOut();\n    for ( var i = 0 ; i \n connIDs.length ; i++ ) {\n        if ( target == Structure.getConnectionTarget( connIDs[i] ) )\n            result.push( Structure.getConnectionData( connIDs[i] ) );\n    }\n    return result;\n}\n\n\n\n\nYou can transfer all the connections in and out of one \nStructure\n instance\nto another structure instance by calling\n\nfirst.transferConnectionsTo(second)\n.  This is useful if \nsecond\n is about\nto take the place of \nfirst\n, and you want it to inherit all of \nfirst\n's\nconnections.  This may be particularly useful to \ninterpret()\n routines in\nsubclasses of \nInputStructure\n.\n\n\nUnique IDs\n\n\nThe \nStructure\n class maintains a mapping from IDs (as strings) to instances\nof the class.  An instance gets its ID from the attribute with key \"id.\"\nAll IDs in a hierarchy can be tracked (that is, recorded into this\nclass-level mapping) with the \ntrackIDs()\n function documented below.\n\n\nHere are the relevant functions:\n\n\n\n\ninstance.id()\n returns the instance's ID, if it has one, or undefined if\n   not\n\n\ninstance.trackIDs()\n asks the class to update the class variable that\n   maps IDs to instances, recording the connection of all IDs for all nodes\n   in the hierarchy whose root is \ninstance\n.  This will overwrite earlier\n   data in that mapping if and only if you have not kept IDs unique.\n\n\ninstance.untrackIDs()\n removes from the class-level mapping all IDs that\n   appear in the hierarchy whose root is \ninstance\n.  If you are done with\n   a \nStructure\n instance, you must call this function in it, so that its\n   memory is guaranteed to eventually be garbage collected.\n\n\nStructure.instanceWithID(id)\n takes a string ID and yields the instance\n   with that ID, if there is one, and that instance has recorded its ID in\n   the class-level variable for this purpose by means of a call to\n   \ntrackIDs()\n, or null or undefined if there is none.\n\n\n\n\nEvents and event handlers\n\n\nAny \nStructure\n instance fires up to twelve different types of events during\nits lifetime:\n\n\n\n\nwillBeInserted\n\n\nwillBeRemoved\n\n\nwillBeChanged\n\n\nwasInserted\n\n\nwasRemoved\n\n\nwasChanged\n\n\nconnectionWillBeInserted\n\n\nconnectionWillBeRemoved\n\n\nconnectionWillBeChanged\n\n\nconnectionWasInserted\n\n\nconnectionWasRemoved\n\n\nconnectionWasChanged\n\n\n\n\nTo install an event handler for one of these, simply overwrite that key in\nthe \nStructure\n object itself, as in \nmyStructure.willBeRemoved =\nmyHandlerFunction\n.\n\n\nInsertion events are fired immediately before/after the \nStructure\n is added\nas a child under a new parent.  Removal events are fired immediately\nbefore/after the \nStructure\n is removed from an existing parent.  Change\nevents are fired immediately before/after an attribute of the \nStructure\n\ninstance changes.  The same holds true for changing connections, and the\nevents fire on both the source and target of the connection.  (In the case\nwhere the source is the target, this will result in the event firing twice.)\n\n\nExample:\n\n\n    var A = new Structure();\n    var B = new Structure();\n    A.willBeInserted = function () { console.log( 'Now!' ); };\n    B.insertChild( A ); // prints 'Now!' to console just before inserting", 
            "title": "Structures"
        }, 
        {
            "location": "/api-structures/#api-documentation-for-the-structure-class", 
            "text": "", 
            "title": "API Documentation for the Structure Class"
        }, 
        {
            "location": "/api-structures/#source-code", 
            "text": "The  Structure  class  Unit tests of the  Structure  class", 
            "title": "Source Code"
        }, 
        {
            "location": "/api-structures/#purpose", 
            "text": "The Lurch Deductive Engine (LDE,  documented here ) maintains\ntwo data structures, one called the Input Tree and one called the Output\nTree.  In both cases, the trees' nodes are instances of this class\n( Structure ).  In particular, the Input Tree is composed of InputStructure  instances (a direct subclass of  Structure ) and the Output\nTree is composed of  OutputStructure  instances (another direct subclass).\nSee also  the API documentation for the  InputStructure  class and its\nsubclasses .  We build into this base class all the functionality that must be present at\nevery point in those hierarchies, and leave to subclasses that functionality\nthat makes sense only for specific types of structures.  For instance, this\nclass contains no functionality to support rules of inference, because they\nare one specific type of  OutputStructure , so their functionality will be\nimplemented in a subclass for that purpose.", 
            "title": "Purpose"
        }, 
        {
            "location": "/api-structures/#constructing-and-serialization", 
            "text": "There is one constructor for the class\n( see source code ):  Structure(child1,child2,...)  creates a new instance, with the given list\nof children, each of which must be a  Structure  instance (or it will be\nignored).  All such children are removed from any old parent they had before\nbeing inserted into this newly created one.  Instances can be converted to and from JSON, for saving to a file, storing\npermanently anywhere, or transmitting across threads or network connections.\nTo ensure that deserialization correctly reconstructs instances of the right\nsubclass of  Structure , each subclass must be registered.  To do so, we\nprovide the  addSubclass  function.  Use it like so.  JavaScript:      MySubclass = function ( /* ... */ ) { /* ... */ };\n    // ...\n    MySubclass.prototype.className = Structure.addSubclass( 'MySubclass', MySubclass );  CoffeeScript, somewhere inside the class definition:      class MySubclass extends Structure\n        # ...\n        className : Structure.addSubclass 'MySubclass', MySubclass\n        # ...  Then one can serialize and deserialize any hierarchy containing  Structure \ninstances, as well as instances of its subclasses, using the member function someInstance.toJSON()  (which obviously yields a JSON structure) or the\nclass function  Structure.fromJSON(data) , which accepts JSON data created\nfrom the first function.  Serializing a structure preserves its class, its attributes ( documented\nbelow ), and the hierarchy for which\nit is the root.", 
            "title": "Constructing and Serialization"
        }, 
        {
            "location": "/api-structures/#structure-hierarchies", 
            "text": "To navigate or alter a hierarchy of  Structure  instances, use the\nfollowing member functions present in each instance.   instance.parent()  yields the parent structure, or  null  if there is\n   no parent (i.e., the instance is the root of a hierarchy)  instance.children()  yields an array containing the children structures,\n   in order, or an empty array if there are none  instance.indexInParent()  yields the index of the child in its parent's\n   ordered list of children, or unddefined if the instance has no parent  instance.previousSibling()  and  instance.nextSibling()  yield the\n   adjacent structure in the parent's child list, forward or backward, as\n   expected, or undefined if there is no such sibling  instance.removeFromParent()  drops the instance from it's parent's list\n   of children (thereby decreasing the length of that child list by 1) and\n   thus making  instance.parent()  null  instance.removeChild(index)  is a convenience equivalent to\n    instance.children()[index].removeFromParent()  instance.insertChild(child,index)  expects a structure instance as the\n   first argument and an index into the children list as the second.  It\n   inserts the new child at that index, thus increasing the number of\n   children by 1.  You may use an index equal to the length of the child\n   list to append.  The child is removed from its previous parent, if any,\n   before being inserted here.  instance.replaceWith(other)  expects another structure instance as its\n   argument.  It removes  instance  from its parent, if there is one, and\n   then inserts  other  at the same index in the parent, thus replacing\n    instance .  This has no effect if  instance  has no parent.  It is\n   equivalent to successive calls to  removeFromParent()  and\n    insertChild()  at the instance and its parent, respectively.  instance.copy()  makes a deep copy of the instance, including all nodes\n   below it in the hierarchy.  This new copy will have all the same IDs as\n   the previous copy, so to preserve uniqueness of IDs, you will usually\n   want to call  copiedInstance.clearIDs()  afterwards.   The order of nodes in the hierarchy is often important.  We have one simple\norder relation on the nodes in the hierarchy and one more complex.  The\nsimplest is just whether node A is \"earlier than\" node B, in the order\ninduced by an in-order tree traversal (that is, the order in which the open\nparentheses would appear if the tree were written as a LISP expression).\nThis relation can be tested with  instance.isEarlierThan(other) .  The more complex order relation is accessibility, which we do not define\nhere, because it is already defined  in the source code\ndocumentation .\nThat relation is implemented with the following member functions available\nin all instances of the class.   A.isAccessibleTo(B)  implements the relation as defined at the link\n   given above.  A.isInTheScopeOf(B)  is equivalent to  B.isAccessibleTo(A) .  A.iteratorOverAccessibles()  yields an \"iterator\" object, which is an\n   object that can produce the list of nodes accessible to  A  by repeated\n   calls to the  next()  member of the object.  Consider the following\n   JavaScript code that would use such an iterator.       var iterator = A.iteratorOverAccessibles();\n    var accessible;\n    while ( accessible = iterator.next() ) {\n        console.log( 'The next accessible structure is:',\n            accessible.toJSON() );\n    }  Nodes are produced by the iterator in reverse order (under the isEarlierThan  relation) starting from the first accessible node before A .  When the  next()  function yields null for the first time, the end of\nthe list has been reached.  (The  next()  function will yield null forever\nthereafter.)  Iterators are more efficient than producing the entire list and returning\nit, because the client may be seeking just one particular node in the list,\nand thus producing the entire list so that the client can search just a\nsmall part of it could be wasteful.  There is an analogous function for scopes.   A.iteratorOverScope()  functions like  A.iteratorOverAccessibles() , but\n   walks forwards through the structure, including precisely those nodes for\n   which  B.isInTheScopeOf(A)  holds true.   There are then four functions that use these iterators under the hood.\nClients will most likely wish to use these rather than have direct access\nto the iterators.   A.firstAccessible(P)  expects  P  to be a one-place predicate (that is,\n   a JavaScript function that can be evaluated on a single argument, and\n   yields true or false in each case) and yields the first item on the\n   \"accessibles\" list (as given by  A.iteratorOverAccessibles() ) for which\n    P  yields true.  It returns undefined if there is no such thing.  A.firstInScope(P)  expects  P  to be a one-place predicate, as just\n   defined, and behaves just like  firstAccessible() , except it walks\n   through  A.iteratorOverScope()  instead.  A.allAccessibles(P)  expects  P  as in the previous two functions, and\n   yields all nodes accessible to  A  that satisfy  P , in the same order\n   they would be reported by  iteratorOverAccessibles() .  A.allInScope(P)  expects  P  as in the previous two functions, and\n   yields all nodes in the scope of  A  that satisfy  P , in the same order\n   they would be reported by  iteratorOverScope() .", 
            "title": "Structure hierarchies"
        }, 
        {
            "location": "/api-structures/#structure-attributes", 
            "text": "The following functions available in each instance of the structure class\nsupport attributes.   instance.getAttribute(key)  looks up attributes by a given string  key .  instance.setAttribute(key,value)  stores attributes under a given\n   string  key  with value  value , which should be a JSON structure (or\n   atomic data).  No check is made to verify that the value is of this\n   type, but errors will transpire later if this condition is not satisfied\n   (specifically, serialization errors).  instance.clearAttributes(key1,key2,...)  removes the key-value pairs\n   of attributes associated with any of the keys passed as parameters.  It\n   is acceptable to pass any number of keys, including just one.  If zero\n   are passed,  all  key-value pairs are removed.  instance.attr(object)  adds all attributes of the given object as\n   attributes to the instance, and returns the instance itself.  This is\n   useful when constructing hierarchies, as follows.       var A = new Structure(\n        ( new Structure() ).attr( { name : 'example structure' } ),\n        ( new Structure() ).attr( { color : '#99ff00' } )\n    );  You may not use attribute keys that begin with an underscore.  These are\nreserved for internal use.", 
            "title": "Structure attributes"
        }, 
        {
            "location": "/api-structures/#connections", 
            "text": "Structure hierarchies support the notion of making connections (directed\nedges, in the graph theory sense) between any two nodes in a hierarchy.\n(Actually, between any two  Structure  instances at all, but typically we\nuse it within the same hierarchy.)  Each such edge can have arbitrary JSON\ndata attached to it.  To enable this feature, we expose the following functions from the Structure  class.  They will function only if both ends of the connection\nhave a unique ID, as documented  below .  To create or destroy connections, use these functions:   source.connectTo(target,data) , where  source  and  target  are\n    Structure  instances and  data  is an object containing the JSON data of\n   connection, which must at least contain the connection's unique ID in the\n    \"id\"  field.  There can be multiple connections between the same two\n   structures, even with the same JSON data, except for their unique IDs.\n   Returns true if the connection was formed, false if some error prevented\n   it (such as the destination not being a structure, or not having an ID,\n   or the source not having an ID, or the connection ID already in use).  Structure.disconnect(connectionID)  undoes the previous operation.\n   Returns true on success or false on failure (for example, if there were\n   no connection with that ID).  Structure.setConnectionData(connectionID,key,value)  can be called after\n   a connection was already formed to update its data.  myStructure.removeAllConnections()  does exactly what it sounds like;\n   the  Structure  will then have no connections in or out.   You can query the connections among structures with these functions:   source.getConnectionsOut()  returns a list of unique IDs for\n   connections (which are different than the IDs for structures\n   themselves).  To see what you can do with a connection ID, read on.\n   The IDs are always returned in alphabetical order.  target.getConnectionsIn()  functions analogously to the previous, but\n   for connections into a target, rather than out from a source.  node.getAllConnections()  returns the union of the previous two lists,\n   each entry listed only once (even if the node connects to itself), and\n   still in alphabetical order.  Structure.getConnectionSource(ID)  returns the  Structure  instance that\n   is the source for the connection with the given ID (or undefined if the\n   ID is not in use).  Structure.getConnectionTarget(ID)  and  Structure.getConnectionData(ID) \n   are similar to the previous.   Example usage:  function getConnectionsBetween ( A, B ) {\n    var result = [ ];\n    var connIDs = A.getConnectionsOut();\n    for ( var i = 0 ; i   connIDs.length ; i++ ) {\n        if ( target == Structure.getConnectionTarget( connIDs[i] ) )\n            result.push( Structure.getConnectionData( connIDs[i] ) );\n    }\n    return result;\n}  You can transfer all the connections in and out of one  Structure  instance\nto another structure instance by calling first.transferConnectionsTo(second) .  This is useful if  second  is about\nto take the place of  first , and you want it to inherit all of  first 's\nconnections.  This may be particularly useful to  interpret()  routines in\nsubclasses of  InputStructure .", 
            "title": "Connections"
        }, 
        {
            "location": "/api-structures/#unique-ids", 
            "text": "The  Structure  class maintains a mapping from IDs (as strings) to instances\nof the class.  An instance gets its ID from the attribute with key \"id.\"\nAll IDs in a hierarchy can be tracked (that is, recorded into this\nclass-level mapping) with the  trackIDs()  function documented below.  Here are the relevant functions:   instance.id()  returns the instance's ID, if it has one, or undefined if\n   not  instance.trackIDs()  asks the class to update the class variable that\n   maps IDs to instances, recording the connection of all IDs for all nodes\n   in the hierarchy whose root is  instance .  This will overwrite earlier\n   data in that mapping if and only if you have not kept IDs unique.  instance.untrackIDs()  removes from the class-level mapping all IDs that\n   appear in the hierarchy whose root is  instance .  If you are done with\n   a  Structure  instance, you must call this function in it, so that its\n   memory is guaranteed to eventually be garbage collected.  Structure.instanceWithID(id)  takes a string ID and yields the instance\n   with that ID, if there is one, and that instance has recorded its ID in\n   the class-level variable for this purpose by means of a call to\n    trackIDs() , or null or undefined if there is none.", 
            "title": "Unique IDs"
        }, 
        {
            "location": "/api-structures/#events-and-event-handlers", 
            "text": "Any  Structure  instance fires up to twelve different types of events during\nits lifetime:   willBeInserted  willBeRemoved  willBeChanged  wasInserted  wasRemoved  wasChanged  connectionWillBeInserted  connectionWillBeRemoved  connectionWillBeChanged  connectionWasInserted  connectionWasRemoved  connectionWasChanged   To install an event handler for one of these, simply overwrite that key in\nthe  Structure  object itself, as in  myStructure.willBeRemoved =\nmyHandlerFunction .  Insertion events are fired immediately before/after the  Structure  is added\nas a child under a new parent.  Removal events are fired immediately\nbefore/after the  Structure  is removed from an existing parent.  Change\nevents are fired immediately before/after an attribute of the  Structure \ninstance changes.  The same holds true for changing connections, and the\nevents fire on both the source and target of the connection.  (In the case\nwhere the source is the target, this will result in the event firing twice.)  Example:      var A = new Structure();\n    var B = new Structure();\n    A.willBeInserted = function () { console.log( 'Now!' ); };\n    B.insertChild( A ); // prints 'Now!' to console just before inserting", 
            "title": "Events and event handlers"
        }, 
        {
            "location": "/api-input-structures/", 
            "text": "API Documentation for the \nInputStructure\n Class and its Subclasses\n\n\nSource Code\n\n\n\n\nThe \nInputStructure\n class\n\n\nUnit tests of the \nInputStructure\n class\n\n\n\n\nPurpose\n\n\nFor information on the generic notion of Structures, see\n\nthe API documentation for the base \nStructure\n class\n.\nThat explains not only the concepts common to all Structures, but also how\n\nInputStructure\ns fit into the bigger picture.\n\n\nIn this file, we cover the details specific to the \nInputStructure\n subclass\nas well as its subclasses.  We break this document into sections, one for\neach subclass of \nInputStructure\n, including \nInputStructure\n itself.\n\n\nThe \nInputStructure\n class\n\n\nThis class overrides none of the methods of its superclass, so you can refer\nto \nthe superclass API documentation\n for information\nabout many of the class's features.  It adds the following features.\n\n\nDirty/Clean Status\n\n\nIn the Input Tree, the \ndirty\n flag of an \nInputStructure\n signifies whether\nthat node in the tree needs to be reinterpreted (i.e., has changed since its\nlast interpretation, or something else that's relevant changed since its\nlast interpretation).  Because the interpretation of parent nodes is\ndependent on the interpretation of child nodes, if a node is marked dirty,\nits parent should be as well (and so on, up the ancestor chain).\n\n\nThus the \nInputStructure\n class provides a \nmarkDirty(yesOrNo)\n function to\nguarantee this property.  If you call it with a false argument (to mark the\nStructure clean) then it operates on only the Structure in which you called\nit.  But if you call it with a true argument, then it recursively continues\nup the ancestor chain, marking the whole chain dirty.\n\n\nThe same \nisDirty()\n function from the \nStructure\n base class remains\navailable, unchanged.\n\n\nFeedback\n\n\nTo make it easy to give feedback about \nInputStructure\n instances, we\nprovide an instance method called \nfeedback()\n.  You can call\n\nX.feedback(Y)\n in any \nInputStructure\n \nX\n, passing any JSON object \nY\n\ncontaining the feedback you wish to send, and it will add \nX.id()\n as the\n\nsubject\n field of \nY\n, then call the LDE's global feedback function to\ntransmit \nY\n to the client.\n\n\nThis transmission takes different forms depending on the client.  See the\n\nrelevant section in the LDE API documentation\n.\n\n\nCreating Default IDs\n\n\nDebugging and testing the Input and Output Trees is simplified if the IDs of\n\nOutputStructure\ns in the Output Tree somehow correlate with the IDs of\ntheir originating nodes in the Input Tree. It is also convenient if\n\nOutputStructure\ns have default IDs assigned, without each subclass of\n\nInputStructure\n having to specify how it assigns those IDs.\n\n\nThe \nassignCorrespondingIDs\n function is called by \nrecursiveInterpret()\n to\ndo just that.  An \nInputStructure\n with ID x would have the\n\nOutputStructures\n in its interpretation automatically given IDs x.0, x.1,\nx.2, and so on.\n\n\nClients do not need to call this function.  But subclasses that want to\nremove or change its behavior can override it.\n\n\nLabels\n\n\nEach \nOutputStructure\n can be labeled as documented\n\nhere\n. Interpretation can attach labels by\nassigning a \nhasLabel()\n function into any \nOutputStructure\n it creates.\nSince this is very common and yet a bit annoying to code, we establish a few\nconventions that are respected by the built-in \nInputStructure\n function\n\naddLabels()\n, which is called by the default implementation of\n\nrecursiveInterpret()\n.  They are:\n\n\n\n\nIf an \nInputStructure\n \nX\n has an attribute with key \n\"label regex\"\n then\n   any \nOutputStructure\n in \nX.lastInterpretation\n will be assigned a\n   \nhasLabel()\n function that checks its argument against the value of that\n   attribute, after converting it to a \nRegExp\n object.\n\n\nIf an \nInputStructure\n \nX\n has an attribute with key\n   \n\"label regex flags\"\n then that attribute's value will be used in the\n   construction of the \nRegExp\n mentioned above, as its flags.\n\n\nIf an \nInputStructure\n has an attribute with key \n\"label targets\"\n with\n   value \n[i_1,i_2,...,i_N]\n then only the interpretation outputs whose\n   indices are \ni_1\n or \ni_2\n or ... or \ni_N\n are labeled.\n\n\n\n\nCitations\n\n\nSimilar to the previous section, we have some default conventions for\ncopying citations from the Input Tree to the Output Tree during\ninterpretation.  These conventions are implemented in a function called\n\ncopyCitations()\n (the analogue of \naddLabels()\n), but any subclass that\ndoes not like these defaults can override that method to change them.\n\n\n\n\nIf an \nInputStructure\n has a \n\"premise citations\"\n or\n   \n\"reason citations\"\n attribute then the value should be a list of\n   strings, labels of the premises being cited.  (Or it can be a single\n   string, which will be treated as a one-element array.)  Such an\n   attribute is copied directly into the \nOutputStructure\ns that are the\n   interpretation.  (Both attributes are permitted, or one, or none.)\n\n\nIf an \nInputStructure\n has a connection coming in or going out, and the\n   connection's data has \ntype\n equal to \n\"premise citation\"\n or\n   \n\"reason citation\"\n, then that connection should somehow be transferred\n   to the Output Tree.  This comes with a few fiddly details that are\n   documented in \nthe comments on the source code\n.\n\n\n\n\nThe \nInputExpression\n class\n\n\nAn \nInputExpression\n is the type of \nInputStructure\n that the LDE will\ninterpret into meaningful content in its Output Tree.  This is the first of\ntwo \nInputStructure\n subclasses.  They are intended to be the \nonly\n two\n\nInputStructure\n subclasses; most other things should be subclasses of one\nof these two.\n\n\nInputExpression\ns are what we typically think of as the meaningful things\nin the Input Tree.  They will have interpretation routines that will\nproduce nodes in the Output Tree.\n\n\nTo do their job, they have the following features.  (Some of these make more\nsense if you've skipped ahead and read the purpose of \nInputModifier\ns\nfirst.)\n\n\n\n\nAn \nupdateData()\n function, which imports from any \nInputModifier\n\n   connected to the expression all the data that such a modifier wishes to\n   import, by calling \nupdateDataIn()\n in the modifier, passing the\n   expression as parameter.\n\n\nSeveral functions for tracking which attributes of the expression were\n   written by modifiers.  (See the miscellaneous technical details\n   documented in \nthe relevant section of the source code\n.)\n\n\nThree convenience functions to make it easier for \nInputModifier\n\n   instances to implement their \nupdateDataIn()\n functions without causing\n   collisions or overwriting of data in expressions.  See the documentation\n   in \nthe relevant section of the source code\n.\n\n\n\n\nThe \nDependency\n class\n\n\nThe client may permit the user to write a document that begins by importing\nthe meaning expressed in some other, saved document.  We call that other,\nsaved document a \"dependency\" of the first.  To support this, we permit the\nembedding into the Input Tree of the first document the meaning already\nstored in the Output Tree of the dependency.  Interpretation can then just\ncopy that information over to the Output Tree as if it had been there all\nalong (which is the intent of importing a dependency in the first place).\n\n\nThis class supports that by permitting the user to contsruct a \nDependency\n\nin the Input Tree, passing it the list of \nOutputStructure\n instances that\nhave been loaded from the Output Tree of the dependency document it\nrepresents.  Whenever it is interpreted, it just passes those same values\nalong into the Output Tree.\n\n\nThe \nInputModifier\n class\n\n\nAn \nInputModifier\n is the type of \nInputStructure\n that will modify\n\nInputExpression\ns, and thus impact how they are interpreted.  It does not\ndirectly have an interpretation in the Output Tree itself, but only impacts\nthe interpretation of zero or more \nInputExpression\ns.\n\n\nTo support that, they have this functionality:\n\n\n\n\nAn overridden constructor and \ninsertChild()\n routine that prevent adding\n   children to an \nInputModifier\n instance.\n\n\nDefault (noop) implementations of \nupdateConnections()\n and\n   \nupdateDataIn()\n that subclasses can override.\n\n\nAn implementation of \ninterpret()\n that always returns an empty array.\n\n\n\n\nThe most common way to use this class will probably be to instead use the\nfollowing simple subclass.\n\n\nThe \nBasicInputModifier\n class\n\n\nThe most common purpose of modifiers is probably going to be embedding\nattributes into their targets.  To that end, we provide a class that does\nexactly that.\n\n\nIt contains support for calling any of the three convenience functions that\nexpressions expose to modifiers: \nsetSingleValue\n, \naddListItem\n, and\n\naddSetElement\n.  The data for these calls can be given at construction time\nso that one need not subclass this further to get the desired functionality,\nbut can just instantiate it instead.\n\n\nHere is an example:\n\n\nvar example = new BasicInputModifier(\n    [ 'color', 'red', 'setSingleValue' ],\n    [ 'brother', 'Steve', 'addSetElement' ],\n    [ 'brother', 'Eric', 'addSetElement' ]\n);\nexample.updateDataIn( expression );\n// does all of the following:\n// expression.setSingleValue( 'color', 'red' );\n// expression.addSetElement( 'brother', 'Steve' );\n// expression.addSetElement( 'brother', 'Eric' );", 
            "title": "Input Structures"
        }, 
        {
            "location": "/api-input-structures/#api-documentation-for-the-inputstructure-class-and-its-subclasses", 
            "text": "", 
            "title": "API Documentation for the InputStructure Class and its Subclasses"
        }, 
        {
            "location": "/api-input-structures/#source-code", 
            "text": "The  InputStructure  class  Unit tests of the  InputStructure  class", 
            "title": "Source Code"
        }, 
        {
            "location": "/api-input-structures/#purpose", 
            "text": "For information on the generic notion of Structures, see the API documentation for the base  Structure  class .\nThat explains not only the concepts common to all Structures, but also how InputStructure s fit into the bigger picture.  In this file, we cover the details specific to the  InputStructure  subclass\nas well as its subclasses.  We break this document into sections, one for\neach subclass of  InputStructure , including  InputStructure  itself.", 
            "title": "Purpose"
        }, 
        {
            "location": "/api-input-structures/#the-inputstructure-class", 
            "text": "This class overrides none of the methods of its superclass, so you can refer\nto  the superclass API documentation  for information\nabout many of the class's features.  It adds the following features.", 
            "title": "The InputStructure class"
        }, 
        {
            "location": "/api-input-structures/#dirtyclean-status", 
            "text": "In the Input Tree, the  dirty  flag of an  InputStructure  signifies whether\nthat node in the tree needs to be reinterpreted (i.e., has changed since its\nlast interpretation, or something else that's relevant changed since its\nlast interpretation).  Because the interpretation of parent nodes is\ndependent on the interpretation of child nodes, if a node is marked dirty,\nits parent should be as well (and so on, up the ancestor chain).  Thus the  InputStructure  class provides a  markDirty(yesOrNo)  function to\nguarantee this property.  If you call it with a false argument (to mark the\nStructure clean) then it operates on only the Structure in which you called\nit.  But if you call it with a true argument, then it recursively continues\nup the ancestor chain, marking the whole chain dirty.  The same  isDirty()  function from the  Structure  base class remains\navailable, unchanged.", 
            "title": "Dirty/Clean Status"
        }, 
        {
            "location": "/api-input-structures/#feedback", 
            "text": "To make it easy to give feedback about  InputStructure  instances, we\nprovide an instance method called  feedback() .  You can call X.feedback(Y)  in any  InputStructure   X , passing any JSON object  Y \ncontaining the feedback you wish to send, and it will add  X.id()  as the subject  field of  Y , then call the LDE's global feedback function to\ntransmit  Y  to the client.  This transmission takes different forms depending on the client.  See the relevant section in the LDE API documentation .", 
            "title": "Feedback"
        }, 
        {
            "location": "/api-input-structures/#creating-default-ids", 
            "text": "Debugging and testing the Input and Output Trees is simplified if the IDs of OutputStructure s in the Output Tree somehow correlate with the IDs of\ntheir originating nodes in the Input Tree. It is also convenient if OutputStructure s have default IDs assigned, without each subclass of InputStructure  having to specify how it assigns those IDs.  The  assignCorrespondingIDs  function is called by  recursiveInterpret()  to\ndo just that.  An  InputStructure  with ID x would have the OutputStructures  in its interpretation automatically given IDs x.0, x.1,\nx.2, and so on.  Clients do not need to call this function.  But subclasses that want to\nremove or change its behavior can override it.", 
            "title": "Creating Default IDs"
        }, 
        {
            "location": "/api-input-structures/#labels", 
            "text": "Each  OutputStructure  can be labeled as documented here . Interpretation can attach labels by\nassigning a  hasLabel()  function into any  OutputStructure  it creates.\nSince this is very common and yet a bit annoying to code, we establish a few\nconventions that are respected by the built-in  InputStructure  function addLabels() , which is called by the default implementation of recursiveInterpret() .  They are:   If an  InputStructure   X  has an attribute with key  \"label regex\"  then\n   any  OutputStructure  in  X.lastInterpretation  will be assigned a\n    hasLabel()  function that checks its argument against the value of that\n   attribute, after converting it to a  RegExp  object.  If an  InputStructure   X  has an attribute with key\n    \"label regex flags\"  then that attribute's value will be used in the\n   construction of the  RegExp  mentioned above, as its flags.  If an  InputStructure  has an attribute with key  \"label targets\"  with\n   value  [i_1,i_2,...,i_N]  then only the interpretation outputs whose\n   indices are  i_1  or  i_2  or ... or  i_N  are labeled.", 
            "title": "Labels"
        }, 
        {
            "location": "/api-input-structures/#citations", 
            "text": "Similar to the previous section, we have some default conventions for\ncopying citations from the Input Tree to the Output Tree during\ninterpretation.  These conventions are implemented in a function called copyCitations()  (the analogue of  addLabels() ), but any subclass that\ndoes not like these defaults can override that method to change them.   If an  InputStructure  has a  \"premise citations\"  or\n    \"reason citations\"  attribute then the value should be a list of\n   strings, labels of the premises being cited.  (Or it can be a single\n   string, which will be treated as a one-element array.)  Such an\n   attribute is copied directly into the  OutputStructure s that are the\n   interpretation.  (Both attributes are permitted, or one, or none.)  If an  InputStructure  has a connection coming in or going out, and the\n   connection's data has  type  equal to  \"premise citation\"  or\n    \"reason citation\" , then that connection should somehow be transferred\n   to the Output Tree.  This comes with a few fiddly details that are\n   documented in  the comments on the source code .", 
            "title": "Citations"
        }, 
        {
            "location": "/api-input-structures/#the-inputexpression-class", 
            "text": "An  InputExpression  is the type of  InputStructure  that the LDE will\ninterpret into meaningful content in its Output Tree.  This is the first of\ntwo  InputStructure  subclasses.  They are intended to be the  only  two InputStructure  subclasses; most other things should be subclasses of one\nof these two.  InputExpression s are what we typically think of as the meaningful things\nin the Input Tree.  They will have interpretation routines that will\nproduce nodes in the Output Tree.  To do their job, they have the following features.  (Some of these make more\nsense if you've skipped ahead and read the purpose of  InputModifier s\nfirst.)   An  updateData()  function, which imports from any  InputModifier \n   connected to the expression all the data that such a modifier wishes to\n   import, by calling  updateDataIn()  in the modifier, passing the\n   expression as parameter.  Several functions for tracking which attributes of the expression were\n   written by modifiers.  (See the miscellaneous technical details\n   documented in  the relevant section of the source code .)  Three convenience functions to make it easier for  InputModifier \n   instances to implement their  updateDataIn()  functions without causing\n   collisions or overwriting of data in expressions.  See the documentation\n   in  the relevant section of the source code .", 
            "title": "The InputExpression class"
        }, 
        {
            "location": "/api-input-structures/#the-dependency-class", 
            "text": "The client may permit the user to write a document that begins by importing\nthe meaning expressed in some other, saved document.  We call that other,\nsaved document a \"dependency\" of the first.  To support this, we permit the\nembedding into the Input Tree of the first document the meaning already\nstored in the Output Tree of the dependency.  Interpretation can then just\ncopy that information over to the Output Tree as if it had been there all\nalong (which is the intent of importing a dependency in the first place).  This class supports that by permitting the user to contsruct a  Dependency \nin the Input Tree, passing it the list of  OutputStructure  instances that\nhave been loaded from the Output Tree of the dependency document it\nrepresents.  Whenever it is interpreted, it just passes those same values\nalong into the Output Tree.", 
            "title": "The Dependency class"
        }, 
        {
            "location": "/api-input-structures/#the-inputmodifier-class", 
            "text": "An  InputModifier  is the type of  InputStructure  that will modify InputExpression s, and thus impact how they are interpreted.  It does not\ndirectly have an interpretation in the Output Tree itself, but only impacts\nthe interpretation of zero or more  InputExpression s.  To support that, they have this functionality:   An overridden constructor and  insertChild()  routine that prevent adding\n   children to an  InputModifier  instance.  Default (noop) implementations of  updateConnections()  and\n    updateDataIn()  that subclasses can override.  An implementation of  interpret()  that always returns an empty array.   The most common way to use this class will probably be to instead use the\nfollowing simple subclass.", 
            "title": "The InputModifier class"
        }, 
        {
            "location": "/api-input-structures/#the-basicinputmodifier-class", 
            "text": "The most common purpose of modifiers is probably going to be embedding\nattributes into their targets.  To that end, we provide a class that does\nexactly that.  It contains support for calling any of the three convenience functions that\nexpressions expose to modifiers:  setSingleValue ,  addListItem , and addSetElement .  The data for these calls can be given at construction time\nso that one need not subclass this further to get the desired functionality,\nbut can just instantiate it instead.  Here is an example:  var example = new BasicInputModifier(\n    [ 'color', 'red', 'setSingleValue' ],\n    [ 'brother', 'Steve', 'addSetElement' ],\n    [ 'brother', 'Eric', 'addSetElement' ]\n);\nexample.updateDataIn( expression );\n// does all of the following:\n// expression.setSingleValue( 'color', 'red' );\n// expression.addSetElement( 'brother', 'Steve' );\n// expression.addSetElement( 'brother', 'Eric' );", 
            "title": "The BasicInputModifier class"
        }, 
        {
            "location": "/api-output-structures/", 
            "text": "API Documentation for the \nOutputStructure\n Class and its Subclasses\n\n\nSource Code\n\n\n\n\nThe \nOutputStructure\n class\n\n\nUnit tests of the \nOutputStructure\n class\n\n\n\n\nPurpose\n\n\nFor information on the generic notion of Structures, see\n\nthe API documentation for the base \nStructure\n class\n.\nThat explains not only the concepts common to all Structures, but also how\n\nOutputStructure\ns fit into the bigger picture.\n\n\nIn this file, we cover the details specific to the \nOutputStructure\n\nsubclass as well as its subclasses.  We break this document into sections,\none for each subclass of \nOutputStructure\n, including \nOutputStructure\n\nitself.\n\n\nThe \nOutputStructure\n class\n\n\nThis class overrides none of the methods of its superclass, so you can refer\nto \nthe superclass API documentation\n for information\nabout many of the class's features.  It adds the following features.\n\n\nDirty/Clean Status\n\n\nIn the Output Tree, the \ndirty\n flag of an \nOutputStructure\n signifies\nwhether that node in the tree needs to be revalidated (i.e., has changed\nsince its last validation, or something else that's relevant changed since\nits last validation).  Because the validation of one node in the Output Tree\nis independent of the validation of any other node, if a node is marked\ndirty, it is marked dirty in isolation.  Unlike \nInputStructure\ns, we do not\npropagate dirty status up the ancestor chain.\n\n\nThus the \nOutputStructure\n class provides a \nmarkDirty(yesOrNo)\n function\nthat is just a simple setter for the internal dirty status.  The same\n\nisDirty()\n function from the \nStructure\n base class remains available,\nunchanged.\n\n\nFeedback\n\n\nTo make it easy to give feedback about \nOutputStructure\n instances, we\nprovide an instance method called \nfeedback()\n.  You can call\n\nX.feedback(Y)\n in any \nOutputStructure\n \nX\n, passing any JSON object \nY\n\ncontaining the feedback you wish to send, and it will delegate the work to\nthe \nInputStructure\n stored in \nX.origin\n, or do nothing if there is no such\nobject.  See \nthe API documentation for Input Structures\n\nfor further details on what that means.\n\n\nLabels\n\n\nOutputStructure\ns can have labels.  To make this as general as possible, we\nimplement it by giving each such structure a \nhasLabel(string)\n function\nthat returns true or false, whether the structure has \nstring\n as a label.\nThis lets us write label-checking functions that take into account whatever\nfreedom (or lack thereof) we choose, such as whether whitespace,\npunctuation, case, etc. are relevant.\n\n\nFrom any given \nOutputStructure\n \nS\n, you can call \nS.lookup(label)\n and it\nwill find the closest accessible structure in the Output Tree with that\n\nlabel\n.  To do the lookup in some other list, call\n\nOutputStructure.lookup(label,accessibles)\n; in that situation, it is\npresumed that the list should be searched in reverse, as if reading\nbackwards up through a document.", 
            "title": "Output Structures"
        }, 
        {
            "location": "/api-output-structures/#api-documentation-for-the-outputstructure-class-and-its-subclasses", 
            "text": "", 
            "title": "API Documentation for the OutputStructure Class and its Subclasses"
        }, 
        {
            "location": "/api-output-structures/#source-code", 
            "text": "The  OutputStructure  class  Unit tests of the  OutputStructure  class", 
            "title": "Source Code"
        }, 
        {
            "location": "/api-output-structures/#purpose", 
            "text": "For information on the generic notion of Structures, see the API documentation for the base  Structure  class .\nThat explains not only the concepts common to all Structures, but also how OutputStructure s fit into the bigger picture.  In this file, we cover the details specific to the  OutputStructure \nsubclass as well as its subclasses.  We break this document into sections,\none for each subclass of  OutputStructure , including  OutputStructure \nitself.", 
            "title": "Purpose"
        }, 
        {
            "location": "/api-output-structures/#the-outputstructure-class", 
            "text": "This class overrides none of the methods of its superclass, so you can refer\nto  the superclass API documentation  for information\nabout many of the class's features.  It adds the following features.", 
            "title": "The OutputStructure class"
        }, 
        {
            "location": "/api-output-structures/#dirtyclean-status", 
            "text": "In the Output Tree, the  dirty  flag of an  OutputStructure  signifies\nwhether that node in the tree needs to be revalidated (i.e., has changed\nsince its last validation, or something else that's relevant changed since\nits last validation).  Because the validation of one node in the Output Tree\nis independent of the validation of any other node, if a node is marked\ndirty, it is marked dirty in isolation.  Unlike  InputStructure s, we do not\npropagate dirty status up the ancestor chain.  Thus the  OutputStructure  class provides a  markDirty(yesOrNo)  function\nthat is just a simple setter for the internal dirty status.  The same isDirty()  function from the  Structure  base class remains available,\nunchanged.", 
            "title": "Dirty/Clean Status"
        }, 
        {
            "location": "/api-output-structures/#feedback", 
            "text": "To make it easy to give feedback about  OutputStructure  instances, we\nprovide an instance method called  feedback() .  You can call X.feedback(Y)  in any  OutputStructure   X , passing any JSON object  Y \ncontaining the feedback you wish to send, and it will delegate the work to\nthe  InputStructure  stored in  X.origin , or do nothing if there is no such\nobject.  See  the API documentation for Input Structures \nfor further details on what that means.", 
            "title": "Feedback"
        }, 
        {
            "location": "/api-output-structures/#labels", 
            "text": "OutputStructure s can have labels.  To make this as general as possible, we\nimplement it by giving each such structure a  hasLabel(string)  function\nthat returns true or false, whether the structure has  string  as a label.\nThis lets us write label-checking functions that take into account whatever\nfreedom (or lack thereof) we choose, such as whether whitespace,\npunctuation, case, etc. are relevant.  From any given  OutputStructure   S , you can call  S.lookup(label)  and it\nwill find the closest accessible structure in the Output Tree with that label .  To do the lookup in some other list, call OutputStructure.lookup(label,accessibles) ; in that situation, it is\npresumed that the list should be searched in reverse, as if reading\nbackwards up through a document.", 
            "title": "Labels"
        }, 
        {
            "location": "/api-phases/", 
            "text": "API Documentation for the LDE's Phases\n\n\nThe LDE processes the Input Tree into the Output Tree and also does some\nprocessing of the Output Tree as well.  This all happens in several phases\nthat proceed in sequence, each working with the output of the previous. We\ndocument those phases below.\n\n\nThis documentation is not yet complete, because the phases have not yet all\nbeen implemented.\n\n\nModification\n\n\nThe modification phase is the briefest.  It is implemented in the LDE's\n\nrunModification()\n phase in its API, documented \nhere\n.\n\n\nThat function loops through all \nInputModifier\n instances in the Input Tree\nand calls the \nupdateConnections()\n routine in each.  Each modifier should\ntake that opportunity to connect itself to the correct modification targets.\nThe reason for this is because those connections will govern, in the\nsubsequent interpretation phase, which expressions ask which modifiers to\nembed data in the expressions.  In order for the expressions to make those\nrequests correctly, the modifiers need to decide in the modification phase\nwhich expressions they should target.\n\n\nInterpretation\n\n\nThe interpretatin phase follows immediately after the modification phase;\nindeed, the modification phase terminates by passing control directly to the\ninterpretation phase.\n\n\nIn this phase, the contents of the Input Tree (which can be thought of as a\ngeneralized kind of syntax, representing anything the user wrote in the\nclient and the client passed on to the LDE) are \ninterpreted\n into the\nOutput Tree (which can be thought of as the usable mathematical meaning of\nthe user's content).  Thus this phase is like a compiler in computer\nscience, or an interpretation function in model theory; it maps syntax to\n(actionable) semantics.\n\n\nIt is implemented in the \nrunInterpretation()\n method of the LDE's API,\ndocumented \nhere\n.\n\n\nThat function runs \nrecursiveInterpret()\n on the root of the Input Tree, a\nfunction implemented in \nthe InputStructure class\n.\nThat function recursively traverses the Input Tree, runs the \ninterpret()\n\nfunction at each node, and assembles their results into the new Output Tree.\n\n\nSome types of policing are done to ensure that \nrecursiveInterpret()\n and\n\ninterpret()\n behave as they ought to, even if they are redefined in\nsubclasses not yet written.  For more information, see the errors that may\nbe generated as feedback, \ndocumented here\n.\n\n\nValidation\n\n\nThis phase is not yet implemented nor documented.", 
            "title": "Phases of processing"
        }, 
        {
            "location": "/api-phases/#api-documentation-for-the-ldes-phases", 
            "text": "The LDE processes the Input Tree into the Output Tree and also does some\nprocessing of the Output Tree as well.  This all happens in several phases\nthat proceed in sequence, each working with the output of the previous. We\ndocument those phases below.  This documentation is not yet complete, because the phases have not yet all\nbeen implemented.", 
            "title": "API Documentation for the LDE's Phases"
        }, 
        {
            "location": "/api-phases/#modification", 
            "text": "The modification phase is the briefest.  It is implemented in the LDE's runModification()  phase in its API, documented  here .  That function loops through all  InputModifier  instances in the Input Tree\nand calls the  updateConnections()  routine in each.  Each modifier should\ntake that opportunity to connect itself to the correct modification targets.\nThe reason for this is because those connections will govern, in the\nsubsequent interpretation phase, which expressions ask which modifiers to\nembed data in the expressions.  In order for the expressions to make those\nrequests correctly, the modifiers need to decide in the modification phase\nwhich expressions they should target.", 
            "title": "Modification"
        }, 
        {
            "location": "/api-phases/#interpretation", 
            "text": "The interpretatin phase follows immediately after the modification phase;\nindeed, the modification phase terminates by passing control directly to the\ninterpretation phase.  In this phase, the contents of the Input Tree (which can be thought of as a\ngeneralized kind of syntax, representing anything the user wrote in the\nclient and the client passed on to the LDE) are  interpreted  into the\nOutput Tree (which can be thought of as the usable mathematical meaning of\nthe user's content).  Thus this phase is like a compiler in computer\nscience, or an interpretation function in model theory; it maps syntax to\n(actionable) semantics.  It is implemented in the  runInterpretation()  method of the LDE's API,\ndocumented  here .  That function runs  recursiveInterpret()  on the root of the Input Tree, a\nfunction implemented in  the InputStructure class .\nThat function recursively traverses the Input Tree, runs the  interpret() \nfunction at each node, and assembles their results into the new Output Tree.  Some types of policing are done to ensure that  recursiveInterpret()  and interpret()  behave as they ought to, even if they are redefined in\nsubclasses not yet written.  For more information, see the errors that may\nbe generated as feedback,  documented here .", 
            "title": "Interpretation"
        }, 
        {
            "location": "/api-phases/#validation", 
            "text": "This phase is not yet implemented nor documented.", 
            "title": "Validation"
        }
    ]
}