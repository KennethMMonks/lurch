{
    "docs": [
        {
            "location": "/", 
            "text": "The Lurch Deductive Engine (LDE)\n\n\nThis documentation site contains the design of the LDE.\n\n\nWe will implement that design, and document it better as we go.\n\n\nUse the menu at the top of this site to find content.", 
            "title": "Home"
        }, 
        {
            "location": "/#the-lurch-deductive-engine-lde", 
            "text": "This documentation site contains the design of the LDE.  We will implement that design, and document it better as we go.  Use the menu at the top of this site to find content.", 
            "title": "The Lurch Deductive Engine (LDE)"
        }, 
        {
            "location": "/overview/", 
            "text": "LDE Design Overview\n\n\nThis page lists the design decisions made by the Lurch team to date\nregarding the LDE, with reasons and explanations for each.  This document\ncan be used as reference, and to guide development, but it may also be\nchanged as better ideas come along.\n\n\nElegance and Simplicity\n\n\nThese are of utmost importance, because\n\n\n\n\nthey make Lurch easier to explain to students or in an Advanced User's\n   Guide (AUG),\n\n\nthey make Lurch easier to test because it has fewer unusual corner cases\n   or special handling of odd circumstances,\n\n\nthey make Lurch easier to implement for the same reason, and\n\n\nthey make it easier for us to be confident that our designs are good,\n   because they're easier to hold in your head and grok all at once.\n\n\n\n\nFeedback and Validation\n\n\n\n\nThe primary purpose of the Lurch application is to give feedback to the\n   user about the work they type into their document.\n\n\nBecause this will often involve validating steps of work in a proof, we\n   may use the terms \"feedback\" and \"validation\" interchangeably, even\n   though technically validation is just a particular type of feedback\n   (though the most common type in our case).\n\n\nOne-Pass Validation (OPV)\n is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   does so by reprocessing every bit of meaningful content from scratch, in\n   one (large, possibly time-consuming) pass over the whole document.\n\n\nReal-Time Validation (RTV)\n is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   attempts to re-use as much information from previous validation as\n   possible, only updating those portions of it that need updating in\n   response to the specific change the user just made.  Thus RTV is\n   trickier to design and implement than OPV, but more efficient at\n   run-time.\n\n\nAn important concept for our test suite is that any RTV design can be\n   converted to an OPV design trivially, and then used for comparison\n   testing.  Simply replace all sophisticated RTV-style change event\n   handlers with OPV-style ones, that mark the entire document as needing\n   reprocessing.  Then any potential change that can be made to the user's\n   document can be run through each of these engines in parallel, and the\n   results compared for equivalence.\n\n\nNote that the choice of OPV vs. RTV is independent of the choice of\n   manual validation vs. automatic validation.  RTV certainly makes\n   automatic validation nicer, and thus makes manual validation less\n   appealing, but you could choose anything from among\n   \n\\{\\text{OPV},\\text{RTV}\\}\\times\\{\\text{auto},\\text{manual}\\}\n.\n\n\n\n\nLDE and UI\n\n\n\n\nWe have a paradigm in which the UI is exactly that (user interface) and\n   the LDE (Lurch Deductive Engine) is the brain that operates in one or\n   more background threads, processing what the user has given the app\n   through the UI.\n\n\nWe aim to implement every feature in the LDE if possible, but implement\n   in the UI only those features that can't be implemented in the LDE.\n   Here, \"if possible\" means that it would not break the model-view\n   paradigm to implement it in the LDE (i.e., the LDE wouldn't need to\n   speak HTML).  Reasons for this:\n\n\nThe LDE will be implemented in pure JS, no DOM, so that it can be\n  used in a WebWorker and in the unit testing suite.\n\n\nTherefore the bigger the LDE is, the more of our code has been\n  subject to rigorous unit tests.\n\n\nAnd the bigger the LDE is, the more of our code is run out of the UX\n  thread, and thus the more responsive our app is.\n\n\n\n\n\n\nThe decisions recorded here are almost entirely about the design of the\n   LDE, not the UI.\n\n\n\n\nStructures\n\n\n\n\nDefine a \nstructure\n to be the basic unit of meaning in the LDE.\n\n\nThis includes document-level structures such as a section,\n  subsection, proof, subproof, etc., which are analogous to block-level\n  items like DIV or P in HTML, and \n\\begin{X}...\\end{X}\n in LaTeX.\n\n\nBut it also includes inline structures (SPANs in HTML, \n\\foo{...}\n or\n  \n$...$\n in LaTeX).\n\n\nStructures can be nested acyclically.\n\n\n\n\n\n\nExamples of types of structures that we may choose to define later:\n\n\nProofs/Subproofs, with one specific flavor of it being the kind that\n  declares a variable first\n\n\nDefinitions of rules, axioms, language rules\n\n\nFormal systems (or \"mathematical topics\")\n\n\nTheorems and pairing of them with proofs\n\n\nExpressions\n\n\nMaybe variables will be declared by based on placing a variable\n  inside an expression by itself, at the head of a variable declaration\n  subproof, or maybe by creating a new structure type for variable\n  declarations, or maybe something else\n\n\nHomework problems\n\n\nExamples (an environment in which anything you declare ends its scope\n  at the end of the example, no matter what it was)\n\n\n\n\n\n\nThe set of structure types should equal the set of common mathematical\n   structures that mathematics students should be learning anyway, and they\n   should behave the same in Lurch as in mathematics.  This ensures that\n   Lurch doesn't add to the mathematics learning curve in this sense.\n\n\nNot every structure is permitted to contain every other type of\n   structure.  But such rules are enforced through validation, which we\n   will not be defining for some time yet, so this comment is just a\n   preview of what's to come.  For instance, expressions can contain only\n   other expressions.\n\n\nAt some later point, we may care about the meanings of structures, so\n   that they can be used as premises in proofs.  At such a time, we will\n   ensure that a structure's meaning includes the unjustified steps in the\n   structure (which function as premises), the final step in the structure\n   (which functions as its conclusion), any variables declared within it\n   (which are bound in it), and so on, but it is not necessary to define\n   those details yet.  I mention them here merely so that the idea is not\n   lost.\n\n\n\n\nAccessibility\n\n\n\n\nA structure A is accessible to a structure B if some ancestor structure\n   of B (possibly B itself) is a sibling of A, but A is the (strictly)\n   earlier of the two siblings within their parent structure.\n\n\nEquivalently, we can speak of \"scope\" rather than accessibility.  The\n   scope of a structure A is all later siblings of A in the same parent,\n   along with all their descendants.  Thus B is in the scope of A iff A is\n   accessible to B.\n\n\n\n\nAttributes\n\n\n\n\nEvery structure contains a key-value dictionary called \nexternal\n   attributes,\n which are read-only from the point of view of the LDE, and\n   are read-write from the point of view of the UI.  They are called\n   \"external\" because, from the LDE's point of view, they come from\n   elsewhere (the UI).\n\n\nEvery structure contains a key-value dictionary called \ncomputed\n   attributes,\n which are read-only from the point of view of the UI, and\n   are read-write from the point of view of the LDE.  They are called\n   \"computed\" because the LDE's job is to compute stuff, which it stores in\n   these attributes.\n\n\nThese two dictionaries are disjoint.  It is possible for a single key k\n   to have one value in the one dictionary, and another value in the other\n   dictionary.\n\n\n\n\nDocument\n\n\n\n\nThe entire document will be represented to the LDE as a single\n   structure, usually with a nonzero number of inner structures.\n\n\nWe call the representation of the entire document as a structure the LDE\n   Document, a phrase chosen to connote \"the LDE's view of the document,\n   not the one the user sees in the UI.\"\n\n\nOne main job of the UI is to convert from what the user sees into the\n   LDE Document.\n\n\nSo to the list of structure types above, add \"Document.\"\n\n\nThe entire LDE Document data structure will live inside the LDE module.\n   In the main Lurch app, this implies that the LDE Document will be stored\n   in the background thread where the LDE runs, not in the UI.  Thus the UI\n   will communicate across threads to create the LDE Document.  Details on\n   this later.\n\n\n\n\nSome brief UI comments\n\n\n\n\nMost of the purpose of the UI will be to convert the HTML document the\n   user sees into the LDE Document the LDE processes, then to show the user\n   in the HTML document and feedback the LDE sends back.\n\n\nIn service to that purpose, the UI contains many (largely independent\n  and usually small) features for encoding the HTML document into the\n  LDE Document.\n\n\nExamples include conventions for processing groups, connections,\n  numbered lists, section headings, finding meaning in text through\n  regular expressions, and the meanings of various LaTeX-like\n  \n\\shortcuts\n.\n\n\nA document author chooses which subset of these features to enable by\n  making choices in the document settings dialog.  Those settings are\n  stored in document metadata, and propagate to dependencies (defined\n  below).\n\n\nThe UI will have very little hard-coded (i.e., non-customizable)\n  procedures for interpreting the HTML document into the LDE document;\n  the settings above are highly choosable by the user.\n\n\nThe only constrained interpretation conventions (i.e., few or no\n  options for changing the interpretation) would be those that have\n  mathematical names, such as \"proof,\" which have a specific meaning\n  that it would be educationally counterproductive to interpret another\n  way.\n\n\nIn addition, we may choose a specific set of document settings to use\n  throughout the standard libraries that ship with Lurch, to show best\n  practices and help users with consistency and predictability.\n\n\n\n\n\n\nOther UI details:\n\n\nBecause we have a UI that allows users to make connections among\n  groups, the structures in the hierarchy may include, among their\n  external attributes, a binary, edge-labeled multigraph.  (Note that\n  this does not require that every connection in the HTML document\n  become two Structures in the LDE Document with attributes connecting\n  them.  Nor does it stipulate that some concept--such as\n  labeling--that we might decide to represent as part of this\n  multigraph can't also be represented sometimes in another way as\n  well.)\n\n\nIf we require the LDE to send a signal when validation completes,\n  then we can make a UI setting of whether to show feedback as the\n  feedback arrives, or only after the \"all validation complete\" signal\n  arrives (and thus feedback has stabilized).\n\n\n\n\n\n\n\n\nStructures are OOP Objects\n\n\n\n\nA structure exposes a set of data and methods about its internal state\n   to the rest of the app, in much the same way as Objects in OOP do, with\n   the type of structure (from the list above, e.g., Theorem or Example)\n   functioning as the \"class\" of the Object.\n\n\nSome methods in a structure will be time-intensive to run, and thus\n   should use an asynchronous paradigm, queueing the tasks for running when\n   the LDE thread has time.  The most time-intensive tasks, such as\n   matching and parsing, may be delegated to yet other background threads\n   by the LDE thread.\n\n\n\n\nExporting data from structures\n\n\n\n\nHere is an important example method that all structures should have\n   (though each class may implement it differently):\n\n\nA method that reports which structures (usually child structures of\n  A), if any, are to be made accessible to any structure B in the scope\n  of A (thus changing the normal scoping rules).\n\n\nThe flexibility inherent in the vagueness of this exporting notion is\n  useful.  For instance, a single theorem in the document might be\n  encoded in the LDE document as having many children, some of which\n  are its various interpretations as a rule of inference, and export\n  them all, so that any can be used/cited later.\n\n\nNote that the exports method need not copy child structures directly\n  for exporting.  It may combine/manipulate/compute structures to\n  export based on its children in any way.  Thus \"scope\" is a simple\n  and clean definition, which this function sort of indirectly extends.\n\n\n\n\n\n\nWe will define much of the functionality of the LDE as the various\n   structures in the document calling methods in one another, which is\n   simple and elegant.  But it requires that we carefully track and cache\n   the clean/dirty status of each structure, to retain efficiency.\n\n\n\n\nDependencies as a special case\n\n\n\n\nThe current paradigm (already implemented) in webLurch is that a\n   dependency must specify what data it exports to any document that\n   depends on it.\n\n\nSuch data will be stored in the dependency document's metadata, so that\n   documents depending on it can easily import it.  It will include\n   anything that the dependency imported from its dependencies, and so on\n   to arbitrary depth.\n\n\nBecause we now require every structure to know what it exports to later\n   structures, the question of what a document exports is simply a special\n   case of that.  The document is itself a structure, and thus it can\n   already answer the \"what does this document export?\" question.\n\n\nRecall from above that one of the pieces of data that a document will\n   export is its document settings, as described earlier.\n\n\n\n\nDesign Phases\n\n\n\n\nThe question, \"Which structure should be designed first?\" is tricky\n   because each structure is rather complex, and they're rather\n   interdependent.\n\n\nOne approach would be to design each structure incrementally, adding\n   features in phases.\n\n\nThus we might begin with an LDE implementation that has just a few\n   features for a few structure types, and yet is sufficient for building\n   very simply Lurch libraries.\n\n\nThis lets us build familiarity and knowledge as we do the design, so\n   we're better at it by the time we get to the hard stuff.\n\n\nPhases 2, 3, and so on can add features and structure types, thus\n   enabling more and more sophisticated Lurch libraries, until we have\n   reached the level of power that supports a first proof course.\n\n\n\n\nSee other documentation on this site for the contents of each design phase.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#lde-design-overview", 
            "text": "This page lists the design decisions made by the Lurch team to date\nregarding the LDE, with reasons and explanations for each.  This document\ncan be used as reference, and to guide development, but it may also be\nchanged as better ideas come along.", 
            "title": "LDE Design Overview"
        }, 
        {
            "location": "/overview/#elegance-and-simplicity", 
            "text": "These are of utmost importance, because   they make Lurch easier to explain to students or in an Advanced User's\n   Guide (AUG),  they make Lurch easier to test because it has fewer unusual corner cases\n   or special handling of odd circumstances,  they make Lurch easier to implement for the same reason, and  they make it easier for us to be confident that our designs are good,\n   because they're easier to hold in your head and grok all at once.", 
            "title": "Elegance and Simplicity"
        }, 
        {
            "location": "/overview/#feedback-and-validation", 
            "text": "The primary purpose of the Lurch application is to give feedback to the\n   user about the work they type into their document.  Because this will often involve validating steps of work in a proof, we\n   may use the terms \"feedback\" and \"validation\" interchangeably, even\n   though technically validation is just a particular type of feedback\n   (though the most common type in our case).  One-Pass Validation (OPV)  is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   does so by reprocessing every bit of meaningful content from scratch, in\n   one (large, possibly time-consuming) pass over the whole document.  Real-Time Validation (RTV)  is a paradigm in which, whenever the app\n   needs to update feedback in response to changes made by the user, it\n   attempts to re-use as much information from previous validation as\n   possible, only updating those portions of it that need updating in\n   response to the specific change the user just made.  Thus RTV is\n   trickier to design and implement than OPV, but more efficient at\n   run-time.  An important concept for our test suite is that any RTV design can be\n   converted to an OPV design trivially, and then used for comparison\n   testing.  Simply replace all sophisticated RTV-style change event\n   handlers with OPV-style ones, that mark the entire document as needing\n   reprocessing.  Then any potential change that can be made to the user's\n   document can be run through each of these engines in parallel, and the\n   results compared for equivalence.  Note that the choice of OPV vs. RTV is independent of the choice of\n   manual validation vs. automatic validation.  RTV certainly makes\n   automatic validation nicer, and thus makes manual validation less\n   appealing, but you could choose anything from among\n    \\{\\text{OPV},\\text{RTV}\\}\\times\\{\\text{auto},\\text{manual}\\} .", 
            "title": "Feedback and Validation"
        }, 
        {
            "location": "/overview/#lde-and-ui", 
            "text": "We have a paradigm in which the UI is exactly that (user interface) and\n   the LDE (Lurch Deductive Engine) is the brain that operates in one or\n   more background threads, processing what the user has given the app\n   through the UI.  We aim to implement every feature in the LDE if possible, but implement\n   in the UI only those features that can't be implemented in the LDE.\n   Here, \"if possible\" means that it would not break the model-view\n   paradigm to implement it in the LDE (i.e., the LDE wouldn't need to\n   speak HTML).  Reasons for this:  The LDE will be implemented in pure JS, no DOM, so that it can be\n  used in a WebWorker and in the unit testing suite.  Therefore the bigger the LDE is, the more of our code has been\n  subject to rigorous unit tests.  And the bigger the LDE is, the more of our code is run out of the UX\n  thread, and thus the more responsive our app is.    The decisions recorded here are almost entirely about the design of the\n   LDE, not the UI.", 
            "title": "LDE and UI"
        }, 
        {
            "location": "/overview/#structures", 
            "text": "Define a  structure  to be the basic unit of meaning in the LDE.  This includes document-level structures such as a section,\n  subsection, proof, subproof, etc., which are analogous to block-level\n  items like DIV or P in HTML, and  \\begin{X}...\\end{X}  in LaTeX.  But it also includes inline structures (SPANs in HTML,  \\foo{...}  or\n   $...$  in LaTeX).  Structures can be nested acyclically.    Examples of types of structures that we may choose to define later:  Proofs/Subproofs, with one specific flavor of it being the kind that\n  declares a variable first  Definitions of rules, axioms, language rules  Formal systems (or \"mathematical topics\")  Theorems and pairing of them with proofs  Expressions  Maybe variables will be declared by based on placing a variable\n  inside an expression by itself, at the head of a variable declaration\n  subproof, or maybe by creating a new structure type for variable\n  declarations, or maybe something else  Homework problems  Examples (an environment in which anything you declare ends its scope\n  at the end of the example, no matter what it was)    The set of structure types should equal the set of common mathematical\n   structures that mathematics students should be learning anyway, and they\n   should behave the same in Lurch as in mathematics.  This ensures that\n   Lurch doesn't add to the mathematics learning curve in this sense.  Not every structure is permitted to contain every other type of\n   structure.  But such rules are enforced through validation, which we\n   will not be defining for some time yet, so this comment is just a\n   preview of what's to come.  For instance, expressions can contain only\n   other expressions.  At some later point, we may care about the meanings of structures, so\n   that they can be used as premises in proofs.  At such a time, we will\n   ensure that a structure's meaning includes the unjustified steps in the\n   structure (which function as premises), the final step in the structure\n   (which functions as its conclusion), any variables declared within it\n   (which are bound in it), and so on, but it is not necessary to define\n   those details yet.  I mention them here merely so that the idea is not\n   lost.", 
            "title": "Structures"
        }, 
        {
            "location": "/overview/#accessibility", 
            "text": "A structure A is accessible to a structure B if some ancestor structure\n   of B (possibly B itself) is a sibling of A, but A is the (strictly)\n   earlier of the two siblings within their parent structure.  Equivalently, we can speak of \"scope\" rather than accessibility.  The\n   scope of a structure A is all later siblings of A in the same parent,\n   along with all their descendants.  Thus B is in the scope of A iff A is\n   accessible to B.", 
            "title": "Accessibility"
        }, 
        {
            "location": "/overview/#attributes", 
            "text": "Every structure contains a key-value dictionary called  external\n   attributes,  which are read-only from the point of view of the LDE, and\n   are read-write from the point of view of the UI.  They are called\n   \"external\" because, from the LDE's point of view, they come from\n   elsewhere (the UI).  Every structure contains a key-value dictionary called  computed\n   attributes,  which are read-only from the point of view of the UI, and\n   are read-write from the point of view of the LDE.  They are called\n   \"computed\" because the LDE's job is to compute stuff, which it stores in\n   these attributes.  These two dictionaries are disjoint.  It is possible for a single key k\n   to have one value in the one dictionary, and another value in the other\n   dictionary.", 
            "title": "Attributes"
        }, 
        {
            "location": "/overview/#document", 
            "text": "The entire document will be represented to the LDE as a single\n   structure, usually with a nonzero number of inner structures.  We call the representation of the entire document as a structure the LDE\n   Document, a phrase chosen to connote \"the LDE's view of the document,\n   not the one the user sees in the UI.\"  One main job of the UI is to convert from what the user sees into the\n   LDE Document.  So to the list of structure types above, add \"Document.\"  The entire LDE Document data structure will live inside the LDE module.\n   In the main Lurch app, this implies that the LDE Document will be stored\n   in the background thread where the LDE runs, not in the UI.  Thus the UI\n   will communicate across threads to create the LDE Document.  Details on\n   this later.", 
            "title": "Document"
        }, 
        {
            "location": "/overview/#some-brief-ui-comments", 
            "text": "Most of the purpose of the UI will be to convert the HTML document the\n   user sees into the LDE Document the LDE processes, then to show the user\n   in the HTML document and feedback the LDE sends back.  In service to that purpose, the UI contains many (largely independent\n  and usually small) features for encoding the HTML document into the\n  LDE Document.  Examples include conventions for processing groups, connections,\n  numbered lists, section headings, finding meaning in text through\n  regular expressions, and the meanings of various LaTeX-like\n   \\shortcuts .  A document author chooses which subset of these features to enable by\n  making choices in the document settings dialog.  Those settings are\n  stored in document metadata, and propagate to dependencies (defined\n  below).  The UI will have very little hard-coded (i.e., non-customizable)\n  procedures for interpreting the HTML document into the LDE document;\n  the settings above are highly choosable by the user.  The only constrained interpretation conventions (i.e., few or no\n  options for changing the interpretation) would be those that have\n  mathematical names, such as \"proof,\" which have a specific meaning\n  that it would be educationally counterproductive to interpret another\n  way.  In addition, we may choose a specific set of document settings to use\n  throughout the standard libraries that ship with Lurch, to show best\n  practices and help users with consistency and predictability.    Other UI details:  Because we have a UI that allows users to make connections among\n  groups, the structures in the hierarchy may include, among their\n  external attributes, a binary, edge-labeled multigraph.  (Note that\n  this does not require that every connection in the HTML document\n  become two Structures in the LDE Document with attributes connecting\n  them.  Nor does it stipulate that some concept--such as\n  labeling--that we might decide to represent as part of this\n  multigraph can't also be represented sometimes in another way as\n  well.)  If we require the LDE to send a signal when validation completes,\n  then we can make a UI setting of whether to show feedback as the\n  feedback arrives, or only after the \"all validation complete\" signal\n  arrives (and thus feedback has stabilized).", 
            "title": "Some brief UI comments"
        }, 
        {
            "location": "/overview/#structures-are-oop-objects", 
            "text": "A structure exposes a set of data and methods about its internal state\n   to the rest of the app, in much the same way as Objects in OOP do, with\n   the type of structure (from the list above, e.g., Theorem or Example)\n   functioning as the \"class\" of the Object.  Some methods in a structure will be time-intensive to run, and thus\n   should use an asynchronous paradigm, queueing the tasks for running when\n   the LDE thread has time.  The most time-intensive tasks, such as\n   matching and parsing, may be delegated to yet other background threads\n   by the LDE thread.", 
            "title": "Structures are OOP Objects"
        }, 
        {
            "location": "/overview/#exporting-data-from-structures", 
            "text": "Here is an important example method that all structures should have\n   (though each class may implement it differently):  A method that reports which structures (usually child structures of\n  A), if any, are to be made accessible to any structure B in the scope\n  of A (thus changing the normal scoping rules).  The flexibility inherent in the vagueness of this exporting notion is\n  useful.  For instance, a single theorem in the document might be\n  encoded in the LDE document as having many children, some of which\n  are its various interpretations as a rule of inference, and export\n  them all, so that any can be used/cited later.  Note that the exports method need not copy child structures directly\n  for exporting.  It may combine/manipulate/compute structures to\n  export based on its children in any way.  Thus \"scope\" is a simple\n  and clean definition, which this function sort of indirectly extends.    We will define much of the functionality of the LDE as the various\n   structures in the document calling methods in one another, which is\n   simple and elegant.  But it requires that we carefully track and cache\n   the clean/dirty status of each structure, to retain efficiency.", 
            "title": "Exporting data from structures"
        }, 
        {
            "location": "/overview/#dependencies-as-a-special-case", 
            "text": "The current paradigm (already implemented) in webLurch is that a\n   dependency must specify what data it exports to any document that\n   depends on it.  Such data will be stored in the dependency document's metadata, so that\n   documents depending on it can easily import it.  It will include\n   anything that the dependency imported from its dependencies, and so on\n   to arbitrary depth.  Because we now require every structure to know what it exports to later\n   structures, the question of what a document exports is simply a special\n   case of that.  The document is itself a structure, and thus it can\n   already answer the \"what does this document export?\" question.  Recall from above that one of the pieces of data that a document will\n   export is its document settings, as described earlier.", 
            "title": "Dependencies as a special case"
        }, 
        {
            "location": "/overview/#design-phases", 
            "text": "The question, \"Which structure should be designed first?\" is tricky\n   because each structure is rather complex, and they're rather\n   interdependent.  One approach would be to design each structure incrementally, adding\n   features in phases.  Thus we might begin with an LDE implementation that has just a few\n   features for a few structure types, and yet is sufficient for building\n   very simply Lurch libraries.  This lets us build familiarity and knowledge as we do the design, so\n   we're better at it by the time we get to the hard stuff.  Phases 2, 3, and so on can add features and structure types, thus\n   enabling more and more sophisticated Lurch libraries, until we have\n   reached the level of power that supports a first proof course.   See other documentation on this site for the contents of each design phase.", 
            "title": "Design Phases"
        }, 
        {
            "location": "/phase0-structures/", 
            "text": "LDE Design Phase 0: Structures\n\n\nAll the later phases will actually implement stuff that we could use to\nmake real documents and libraries.  This one doesn't, so it's called Phase\n0.\n\n\nIn this phase, we just design the generic Structure class on which everything else will depend, and the infrastructure of the LDE itself.\n\n\nAt the end of this phase, we could write unit tests of the whole Structure class and its LDE context, thus guaranteeing that all later phases rest on a good foundation.\n\n\nMethods in the Structure class\n\n\n\n\nS.setComputedAttribute(key,value)\n caches a computed value under a\n   certain key\n\n\nOne important example of a computed attribute:\n\n\nS.setComputedAttribute(\"feedback\",obj)\n tells the UI the type of\n  feedback it should show for structure S, with obj having these keys:\n\n\nresult: a string, either \"valid\" or \"invalid\" or \"indeterminate\"\n\n\nmessage: a string, the message should be shown on hover of the\n  feedback indicator\n\n\nsection: (optional) which character (or range of characters) are\n  the specific ones on which the feedback focuses.\n\n\nFor instance, if something doesn't parse, you might want to\n  point out where it failed.\n\n\nOr if an expression parses into many steps of work, each of\n  which gets validated separately, then the feedback needs to\n  be localized.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS.compute(key1,key2,...)\n runs whatever function is necessary to\n   compute and store the attributes for the keys.\n\n\nIt should usually be obvious what this is from context, like if S has\n  a function \nS.meaning()\n and we say \nS.compute(\"meaning\")\n that means\n  run \nS.setComputedAttribute(\"meaning\",S.meaning())\n.\n\n\nBut more complex examples are possible, and each structure type is in\n  charge of implementing \ncompute()\n in the appropriate way.\n\n\n\n\n\n\nS.clearComputedAttributes(key1,key2,...)\n removes the computed values;\n   calling it with no arguments removes all computed values\n\n\nS.getComputedAttribute(key)\n fetches the computed attribute value, or\n   returns undefined if it's not stored\n\n\nS.properties()\n looks at the set of other structures that connect to S\n   via arrows, and forms a dictionary of name=value pairs, the \"properties\"\n   of S.\n\n\nS.isAccessibleTo(S')\n returns true or false, implementing the\n   accessibility relation defined earlier.\n\n\nS.findCited(n)\n finds the first structure S' accessible to S with\n   name=n in \nS'.attributes()\n, or undefined if there is no such structure\n   S'.\n\n\nS.whatCitesMe()\n finds all structures S' in the scope of S with\n   a=\nS.attributes().name\n in \nS'.attributes()\n, with a being one of the\n   keys we use for citation, such as \"reason\" or \"premise\" and so on.\n\n\nThere may be a need later to create other accessibility-related\n   routines, such as \nS.allAccessibleToMe()\n or \nS.myScope()\n or\n   \nS.allAccessibleSatisfying(P)\n etc.\n\n\nS.wasInserted()\n is a function that the UI will call in a brand new\n   structure as soon as it is inserted into the document.  Each structure\n   type may implement this function to do whatever it feels is necessary to\n   initialize its internal data and notify any nearby nodes in the LDE\n   Document about its arrival.  Some structure types may choose to leave\n   this as an empty function.\n\n\nS.wasRemoved(parent,index)\n is a function that the UI will call in a\n   structure the moment it is deleted from the document (but not yet\n   deleted from JavaScript memory).  The first parameter will be the former\n   parent structure (which will always exist, since the root of the LDE\n   Document can't be deleted) and the index that S formerly had within that\n   parent.  Similarly, each structure type can implement this as it sees\n   fit, including doing nothing.  Note that replacing one structure with\n   another will yield a call to \nS.wasRemoved()\n in the one structure and\n   \nS.wasInserted()\n in the other.\n\n\nS.wasChanged()\n is a function that the UI will call in a structure if\n   something about the structure changed (such as one of its attributes or\n   the contents of an atomic structure)\n\n\nS.text()\n returns the contents of S as plain text\n\n\nS.children()\n yields an ordered array of structures immediately\n  inside S\n\n\nS.parent()\n yields the parent structure of S, or undefined if S is\n  the LDE Document root\n\n\n\n\n\n\n\n\nLDE in general\n\n\nWhen the LDE is loaded into memory it will:\n\n\n\n\nCreate a global Structure that is the LDE Document.  It will be a\n   generic Structure, not a subclass.  It will have no children; they\n   can be added later.  That is, it starts as a one-node tree, root only.\n\n\nEstablish a global mapping from unique Structure IDs to the instances\n   that have those IDs\n\n\nDefines a global function for deserializing Structure instances (or\n   subclass instances) from JSON data\n\n\nIf it detects that it is being run in a background thread, it will\n   set up listeners for messages from the parent thread.  These\n   listeners will handle messages of three types:\n\n\nInsert a new subtree.\n\n\nThe message must include the unique ID of the parent, the\n  index at which the subtree will be inserted, and all the data\n  defining the subtree (serialized in JSON form, as required\n  for transmission to JavaScript background threads).\n\n\nIf the Structure (once it's deserialized) doesn't have an ID,\n  give it a new, unique one as determined by the global\n  mapping, and insert the new (id,instance) pair into that\n  mapping\n\n\n\n\n\n\nDelete an existing subtree.  The message must include the unique\n  ID of the tree to delete.  Remove it from the global ID mapping\n  as well and erase its ID attribute.\n\n\nReplace a subtree with a new one.  The message must include the\n  unique ID of the tree to replace and the data defining the\n  replacement (serialized as just described).  Remove the replaced\n  one from the global ID mapping as well and erase its ID attribute.\n\n\n\n\n\n\nEven if it is not being run in a background thread (but perhaps was\n   loaded as a module in some command-line app, for instance) it will\n   still expose insert, delete, and replace functions as part of the\n   module's API.\n\n\nWe will call any kind of insertion, removal, or replacement of\n   subtrees of the LDE Document a change event, whether it happened via\n   a message from a parent thread or as a function call to the LDE as a\n   module in a larger app.\n\n\n\n\nNotation in code\n\n\nEnsure that the Structure (and, later, other subclass) constructors are\nsophisticated enough to help us build LDE Documents easily in the unit\ntesting suite, like so:\n\n\nStructure(\n    FormalSystem(\n        Rule(\n            \nfunction ( step ) { return { valid: step.text().length \n 5, message: 'Boy is this silly.' }; }\n,\n        ).attr( { name : \nsilly rule\n } )\n    ),\n    AtomicExpression( \nyay\n ).attr( { id : 1 } ),\n    AtomicExpression( \nsilly rule\n ).attr( { \noutgoing edges\n : [ { targetId : 1, type : \nreason\n } ] ),\n    AtomicExpression( \noh rats\n ).attr( { id : 2 } ),\n    AtomicExpression( \nsilly rule\n ).attr( { \noutgoing edges\n : [ { targetId : 2, type : \nreason\n } ] )\n)\n\n\n\n\nor even\n\n\nStructure(\n    FormalSystem(\n        Rule(\n            \nfunction ( step ) { return { valid: step.text().length \n 5, message: 'Boy is this silly.' }; }\n,\n        ).attr( { name : \nsilly rule\n } )\n    ),\n    AtomicExpression( \nyay\n ).attr( { id : 1 } ),\n    AtomicExpression( \nsilly rule\n ).attr( { \nreason for\n : 1 } ),\n    AtomicExpression( \noh rats\n ).attr( { id : 2 } ),\n    AtomicExpression( \nsilly rule\n ).attr( { \nreason for\n : 2 } )\n)\n\n\n\n\nor even\n\n\nStructure(\n    FormalSystem(\n        Rule(\n            \nfunction ( step ) { return { valid: step.text().length \n 5, message: 'Boy is this silly.' }; }\n,\n        ).attr( { name : \nsilly rule\n } )\n    ),\n    AtomicExpression( \nyay\n ),\n    AtomicExpression( \nsilly rule\n ).attr( { \nreason for\n : \nprevious\n } ),\n    AtomicExpression( \noh rats\n ),\n    AtomicExpression( \nsilly rule\n ).attr( { \nreason for\n : \nprevious\n } )\n)", 
            "title": "Phase 0, Structures"
        }, 
        {
            "location": "/phase0-structures/#lde-design-phase-0-structures", 
            "text": "All the later phases will actually implement stuff that we could use to\nmake real documents and libraries.  This one doesn't, so it's called Phase\n0.  In this phase, we just design the generic Structure class on which everything else will depend, and the infrastructure of the LDE itself.  At the end of this phase, we could write unit tests of the whole Structure class and its LDE context, thus guaranteeing that all later phases rest on a good foundation.", 
            "title": "LDE Design Phase 0: Structures"
        }, 
        {
            "location": "/phase0-structures/#methods-in-the-structure-class", 
            "text": "S.setComputedAttribute(key,value)  caches a computed value under a\n   certain key  One important example of a computed attribute:  S.setComputedAttribute(\"feedback\",obj)  tells the UI the type of\n  feedback it should show for structure S, with obj having these keys:  result: a string, either \"valid\" or \"invalid\" or \"indeterminate\"  message: a string, the message should be shown on hover of the\n  feedback indicator  section: (optional) which character (or range of characters) are\n  the specific ones on which the feedback focuses.  For instance, if something doesn't parse, you might want to\n  point out where it failed.  Or if an expression parses into many steps of work, each of\n  which gets validated separately, then the feedback needs to\n  be localized.        S.compute(key1,key2,...)  runs whatever function is necessary to\n   compute and store the attributes for the keys.  It should usually be obvious what this is from context, like if S has\n  a function  S.meaning()  and we say  S.compute(\"meaning\")  that means\n  run  S.setComputedAttribute(\"meaning\",S.meaning()) .  But more complex examples are possible, and each structure type is in\n  charge of implementing  compute()  in the appropriate way.    S.clearComputedAttributes(key1,key2,...)  removes the computed values;\n   calling it with no arguments removes all computed values  S.getComputedAttribute(key)  fetches the computed attribute value, or\n   returns undefined if it's not stored  S.properties()  looks at the set of other structures that connect to S\n   via arrows, and forms a dictionary of name=value pairs, the \"properties\"\n   of S.  S.isAccessibleTo(S')  returns true or false, implementing the\n   accessibility relation defined earlier.  S.findCited(n)  finds the first structure S' accessible to S with\n   name=n in  S'.attributes() , or undefined if there is no such structure\n   S'.  S.whatCitesMe()  finds all structures S' in the scope of S with\n   a= S.attributes().name  in  S'.attributes() , with a being one of the\n   keys we use for citation, such as \"reason\" or \"premise\" and so on.  There may be a need later to create other accessibility-related\n   routines, such as  S.allAccessibleToMe()  or  S.myScope()  or\n    S.allAccessibleSatisfying(P)  etc.  S.wasInserted()  is a function that the UI will call in a brand new\n   structure as soon as it is inserted into the document.  Each structure\n   type may implement this function to do whatever it feels is necessary to\n   initialize its internal data and notify any nearby nodes in the LDE\n   Document about its arrival.  Some structure types may choose to leave\n   this as an empty function.  S.wasRemoved(parent,index)  is a function that the UI will call in a\n   structure the moment it is deleted from the document (but not yet\n   deleted from JavaScript memory).  The first parameter will be the former\n   parent structure (which will always exist, since the root of the LDE\n   Document can't be deleted) and the index that S formerly had within that\n   parent.  Similarly, each structure type can implement this as it sees\n   fit, including doing nothing.  Note that replacing one structure with\n   another will yield a call to  S.wasRemoved()  in the one structure and\n    S.wasInserted()  in the other.  S.wasChanged()  is a function that the UI will call in a structure if\n   something about the structure changed (such as one of its attributes or\n   the contents of an atomic structure)  S.text()  returns the contents of S as plain text  S.children()  yields an ordered array of structures immediately\n  inside S  S.parent()  yields the parent structure of S, or undefined if S is\n  the LDE Document root", 
            "title": "Methods in the Structure class"
        }, 
        {
            "location": "/phase0-structures/#lde-in-general", 
            "text": "When the LDE is loaded into memory it will:   Create a global Structure that is the LDE Document.  It will be a\n   generic Structure, not a subclass.  It will have no children; they\n   can be added later.  That is, it starts as a one-node tree, root only.  Establish a global mapping from unique Structure IDs to the instances\n   that have those IDs  Defines a global function for deserializing Structure instances (or\n   subclass instances) from JSON data  If it detects that it is being run in a background thread, it will\n   set up listeners for messages from the parent thread.  These\n   listeners will handle messages of three types:  Insert a new subtree.  The message must include the unique ID of the parent, the\n  index at which the subtree will be inserted, and all the data\n  defining the subtree (serialized in JSON form, as required\n  for transmission to JavaScript background threads).  If the Structure (once it's deserialized) doesn't have an ID,\n  give it a new, unique one as determined by the global\n  mapping, and insert the new (id,instance) pair into that\n  mapping    Delete an existing subtree.  The message must include the unique\n  ID of the tree to delete.  Remove it from the global ID mapping\n  as well and erase its ID attribute.  Replace a subtree with a new one.  The message must include the\n  unique ID of the tree to replace and the data defining the\n  replacement (serialized as just described).  Remove the replaced\n  one from the global ID mapping as well and erase its ID attribute.    Even if it is not being run in a background thread (but perhaps was\n   loaded as a module in some command-line app, for instance) it will\n   still expose insert, delete, and replace functions as part of the\n   module's API.  We will call any kind of insertion, removal, or replacement of\n   subtrees of the LDE Document a change event, whether it happened via\n   a message from a parent thread or as a function call to the LDE as a\n   module in a larger app.", 
            "title": "LDE in general"
        }, 
        {
            "location": "/phase0-structures/#notation-in-code", 
            "text": "Ensure that the Structure (and, later, other subclass) constructors are\nsophisticated enough to help us build LDE Documents easily in the unit\ntesting suite, like so:  Structure(\n    FormalSystem(\n        Rule(\n             function ( step ) { return { valid: step.text().length   5, message: 'Boy is this silly.' }; } ,\n        ).attr( { name :  silly rule  } )\n    ),\n    AtomicExpression(  yay  ).attr( { id : 1 } ),\n    AtomicExpression(  silly rule  ).attr( {  outgoing edges  : [ { targetId : 1, type :  reason  } ] ),\n    AtomicExpression(  oh rats  ).attr( { id : 2 } ),\n    AtomicExpression(  silly rule  ).attr( {  outgoing edges  : [ { targetId : 2, type :  reason  } ] )\n)  or even  Structure(\n    FormalSystem(\n        Rule(\n             function ( step ) { return { valid: step.text().length   5, message: 'Boy is this silly.' }; } ,\n        ).attr( { name :  silly rule  } )\n    ),\n    AtomicExpression(  yay  ).attr( { id : 1 } ),\n    AtomicExpression(  silly rule  ).attr( {  reason for  : 1 } ),\n    AtomicExpression(  oh rats  ).attr( { id : 2 } ),\n    AtomicExpression(  silly rule  ).attr( {  reason for  : 2 } )\n)  or even  Structure(\n    FormalSystem(\n        Rule(\n             function ( step ) { return { valid: step.text().length   5, message: 'Boy is this silly.' }; } ,\n        ).attr( { name :  silly rule  } )\n    ),\n    AtomicExpression(  yay  ),\n    AtomicExpression(  silly rule  ).attr( {  reason for  :  previous  } ),\n    AtomicExpression(  oh rats  ),\n    AtomicExpression(  silly rule  ).attr( {  reason for  :  previous  } )\n)", 
            "title": "Notation in code"
        }, 
        {
            "location": "/phase1-validation/", 
            "text": "LDE Design Phase 1: Basic Validation\n\n\nThis phase defines:\n\n\n\n\nAtomic expressions (just expressions whose meaning is a string, and\n   contain no other structures)\n\n\nDefinitions of the simplest rule type only: code rules written in\n   JavaScript\n\n\nFormal systems (or \"mathematical topics\", which are structures we can\n   put rules inside of)\n\n\n\n\nThis enables really simple formal systems, like TriX game.\n\n\nWhile the intent is for any of the nontrivial processing tasks to be placed\nin a queue and handled when the CPU has time, I leave that hassle out of the\ncurrent design plans.  A later phase will add support for this.\n\n\nAtomic expressions\n\n\n\n\nE.goals == [ \"validated\" ]\n\n\nE.validate()\n does this:\n\n\nIf \nE.children().length \n 0\n then \nE.feedback(\"X\",\"only atomic\n  expressions supported so far\")\n\n\nOtherwise \nE.feedback(none,none)\n\n\nE.meaning()\n returns \nE.text()\n, but we may decide not to use a\n  loaded word like \"meaning\" and instead just leave .text() to be\n  called directly, if \n.meaning()\n seems too confusing or\n  philosophically overcommitted\n\n\nE.wasChanged()\n calls \nE.clearComputedAttributes()\n\n\nWe have not yet specified the implementation for\n  \nE.wasInserted/wasRemoved/wasChanged()\n.  Does it need to call\n  \nvalidate()\n in anything?\n\n\n\n\n\n\n\n\nDefinitions of the simplest rules: code-based rules\n\n\n\n\nR.validate()\n does this:\n\n\nIf \nR.attributes().code!=true\n then \nR.feedback(\"X\",\"only code rules\n  are supported so far\")\n\n\nIf \nR.text()\n isn't valid JavaScript code that defines a function,\n  then \nR.feedback(\"X\",\"...\")\n\n\nOtherwise \nR.feedback(\"check\",\"nice code rule, dude\")\n\n\nIn any case, whenever \nR.validate()\n terminates, it calls\n  \nE.clearComputedAttributes()\n for every E in \nR.whatCitesMe()\n.\n\n\n\n\n\n\nExtend \nE.validate()\n, the routine for atomic expressions, by replacing\n   its \"otherwise\" step with these steps:\n\n\nIf \nE.attributes().reason\n doesn't exist, do \nE.feedback(none,none)\n\n  and stop.\n\n\nLet r=\nE.attributes().reason\n.\n\n\nIf \nE.findCited(r)\n is undefined, then\n  \nE.feedback(\"X\",\"no such rule\")\n\n\nLet r=\nE.findCited(r)\n.\n\n\nIf \nr.getComputedAttribute(\"validated\")\n is undefined, then stop\n  here.  When r gets validated, it will trigger a re-validation of E,\n  as in the final bullet point under \nR.validate()\n, above.\n\n\nLet f be the JavaScript function defined in \nr.text()\n and call\n  \nf(E)\n.\n\n\nIf \nf(E)\n ends with an error, then\n  \nE.feedback(\"X\",\"internal rule error\")\n.\n\n\nIf \nf(E)\n doesn't terminate soon, then\n  \nE.feedback(\"X\",\"internal rule error\")\n.\n\n\nIf \nf(E)\n is not a correctly formed validation result object, then\n  \nE.feedback(\"X\",\"internal rule error\")\n.\n\n\nOtherwise \nE.feedback(f(E).type,f(E).message)\n.\n\n\nWe have not yet specified the implementation for\n  \nR.wasInserted/wasRemoved/wasChanged()\n.  Does it need to call\n  \nvalidate()\n in anything?\n\n\n\n\n\n\n\n\nFormal systems (or \"mathematical topics\")\n\n\n\n\nF.exports()\n returns an array composed of these things, in the order\n   they appear in the document:\n\n\nany rule in \nF.children()\n\n\nany element of \nF'.exports()\n for any formal system F' in\n  \nF.children()\n\n\n\n\n\n\nExtend \nS.findCited(n)\n to also check \nF.exports()\n whenever it\n   encounters an accessible formal system\n\n\nExtend \nS.whatCitesMe()\n to also looks at the scope of \nS.parent()\n iff\n   it is a formal system (and its \nparent()\n iff that is a formal system,\n   and so on)\n\n\nWe have not yet specified the implementation for\n   \nS.wasInserted/wasRemoved/wasChanged()\n.  Does it need to call\n   \nvalidate()\n in anything?\n\n\n\n\nUnit testing\n\n\nHow we could do unit testing on this simple LDE:\n\n\n\n\nFire up the LDE so that its document is new and thus blank.\n\n\nSet up a listener for the \"computation finished\" signals from the LDE,\n   storing the results for use in testing.\n\n\nTell the LDE to add three children to the LDE Document: a rule, a step\n   using it correctly, and a step using it incorrectly.\n\n\nWait until we receive the signal that says the LDE has finished\n   computing.\n\n\nExamine the computation results stored in step 2 and verify correct\n   processing of the rule and two steps.\n\n\n\n\nWe might even extend this test with more steps.\n\n\n\n\nSend a signal to the LDE to alter the third child of the document,\n   making it a correct use of the rule.\n\n\nWait for computation to finish and check to be sure it re-validated that\n   step as correct now.", 
            "title": "Phase 1, Basic Validation"
        }, 
        {
            "location": "/phase1-validation/#lde-design-phase-1-basic-validation", 
            "text": "This phase defines:   Atomic expressions (just expressions whose meaning is a string, and\n   contain no other structures)  Definitions of the simplest rule type only: code rules written in\n   JavaScript  Formal systems (or \"mathematical topics\", which are structures we can\n   put rules inside of)   This enables really simple formal systems, like TriX game.  While the intent is for any of the nontrivial processing tasks to be placed\nin a queue and handled when the CPU has time, I leave that hassle out of the\ncurrent design plans.  A later phase will add support for this.", 
            "title": "LDE Design Phase 1: Basic Validation"
        }, 
        {
            "location": "/phase1-validation/#atomic-expressions", 
            "text": "E.goals == [ \"validated\" ]  E.validate()  does this:  If  E.children().length   0  then  E.feedback(\"X\",\"only atomic\n  expressions supported so far\")  Otherwise  E.feedback(none,none)  E.meaning()  returns  E.text() , but we may decide not to use a\n  loaded word like \"meaning\" and instead just leave .text() to be\n  called directly, if  .meaning()  seems too confusing or\n  philosophically overcommitted  E.wasChanged()  calls  E.clearComputedAttributes()  We have not yet specified the implementation for\n   E.wasInserted/wasRemoved/wasChanged() .  Does it need to call\n   validate()  in anything?", 
            "title": "Atomic expressions"
        }, 
        {
            "location": "/phase1-validation/#definitions-of-the-simplest-rules-code-based-rules", 
            "text": "R.validate()  does this:  If  R.attributes().code!=true  then  R.feedback(\"X\",\"only code rules\n  are supported so far\")  If  R.text()  isn't valid JavaScript code that defines a function,\n  then  R.feedback(\"X\",\"...\")  Otherwise  R.feedback(\"check\",\"nice code rule, dude\")  In any case, whenever  R.validate()  terminates, it calls\n   E.clearComputedAttributes()  for every E in  R.whatCitesMe() .    Extend  E.validate() , the routine for atomic expressions, by replacing\n   its \"otherwise\" step with these steps:  If  E.attributes().reason  doesn't exist, do  E.feedback(none,none) \n  and stop.  Let r= E.attributes().reason .  If  E.findCited(r)  is undefined, then\n   E.feedback(\"X\",\"no such rule\")  Let r= E.findCited(r) .  If  r.getComputedAttribute(\"validated\")  is undefined, then stop\n  here.  When r gets validated, it will trigger a re-validation of E,\n  as in the final bullet point under  R.validate() , above.  Let f be the JavaScript function defined in  r.text()  and call\n   f(E) .  If  f(E)  ends with an error, then\n   E.feedback(\"X\",\"internal rule error\") .  If  f(E)  doesn't terminate soon, then\n   E.feedback(\"X\",\"internal rule error\") .  If  f(E)  is not a correctly formed validation result object, then\n   E.feedback(\"X\",\"internal rule error\") .  Otherwise  E.feedback(f(E).type,f(E).message) .  We have not yet specified the implementation for\n   R.wasInserted/wasRemoved/wasChanged() .  Does it need to call\n   validate()  in anything?", 
            "title": "Definitions of the simplest rules: code-based rules"
        }, 
        {
            "location": "/phase1-validation/#formal-systems-or-mathematical-topics", 
            "text": "F.exports()  returns an array composed of these things, in the order\n   they appear in the document:  any rule in  F.children()  any element of  F'.exports()  for any formal system F' in\n   F.children()    Extend  S.findCited(n)  to also check  F.exports()  whenever it\n   encounters an accessible formal system  Extend  S.whatCitesMe()  to also looks at the scope of  S.parent()  iff\n   it is a formal system (and its  parent()  iff that is a formal system,\n   and so on)  We have not yet specified the implementation for\n    S.wasInserted/wasRemoved/wasChanged() .  Does it need to call\n    validate()  in anything?", 
            "title": "Formal systems (or \"mathematical topics\")"
        }, 
        {
            "location": "/phase1-validation/#unit-testing", 
            "text": "How we could do unit testing on this simple LDE:   Fire up the LDE so that its document is new and thus blank.  Set up a listener for the \"computation finished\" signals from the LDE,\n   storing the results for use in testing.  Tell the LDE to add three children to the LDE Document: a rule, a step\n   using it correctly, and a step using it incorrectly.  Wait until we receive the signal that says the LDE has finished\n   computing.  Examine the computation results stored in step 2 and verify correct\n   processing of the rule and two steps.   We might even extend this test with more steps.   Send a signal to the LDE to alter the third child of the document,\n   making it a correct use of the rule.  Wait for computation to finish and check to be sure it re-validated that\n   step as correct now.", 
            "title": "Unit testing"
        }, 
        {
            "location": "/phase1a-client/", 
            "text": "LDE Design Phase 1A: The Client\n\n\nThis phase defines the LDE Client, a thin interface to the LDE defined in a\nseparate module.\n\n\nThe Client maintains the Facade, a shallow copy of the LDE Document that it\nkeeps in sync with it, thus providing an easy API for interacting with the\nLDE.\n\n\nThis page is just a description; it's not actually written in a \"design\" or\n\"how to build\" manner, at least not to the same degree that Phase 1 was.\n\n\nApp launch\n\n\nWhen the Client is loaded into memory (say, at app launch) it will create a\nglobal structure that is intended to be a sort of shallow/shadow/fake copy\nof the LDE Document.\n\n\n\n\nBecause it will imitate the structure of the LDE Document, it will be\n   a hierarchy.\n\n\nBut it will not be a hierarchy of Structures, because as we know,\n   Structures do computation, and that's the job of the LDE.  This is\n   just a front-end; it doesn't do anything.\n\n\nSo rather than calling each node in the Client's hierarchy a\n   Structure, I'll call it a \nFacade.\n  This is to emphasize that this\n   hierarchy, stored in the Client (part of the UI) can't do anything at\n   all.  It's picture of what's really going on elsewhere, in the LDE.\n\n\n\n\nBackground threads\n\n\nThe Client can be told about the existence of a background thread that's\nrunning the LDE.\n\n\n\n\nIf it is told about such a thread, then any later\n   insertions/deletions/changes to the Facade hierarchy will immediately\n   be communicated by the Client to that LDE thread as a change event\n   (defined above).\n\n\nThis guarantees that the Facade hierarchy and LDE Document are always\n   in sync:  Because the LDE never alters its hierarchy, messages need\n   propagate in only one direction to guarantee that the two hierarchies\n   are isomorphic.\n\n\n\n\nNo subclasses\n\n\nBecause the nodes in the Facade don't actually do anything, they have no\nsubclasses.\n\n\n\n\nUnlike the Structure class, which it makes sense to subclass so that\n   we can add various features like validation functions and so forth,\n   none of that matters in the Facade.  It ships all that work to\n   someone else.\n\n\nThus every node in the Facade hierarchy is a generic Facade node,\n   storing a dictionary of attributes given to it at construction time,\n   which are precisely the external attributes for that node.\n\n\nThese attributes will have been communicated to the LDE when the\n   Facade node was constructed, and the LDE can use them to figure out\n   how to create a corresponding Structure node on the LDE side (or any\n   subclass of Structure; one attribute should be the class name\n   itself!).\n\n\nBut the point here is that what it means for the Facade to be a\n   shallow/inactive copy of the LDE Document is that:\n\n\nEvery node is just a Facade node, and thus they have no\n  specialized functionality at all.\n\n\nEvery node just stores its attributes, not doing anything with\n  them, unlike on the LDE Document side, which does computation.\n\n\n\n\n\n\n\n\nSerialization\n\n\n\n\nFacade nodes do one thing, actually:  They know how to serialize\n   themselves into JSON, including all their children.\n\n\nThis is so that they can pass themselves across to the LDE for syncing,\n   and so that the entire Facade can be serialized by the UI (later of\n   course) for saving in document metadata.\n\n\n\n\nIDs\n\n\nEach Facade node will be given, at the time it's created, an ID unique\namong all nodes in the Facade hierarchy.\n\n\n\n\nThis unique ID will be part of what's communicated in the change event\n   to the LDE, so that the corresponding Structure created in the LDE can\n   have the same ID.\n\n\nThus future change events from the Client to the LDE can reference nodes\n   in the hierarchy by this common ID system.\n\n\nSimilarly, when the LDE sends out signals about new computed attributes\n   being stored in the LDE Document, it will mention these unique IDs to\n   unambiguously indicate in which node the new computed attribute is\n   stored.\n\n\nThe Client will then store the same computed attribute in the\n   corresponding Facade node, so that it is accessible to the entire UI as\n   well.\n\n\n\n\nUnit testing\n\n\n\n\nVerify that the Facade hierarchy can be built and works independent of\n   the LDE\n\n\nVerify that if you connect it to an LDE background thread, the documents\n   stay in sync\n\n\nVerify that the same tests done in Phase 1 can be done also through this\n   \"API\" to the LDE\n\n\nAll further testing of interludes and phases defined below has the\n   option of using the Client or not, depending on what's best for testing\n   in that particular instance.\n\n\n\n\nExtendability\n\n\n\n\nThe LDE is free to expose to clients any other functionality it sees\n   fit.  That is, interaction with the LDE is not limited to syncing the\n   Facade with the LDE Document and waiting for computed responses.\n\n\nFor instance, one type of response that should only be produced when\n   specifically asked for is a \"verbose feedback\" response, like what we\n   get in the old desktop Lurch by double-clicking a traffic light.  This\n   is too much work to create for every step of work, but should be created\n   only when needed.\n\n\nThus the LDE could expose a computeVerboseFeedback() function that took\n   the unique ID of an LDE Document structure as input and later sent back\n   a message with the corresponding verbose feedback (in HTML form) as the\n   result.", 
            "title": "Phase 1A, The Client"
        }, 
        {
            "location": "/phase1a-client/#lde-design-phase-1a-the-client", 
            "text": "This phase defines the LDE Client, a thin interface to the LDE defined in a\nseparate module.  The Client maintains the Facade, a shallow copy of the LDE Document that it\nkeeps in sync with it, thus providing an easy API for interacting with the\nLDE.  This page is just a description; it's not actually written in a \"design\" or\n\"how to build\" manner, at least not to the same degree that Phase 1 was.", 
            "title": "LDE Design Phase 1A: The Client"
        }, 
        {
            "location": "/phase1a-client/#app-launch", 
            "text": "When the Client is loaded into memory (say, at app launch) it will create a\nglobal structure that is intended to be a sort of shallow/shadow/fake copy\nof the LDE Document.   Because it will imitate the structure of the LDE Document, it will be\n   a hierarchy.  But it will not be a hierarchy of Structures, because as we know,\n   Structures do computation, and that's the job of the LDE.  This is\n   just a front-end; it doesn't do anything.  So rather than calling each node in the Client's hierarchy a\n   Structure, I'll call it a  Facade.   This is to emphasize that this\n   hierarchy, stored in the Client (part of the UI) can't do anything at\n   all.  It's picture of what's really going on elsewhere, in the LDE.", 
            "title": "App launch"
        }, 
        {
            "location": "/phase1a-client/#background-threads", 
            "text": "The Client can be told about the existence of a background thread that's\nrunning the LDE.   If it is told about such a thread, then any later\n   insertions/deletions/changes to the Facade hierarchy will immediately\n   be communicated by the Client to that LDE thread as a change event\n   (defined above).  This guarantees that the Facade hierarchy and LDE Document are always\n   in sync:  Because the LDE never alters its hierarchy, messages need\n   propagate in only one direction to guarantee that the two hierarchies\n   are isomorphic.", 
            "title": "Background threads"
        }, 
        {
            "location": "/phase1a-client/#no-subclasses", 
            "text": "Because the nodes in the Facade don't actually do anything, they have no\nsubclasses.   Unlike the Structure class, which it makes sense to subclass so that\n   we can add various features like validation functions and so forth,\n   none of that matters in the Facade.  It ships all that work to\n   someone else.  Thus every node in the Facade hierarchy is a generic Facade node,\n   storing a dictionary of attributes given to it at construction time,\n   which are precisely the external attributes for that node.  These attributes will have been communicated to the LDE when the\n   Facade node was constructed, and the LDE can use them to figure out\n   how to create a corresponding Structure node on the LDE side (or any\n   subclass of Structure; one attribute should be the class name\n   itself!).  But the point here is that what it means for the Facade to be a\n   shallow/inactive copy of the LDE Document is that:  Every node is just a Facade node, and thus they have no\n  specialized functionality at all.  Every node just stores its attributes, not doing anything with\n  them, unlike on the LDE Document side, which does computation.", 
            "title": "No subclasses"
        }, 
        {
            "location": "/phase1a-client/#serialization", 
            "text": "Facade nodes do one thing, actually:  They know how to serialize\n   themselves into JSON, including all their children.  This is so that they can pass themselves across to the LDE for syncing,\n   and so that the entire Facade can be serialized by the UI (later of\n   course) for saving in document metadata.", 
            "title": "Serialization"
        }, 
        {
            "location": "/phase1a-client/#ids", 
            "text": "Each Facade node will be given, at the time it's created, an ID unique\namong all nodes in the Facade hierarchy.   This unique ID will be part of what's communicated in the change event\n   to the LDE, so that the corresponding Structure created in the LDE can\n   have the same ID.  Thus future change events from the Client to the LDE can reference nodes\n   in the hierarchy by this common ID system.  Similarly, when the LDE sends out signals about new computed attributes\n   being stored in the LDE Document, it will mention these unique IDs to\n   unambiguously indicate in which node the new computed attribute is\n   stored.  The Client will then store the same computed attribute in the\n   corresponding Facade node, so that it is accessible to the entire UI as\n   well.", 
            "title": "IDs"
        }, 
        {
            "location": "/phase1a-client/#unit-testing", 
            "text": "Verify that the Facade hierarchy can be built and works independent of\n   the LDE  Verify that if you connect it to an LDE background thread, the documents\n   stay in sync  Verify that the same tests done in Phase 1 can be done also through this\n   \"API\" to the LDE  All further testing of interludes and phases defined below has the\n   option of using the Client or not, depending on what's best for testing\n   in that particular instance.", 
            "title": "Unit testing"
        }, 
        {
            "location": "/phase1a-client/#extendability", 
            "text": "The LDE is free to expose to clients any other functionality it sees\n   fit.  That is, interaction with the LDE is not limited to syncing the\n   Facade with the LDE Document and waiting for computed responses.  For instance, one type of response that should only be produced when\n   specifically asked for is a \"verbose feedback\" response, like what we\n   get in the old desktop Lurch by double-clicking a traffic light.  This\n   is too much work to create for every step of work, but should be created\n   only when needed.  Thus the LDE could expose a computeVerboseFeedback() function that took\n   the unique ID of an LDE Document structure as input and later sent back\n   a message with the corresponding verbose feedback (in HTML form) as the\n   result.", 
            "title": "Extendability"
        }, 
        {
            "location": "/phase1b-dependencies/", 
            "text": "LDE Design Phase 1B: Dependencies\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nSupport dependencies as read-only first-few-children of the document.\n\n\nThey need to be validated only to be sure they don't redeclare one\n   another's stuff.\n\n\nNote that every structure already has an .exports() method, so we just\n   need to implement that structure for the root of the LDE Document, and\n   that will be what a document exports when it is used as a dependency.", 
            "title": "Phase 1B, Dependencies"
        }, 
        {
            "location": "/phase1b-dependencies/#lde-design-phase-1b-dependencies", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Support dependencies as read-only first-few-children of the document.  They need to be validated only to be sure they don't redeclare one\n   another's stuff.  Note that every structure already has an .exports() method, so we just\n   need to implement that structure for the root of the LDE Document, and\n   that will be what a document exports when it is used as a dependency.", 
            "title": "LDE Design Phase 1B: Dependencies"
        }, 
        {
            "location": "/phase1c-background/", 
            "text": "LDE Design Phase 1C: Background Queue\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nAdd a mechanism for queueing tasks to be done later.\n\n\nIt should be smart enough that, whenever task X is enqueued, then any\n   already-enqueued task Y that will need to be redone after X anyway\n   should be removed form the queue, for efficiency.\n\n\nThen rewrite Phase 1 and Interlude A to use this feature as needed.\n   All later phases should enqueue all nontrivial processing tasks this way.", 
            "title": "Phase 1C, Background Queue"
        }, 
        {
            "location": "/phase1c-background/#lde-design-phase-1c-background-queue", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Add a mechanism for queueing tasks to be done later.  It should be smart enough that, whenever task X is enqueued, then any\n   already-enqueued task Y that will need to be redone after X anyway\n   should be removed form the queue, for efficiency.  Then rewrite Phase 1 and Interlude A to use this feature as needed.\n   All later phases should enqueue all nontrivial processing tasks this way.", 
            "title": "LDE Design Phase 1C: Background Queue"
        }, 
        {
            "location": "/phase2-strings/", 
            "text": "LDE Design Phase 2: String Matching\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nExtend rules to include string-based matching (like the kind of matching\n   Circle-Dot and MIU use)\n\n\nThis enables: toy systems like Circle-Dot and MIU", 
            "title": "Phase 2, String Matching"
        }, 
        {
            "location": "/phase2-strings/#lde-design-phase-2-string-matching", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Extend rules to include string-based matching (like the kind of matching\n   Circle-Dot and MIU use)  This enables: toy systems like Circle-Dot and MIU", 
            "title": "LDE Design Phase 2: String Matching"
        }, 
        {
            "location": "/phase3-theorems/", 
            "text": "LDE Design Phase 3: Theorems and Proofs\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nProofs (which are also subproofs)\n\n\nTheorem statements\n\n\nPairing of theorems with proofs\n\n\nHomework problems (which may be the same as a theorem-proof pair!)\n\n\nThis enables: well, proofs and homework assignments, I guess", 
            "title": "Phase 3, Theorems and Proofs"
        }, 
        {
            "location": "/phase3-theorems/#lde-design-phase-3-theorems-and-proofs", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Proofs (which are also subproofs)  Theorem statements  Pairing of theorems with proofs  Homework problems (which may be the same as a theorem-proof pair!)  This enables: well, proofs and homework assignments, I guess", 
            "title": "LDE Design Phase 3: Theorems and Proofs"
        }, 
        {
            "location": "/phase4-expressions/", 
            "text": "LDE Design Phase 4: Expressions\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nExpanded form for non-atomic expressions (function applications,\n   binding, variables, constants, etc.)\n\n\nExtend rules to pattern-based matching (the usual kind of rules we think\n   of in math)\n\n\nThis enables: propositional logic, but with statements in expanded form\n   only", 
            "title": "Phase 4, Expression Trees"
        }, 
        {
            "location": "/phase4-expressions/#lde-design-phase-4-expressions", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Expanded form for non-atomic expressions (function applications,\n   binding, variables, constants, etc.)  Extend rules to pattern-based matching (the usual kind of rules we think\n   of in math)  This enables: propositional logic, but with statements in expanded form\n   only", 
            "title": "LDE Design Phase 4: Expressions"
        }, 
        {
            "location": "/phase5-parsing/", 
            "text": "LDE Design Phase 5: Parsing\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nRules for defining parsing\n\n\nConstant declarations may be implemented under the hood as special cases\n   of language rules.\n\n\nThis does not mean they must parse into OpenMath symbols.  It is\n  acceptable to parse them into, for example, OpenMath strings, with a\n  special attribute Constant=True, or any equally unique/recognizable\n  expression.\n\n\nAlso, this does not mean that constant declarations must feel to the\n  user like language rule declarations feel.  We can let users think of\n  them and express them as constant declarations, but under the hood it\n  may be implemented as if it had been a language rule.\n\n\n\n\n\n\nThis enables: propositional logic in its usual notation, and other\n   related simple systems", 
            "title": "Phase 5, Parsing Rules"
        }, 
        {
            "location": "/phase5-parsing/#lde-design-phase-5-parsing", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Rules for defining parsing  Constant declarations may be implemented under the hood as special cases\n   of language rules.  This does not mean they must parse into OpenMath symbols.  It is\n  acceptable to parse them into, for example, OpenMath strings, with a\n  special attribute Constant=True, or any equally unique/recognizable\n  expression.  Also, this does not mean that constant declarations must feel to the\n  user like language rule declarations feel.  We can let users think of\n  them and express them as constant declarations, but under the hood it\n  may be implemented as if it had been a language rule.    This enables: propositional logic in its usual notation, and other\n   related simple systems", 
            "title": "LDE Design Phase 5: Parsing"
        }, 
        {
            "location": "/phase6-declarations/", 
            "text": "LDE Design Phase 6: Declarations\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nVariable declarations (which may be a special type of expression, or may\n   be a special type of subproof--i.e., do we mark a variable as a\n   declaration, or do we mark a subproof as a variable declaration one, and\n   then the variable at the start of it is declared?)\n\n\nExamples (structures in which you declare all manner of stuff that\n   doesn't bleed out)\n\n\nThis enables: predicate logic in standard math notation, and many other\n   math topics", 
            "title": "Phase 6, Declarations"
        }, 
        {
            "location": "/phase6-declarations/#lde-design-phase-6-declarations", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Variable declarations (which may be a special type of expression, or may\n   be a special type of subproof--i.e., do we mark a variable as a\n   declaration, or do we mark a subproof as a variable declaration one, and\n   then the variable at the start of it is declared?)  Examples (structures in which you declare all manner of stuff that\n   doesn't bleed out)  This enables: predicate logic in standard math notation, and many other\n   math topics", 
            "title": "LDE Design Phase 6: Declarations"
        }, 
        {
            "location": "/phase7-features/", 
            "text": "LDE Design Phase 7: Features\n\n\nThis document is not yet complete.  Its content will eventually specify:\n\n\n\n\nAdd features to anything built so far (like multiple conclusions from a\n   rule, or automatic premise finding, or automatic premise ordering, or\n   the ability to specify metavariable instantiations, or any of 1000 other\n   features we'd like to add)\n\n\nThis enables: everything else", 
            "title": "Phase 7, Bonus Features"
        }, 
        {
            "location": "/phase7-features/#lde-design-phase-7-features", 
            "text": "This document is not yet complete.  Its content will eventually specify:   Add features to anything built so far (like multiple conclusions from a\n   rule, or automatic premise finding, or automatic premise ordering, or\n   the ability to specify metavariable instantiations, or any of 1000 other\n   features we'd like to add)  This enables: everything else", 
            "title": "LDE Design Phase 7: Features"
        }, 
        {
            "location": "/ideas/", 
            "text": "LDE Design Idea Archive\n\n\nThis document records incomplete ideas the Lurch team is keeping in mind\nfor integration into later design plans.\n\n\n\n\nWe have considered a UI with buttons with mathematical names on them,\n   such as Justify (which would let you choose a reason and it would insert\n   it), Cite (which would let you click any premise and it would make the\n   arrow), a toolbar of all math words.\n\n\nWe have tested a Suggestions feature, and could really use it widely:\n\n\nWhen the cursor is near something the software could recognize as a\n  statement or a reason, it gives a faint shadow over it of what it\n  thinks you're saying.\n\n\nA single keystroke confirms, and if you don't use that keystroke, the\n  shadowy suggestion is never actually realized in the document.\n\n\nExample usage:\n\n\nType, then hit \nCtrl+Enter\n to approve an interpretation of what\n  you said as a statement.\n\n\nA visual indicator of some kind shows that the bubble was formed,\n  but since your cursor is after it, the bubble-forming animation\n  fades.\n\n\nKeep typing, then hit \nCtrl+Enter\n to approve an interpretation of\n  what you said as a reason.\n\n\nSame visual indicator process.\n\n\nImmediately a suggested connection of the reason to the statement\n  appears, and you hit \nCtrl+Enter\n again to connect them.\n\n\nSame visual indicator process.\n\n\nStart typing your next statement, and repeat from step 1.\n\n\n\n\n\n\nWhenever your cursor is in a statement accessible to the most recent\n  justification you formed, a suggested premise citation arrow could\n  appear; \nCtrl+Enter\n to confirm.\n\n\n\n\n\n\nMathQuill (and, one day, MathJax, if we choose to add it) are UX sugar\n   that sits above the document, and can be converted to text as part of\n   the UI's processing of HTML into Structures.\n\n\nA UI idea from long ago recorded here for safe keeping:\n\n\nConsider all situations in which it\u2019s possible to write a small JS\n  function that can easily take in a string of text and split it into\n  an array of substrings, like \n\"Fred is a fish\"\n to\n  \n[\"Fred is\", \"a\", \"fish\"]\n, such that the array alternates between\n  meaningful stuff and non-meaningful stuff. Then we have two things we\n  can do with such a function.\n\n\nFirst, the translator can obviously use that to trivially lift the\n  meaningful stuff out.\n\n\nSecond, the UX can also use it to \nhighlight\n \nwhile the user is\n  typing in a group\n which parts of the group\u2019s content the app is\n  paying attention to, and which parts it\u2019s ignoring. Imagine typing\n  \n[Fred is a fish]\n and the app is gently highlighting everything\n  except the 'a' or typing\n  \n[Fred, who we all love, is a very nice fish]\n\n  and the app highlights like so:\n  [\nFRED\n, who we all love, \nIS\n a very nice \nFISH\n].\n  Such highlighting would be in the overlay where the bubble is drawn,\n  and shown only when the cursor is in there.\n\n\nOne specific subclass of this idea is when we require rigid formal\n  syntax, like line-numbered proofs with\n  \nstatement[whitespace]reason[whitespace]premise,...", 
            "title": "Ideas Archive"
        }, 
        {
            "location": "/ideas/#lde-design-idea-archive", 
            "text": "This document records incomplete ideas the Lurch team is keeping in mind\nfor integration into later design plans.   We have considered a UI with buttons with mathematical names on them,\n   such as Justify (which would let you choose a reason and it would insert\n   it), Cite (which would let you click any premise and it would make the\n   arrow), a toolbar of all math words.  We have tested a Suggestions feature, and could really use it widely:  When the cursor is near something the software could recognize as a\n  statement or a reason, it gives a faint shadow over it of what it\n  thinks you're saying.  A single keystroke confirms, and if you don't use that keystroke, the\n  shadowy suggestion is never actually realized in the document.  Example usage:  Type, then hit  Ctrl+Enter  to approve an interpretation of what\n  you said as a statement.  A visual indicator of some kind shows that the bubble was formed,\n  but since your cursor is after it, the bubble-forming animation\n  fades.  Keep typing, then hit  Ctrl+Enter  to approve an interpretation of\n  what you said as a reason.  Same visual indicator process.  Immediately a suggested connection of the reason to the statement\n  appears, and you hit  Ctrl+Enter  again to connect them.  Same visual indicator process.  Start typing your next statement, and repeat from step 1.    Whenever your cursor is in a statement accessible to the most recent\n  justification you formed, a suggested premise citation arrow could\n  appear;  Ctrl+Enter  to confirm.    MathQuill (and, one day, MathJax, if we choose to add it) are UX sugar\n   that sits above the document, and can be converted to text as part of\n   the UI's processing of HTML into Structures.  A UI idea from long ago recorded here for safe keeping:  Consider all situations in which it\u2019s possible to write a small JS\n  function that can easily take in a string of text and split it into\n  an array of substrings, like  \"Fred is a fish\"  to\n   [\"Fred is\", \"a\", \"fish\"] , such that the array alternates between\n  meaningful stuff and non-meaningful stuff. Then we have two things we\n  can do with such a function.  First, the translator can obviously use that to trivially lift the\n  meaningful stuff out.  Second, the UX can also use it to  highlight   while the user is\n  typing in a group  which parts of the group\u2019s content the app is\n  paying attention to, and which parts it\u2019s ignoring. Imagine typing\n   [Fred is a fish]  and the app is gently highlighting everything\n  except the 'a' or typing\n   [Fred, who we all love, is a very nice fish] \n  and the app highlights like so:\n  [ FRED , who we all love,  IS  a very nice  FISH ].\n  Such highlighting would be in the overlay where the bubble is drawn,\n  and shown only when the cursor is in there.  One specific subclass of this idea is when we require rigid formal\n  syntax, like line-numbered proofs with\n   statement[whitespace]reason[whitespace]premise,...", 
            "title": "LDE Design Idea Archive"
        }
    ]
}