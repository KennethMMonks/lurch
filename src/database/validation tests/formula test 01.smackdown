---
testing:
  type: validation
  subtype: formula
  description: "A basic valid single formula test."
---

(⇒ ¬ or),{                                 // declare non-metavars
        
  :{ :(⇒ P Q) (or (¬ P) Q) }               // a theorem turned formula
  \label{"alt def of ⇒"}                   // smackdown label 
  
  // start a proof
  {  
     :(⇒ A B)                              // assume something
     (or (¬ A) B)                          // prove this
      \by{"alt def of ⇒"}{P=A}{Q=B}        // reason and instantiations
      \expectValidation{result}{"valid"}   // expected validation result     
  }
}

//
// incorrect variants
//

// no such reference
(⇒ ¬ or),{                 
  
  :{ :(⇒ P Q) (or (¬ P) Q) }  \label{"alt def of ⇒"}
  
  {  
     :(⇒ A B)                    
     (or (¬ A) B) 
        \by{"Stewart's Theorem"}{P=A}{Q=B}
        \expectValidation{result}{"invalid"}    
        \expectValidation{reason}{"no such reference"}        
  }
}

// formula not accessible (and meaningless)
(⇒ ¬ or),{ 
  {
   :{ :(⇒ P Q) (or (¬ P) Q) }  \label{"alt def of ⇒"}
  }  // accidentially make it inaccessible/meaningless
  {  
     :(⇒ A B)                    
     (or (¬ A) B) 
        \by{"alt def of ⇒"}{P=A}{Q=B}
        \expectValidation{result}{"invalid"}    
        \expectValidation{reason}{"reference not accessible"}        
  }
}

// bound, so not a metavariable
(⇒ ¬ or),{                   
  :{ :(⇒ P Q) (or (¬ P) Q) }  \label{"alt def of ⇒"}
  
  {  
     :(⇒ A B)                    
     (or (¬ A) B) 
             \by{"alt def of ⇒"}{P=A}{Q=B}{⇒=A}
             \expectValidation{result}{"invalid"}    
             \expectValidation{reason}{["not a metavariable","⇒"]}        
  }
}

// extraneous metavariable
(⇒ ¬ or),{                   
  :{ :(⇒ P Q) (or (¬ P) Q) }  \label{"alt def of ⇒"}     
  
  {  
     :(⇒ A B)                    
     (or (¬ A) B) 
              \by{"alt def of ⇒"}{P=A}{Q=B}{R=A}
              \expectValidation{result}{"invalid"}    
              \expectValidation{reason}{["extra metavariable","R"]}        
  }
}

// syntactically valid, but not logically
(⇒ ¬ or),{                   
  :{ :(⇒ P Q) (or (¬ P) Q) }  \label{"alt def of ⇒"}     
  
  {  
     :(⇒ A B)                    
     (or (¬ A) B) 
               \by{"alt def of ⇒"}{P=A}{Q=A}}
               \expectValidation{result}{"invalid"}
  }
}

// syntactically valid, but not logically
(⇒ ¬ or),{                   
  :{ :(⇒ P Q) (or (¬ P) Q) }  \label{"alt def of ⇒"}
  :{ (⇒ P P) }                \label{"reflexive of ⇒"} 
  
  {  
     :(⇒ A B)                    
     (or (¬ A) B) 
               \by{"reflexive of ⇒"}{P=A}
               \expectValidation{result}{"invalid"}    
  }
}

// referencing the wrong formula can false flag the cause of the error
(⇒ ¬ or),{                   
  :{ :(⇒ P Q) (or (¬ P) Q) }  \label{"alt def of ⇒"}
  :{ (⇒ P P) }                \label{"reflexive of ⇒"} 
  
  {  
     :(⇒ A B)                    
     (or (¬ A) B) 
               \by{"reflexive of ⇒"}{P=A}{Q=B}
               \expectValidation{result}{"invalid"}
               \expectValidation{reason}{["extra metavariable","Q"]}            
  }
}