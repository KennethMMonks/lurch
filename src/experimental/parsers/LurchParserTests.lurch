////////////////////////////////////////////////////////////////////
// Individual Tests for Peggy Parser
//
// This file is parsed one line at a time individualy.  The multi-line proofs
// and nested environments are already tested by the testing suite.

// Misc parsing tests
// Symbols
x
x1
fred
// Numbers
0
1
12345
10200
0.5
12.0
12.0340
// function applications
f()
fred(x)
g0(fred,wilma)
f(x)(y)
f()(x,y)
f()()(x)
f(x,y)(a,b)(c,d,e)()
f‚Åª(x)
f‚Åª(f(x))
// parentheticals
(x)
(0)
(1.2)
((x))
(((x)))
((((((x))))))
// powers
2^3
0^10.3
x^0
x^y
x^y^z
x^y^z^w
x^(y^z)^w
(x^y)^(z^w)
(x^(y^z))^w
// products
x cdot y
2 cdot x
2 cdot 0
0 cdot 2
3 cdot x^2
3 cdot x^2^3
3^2 cdot 5^3 cdot 7^4
2 cdot x cdot y cdot z
2 cdot x^3 cdot y cdot z^4
(2 cdot x^3) cdot (y cdot z^4)
2 cdot (x^3 cdot (y cdot z^4))
(2 cdot (x^3 cdot y) cdot z)^4
2 cdot (x^3 cdot y) cdot z^4
// quotients
x/y
2/x
2/0
0/2
3/x^2
3/x^2^3
3^2/5^3 cdot 7^4
3^2 cdot 5^3/7^4
3^2/5^3/7^4
2 cdot x cdot y cdot z
2/x cdot y cdot z
2 cdot x/y cdot z
2 cdot x cdot y/z
2 cdot x/y/z
2/x cdot y/z
2/x/y cdot z
2/x/y/z
2 cdot x^3/y/z^4
(2 cdot x^3)/(y cdot z^4)
2 cdot (x^3/(y cdot z^4))
(2/(x^3/y) cdot z)^4
2 cdot (x^3 cdot y)/z^4
// multiplicative inverses
x‚Åª
x‚ãÖx‚Åª
(x+1)‚Åª
(2‚ãÖx‚Åª+1‚Åª)‚Åª
// sums
x+y
2+x
2+0
0+2
3+x^2
3+x^2^3
3+5^3+7^4
3^2+5^3+7^4
3^2+5 cdot 3/7+4
2+x+y+z
2+3 cdot x^3+y/z^4
(2+x^3)+(1+y cdot z^4)
2+(x^3/(y cdot z^4))
(2/(x+3/y) cdot z)^4
2 cdot (x^3+y)/z+4
// negation and subtraction
-x
-2
-0
0-2
3-x^2
3-x^2^3
3-5^3-7^4
-3^2+5^3-7^4
-3^2-5 cdot 3/7-4
2+x+y+z
2+3 cdot x^3+y/z^4
(2+x^3)-(1-y cdot z^4)
-2-(x-3/(yz^4))
(2/(x-3/y) cdot z)^(-4)
-2 cdot (x^3+y)/(-z)-4
// factorials
nÔºÅ
(n+1)ÔºÅ+2
2+nÔºÅ
// sets
A cap B
A cup B
A setminus B
A¬∞
A cap B cap C
A cap (B cap C)
(A cap B) cap C
((A cap B) cap C) cap D
(A cap (B cap C)) cap D
A cap (B cup C)
(A cap B) cup C
((A cup B) cap C) cup D
(A cup (B cap C)) cup D
(A cup (B cap C)) cap D
A cup B cup C
A cup (B cup C)
(A¬∞ cap B¬∞)¬∞ cap C¬∞
(((A setminus B)¬∞ cap C¬∞) cap D)¬∞
(A¬∞ cap (B setminus C)) setminus D¬∞
A cap (B¬∞ setminus C¬∞)¬∞
(A cap B) setminus C
((A setminus B) cap C) cup D
A setminus B setminus C setminus D
(A¬∞ cup (B setminus C¬∞)) cap D
A times B  subset  B times A
// arithmetic relations
x=0
fred lt wilma
x+1 leq 0
-(-x^2+2 cdot x-7)/((x-1) cdot (x+1))=(3 cdot x+1)/2
2|6
12|24
n|6
k+1|n-1
Fred loves wilma
// set relations
x in A
2 in Set(0,2,4,6)
x ‚àà A
2 ‚àà Set(0,2,4,6)
x ‚àâ A
2 ‚àâ Set(0,2,4,6)

A subset B
Set(1,2) in PowerSet(Set(0,1,2,3))
A cap B  subset  A cup B
A cap B¬∞  subset  (A cup B)¬∞ setminus A
// propositions
not P
not P or Q
not (P or Q)
not P and Q
not (P and Q)
not P‚à®Q
not (P‚à®Q)
not P‚àßQ
not (P‚àßQ)
not P  implies  Q
not (P  implies  Q)
not P  iff   Q
not (P  iff   Q)
((P implies Q) implies P) implies P
(((P implies Q) implies P) implies P)
not P and Q  implies  not R or S  iff   not T  implies  U
// mixed
x in (A cap B)¬∞  iff   x in A¬∞ or x in B¬∞
1/(x^2-2 cdot x+1)=1/(x-1)^2  iff   x in R and not x=1
//bindings
for all x.P(x)
exists x.P(x)
for all x.for all y.P(x)
exists x.exists y.P(x)
for all x.exists y.P(x)
exists x.for all y.P(x)
for all x.y.P(x)
exists x.y.P(x)
(exists x.for all y.P(x,y))  implies  (for all y.exists x.P(x,y))
(exists x.for all y.x loves y)  implies  (for all y.exists x.x loves y)
P and (exists x.P(x)  implies  Q)  implies  P and (for all y.Q)
// declarations
Let x
let x,y,z,wilma
Declare f
declare fred wilma barney !
P(c) for some c
P(c,w)  implies  Q(c,y) for some c
// environments
{}
{{{{{}}}}}
{ A }
{A B C}
{ Assume X Y }
{ :X Y }
{ :{:X Y} {:X Z} }
{ :{:{:P Q} P} P }
{ Assume { Assume { Assume P Q} P} P }
:{ :(x+1) cdot (x-1) leq 0 x leq 1 -1 leq x }
// attributed environments
Rule: { :A B‚áíA }
// givens
Assume P
assume P
Suppose P
suppose P
Given P
given P
If P
if P
:P
// Comments (not this kind!)
Comment "Fred often ponders reality."
comment "Fred often ponders reality."
‚û§ "Fred often ponders reality."
% "Fred often ponders reality."
Comment x^2
‚û§ x^2
% x^2

////////////////////////////////
// ND Propositional Logic Axioms
////////////////////////////////
:{ {W V} ‚â° W and V }                     // and+
:{ {:W V} ‚â° W implies V }                // implies 
:{ { {:W V} {:V W} } ‚â° W iff  V }        // iff  
:{ :W W or V V or W }                    // or+ 
:{ :W or V :{:W U} :{:V U} U }           // or-
:{ :{:W contradiction }  not W }         // not +
:{ :{:not W contradiction }  W }         // not -
:{ :W :not W contradiction }             // contradiction+
// Prop Thms
:{ W or not W }                                   // exclusive middle
:{ not (not W) ‚â° W }                              // double negative
:{ W or W ‚â° W }                                   // idempotency of or
:{ :W or V   V or W }                             // commutativity of or
:{ (W or V) or U ‚â° W or (V or U) }                // associativity of or
:{ { W  (V or U) } ‚â° (W and V) or (W and U) }     // distributivity of and/or
:{  W or (V and U) ‚â° { (W or V) (W or U) } }      // distributivity of or/and
:{ :W implies V :V implies U W implies U }        // transitivity of  implies 
:{ :W iff  V :V iff  U W iff  U }                 // transitivity of  iff  
:{ W implies V ‚â° not W or V }                     // alternate def of  implies 
:{ :W or V :not W V }                             // alternate or-  
:{ :W or V :not V W }                             // alternate or-
:{ not (W implies V) ‚â° { W not V } }              // negated implication
:{ W  implies  V ‚â°  not V  implies  not W }       // contrapositive
:{ not (W and V) ‚â° not W or not V }               // DeMorgan
:{ (not (W or V)) ‚â° { not W not V } }             // DeMorgan
:{ :contradiction  W }                            // contradiction-
// Pred Axioms
:{ :(for all x.@(P,x)) @(P,t) }                   // for all -
:{ :{ :Let x @(P,x) }  (for all y.@(P,y)) }       // for all +
:{ :(exists x.@(P,x)) @(P,c) for some c }         // exists -
:{ :@(P,t) (exists x.@(P,x)) }                    // exists +
:{ :x=y :@(P,x) @(P,y) }                          // substitution
:{ W=W }                                          // reflexive =
////////////////////////////////
// Peano Axioms
////////////////////////////////
:{ :sigma(m)=sigma(n) m=n }                                         // N2
:{ not (0 = sigma(n)) }                                             // N3
:{ :@(P,0) :{ :Let k :@(P,k) @(P,sigma(k)) } (for all n.@(P,n)) }   // N4
:{ n+0 = n }                                                        // A0
:{ m+sigma(n) = sigma(m+n) }                                        // A1
:{ n cdot 0 = 0 }                                                   // M0
:{ n cdot sigma(m) = m+m cdot n }                                   // M1       
:{ m leq n ‚â° (exists k.m+k=n) }                                     // I
///////////////////////////////
// tuples
‚ü®x‚ü©
‚ü®x,y,z‚ü©
// maps
f:A‚ÜíB
f:A ‚Üí B
f: A ‚Üí B
f : A ‚Üí B
f(0):A‚à©B ‚Üí A‚à™B¬∞
f:‚Ñï ‚Üí ‚Ñï
f‚Åª:A‚ÜíB

// relations
x~y
x ~ y
a~(b+1)~c~d^2
a ‚âà b mod m
a+k ‚âà b-3 mod m

// misc
‚àÄy.ùúÜP(y) ‚áí y=x
{ :not n=0 (exists m.n=sigma(m)) }

// BIH
Recall { "This is a BIH" }
Comment
‚û§ "This is a comment"
// Theorems
Theorem { Iamatheorem }
Lemma: { SoamI }
Thm { Metoo }
Corollary { Andme }