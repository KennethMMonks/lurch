{"version":3,"sources":["structure.litcoffee"],"names":["Structure","slice","child","children","j","len","arguments","length","call","this","attributes","parentNode","childList","insertChild","dirty","all","first","isDirty","subclasses","addSubclass","name","classObj","prototype","className","toJSON","includeID","id","JSON","parse","stringify","results","ref","fromJSON","json","result","func","args","ctor","parent","indexInParent","ref1","indexOf","previousSibling","index","nextSibling","copy","C","S","isEarlierThan","other","ancestorsOfOther","commonAncestorIndex","myAncestorIndex","nextAncestor","otherAncestorIndex","otherRelevantAncestor","relevantAncestor","walk","unshift","removeFromParent","originalIndex","originalParent","willBeRemoved","splice","wasRemoved","removeChild","atIndex","beforeIndex","willBeInserted","wasInserted","replaceWith","getAttribute","key","setAttribute","value","willBeChanged","wasChanged","clearAttributes","keys","Object","attr","object","setup","recurConnect","recurFindTargets","targets","node","k","len1","target","hasOwnProperty","connectTo","fillOutConnections","IDs","instanceWithID","trackIDs","recursive","untrackIDs","clearIDs","T","arrayToObject","count","ins","moreData","name1","name2","objectToArray","outs","ref2","ref3","ref4","ref5","ref6","source","sourceOuts","targetIns","type","push","array","base","connection","Math","max","otherStructure","connectionType","disconnectFrom","inIndex","outIndex","allConnectionsOut","ofThisType","conn","allConnectionsIn","allConnectionsTo","isAccessibleTo","isInTheScopeOf","iteratorOverAccessibles","ancestor","sibling","next","iteratorOverScope","chain","last","pop","iterator","predicate","firstAccessible","allAccessibles","firstInScope","allInScope","feedback","feedbackData","console","log","exports"],"mappings":"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","file":"structure.js","sourcesContent":["\n# LDE Structures\n\nThe very generic word \"structure\" is used in the LDE to describe a subtree\nof the LDE Document.  For more details on this, see\n[the design overview docs](https://lurchmath.github.io/lde/site/overview/).\n\n    class Structure\n\nIf you plan to develop a subclass of `Structure`, be sure to follow the\nrequirement listed in the\n[Serialization and Deserialization](#serialization-and-deserialization)\nsection, below.\n\n## Constructor\n\nThe constructor body just initializes internal fields, but it accepts an\narray of initial children as its argument.  Any non-Structure passed as an\nargument is ignored.  See the next section for more details of child\nstructures.\n\n        constructor : ( children... ) ->\n            @attributes = { }\n            @parentNode = null\n            @childList = [ ]\n            for child in children\n                @insertChild child, @childList.length\n            @dirty = no\n\nWe also include here a simple getter for the `dirty` attribute.  Subclasses\nwill define appropriate setters.\n\n        isDirty : -> @dirty\n\n## Serialization and deserialization\n\nWe need to be able to convert structure hierarchies to/from JSON data.  We\ndo so with the routines in this section.\n\n### Registering class names\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nAfter all, there will be sublcasses of this class defined, and during\ndeserialization, instances of those subclasses will need to be created, as\nopposed to generic `Structure`s.\n\nTo facilitate this, we track all subclasses in a single global variable,\nhere.  Add one using the registration function provided.\n\n        subclasses : { }\n        @addSubclass : ( name, classObj ) ->\n            Structure::subclasses[name] = classObj\n            name\n\nWhen should you call it?  In your subclass, create a class variable called\n`className` and assign `Structure.addSubclass 'your class name', YourClass`\nto that member.  Follow this example, which we do here for the `Structure`\nbase class:\n\n        className : Structure.addSubclass 'Structure', Structure\n\n### Serialization to JSON\n\nThe serialized version of a class contains some objects from within the\nclass, not copies but the same objects, so that serialization can be fast.\nThus you should not modify the serialized version's members.  If you want an\nindependent copy, run `JSON.parse` on `JSON.stringify` of the serialized\nversion.\n\n        toJSON : ( includeID = yes ) ->\n            if includeID or not @id()?\n                attributes = @attributes\n            else\n                attributes = JSON.parse JSON.stringify @attributes\n                delete attributes.id\n            className : @className\n            attributes : attributes\n            children : ( child.toJSON includeID for child in @childList )\n\n### Deserialization from JSON\n\nDeserialization is a method in the class, because of course it is called\nwhen you have no instance at hand, and wish to create one.\n\nIt does not re-use the members from the parameter, but explicitly copies\nthem using a combination of `JSON.parse` and `JSON.stringify`, so that a\ndeserialized version of an existing object will share no members with that\nobject.\n\n        @fromJSON : ( json ) ->\n            classObj = Structure::subclasses[json.className]\n            children =\n                ( Structure.fromJSON child for child in json.children )\n            result = new classObj children...\n            result.attributes = JSON.parse JSON.stringify json.attributes\n            result\n\n## Tree structure\n\nStructures form a hierarchy, an n-ary tree.  We thus need functions for\ninserting, removing, and querying parents and children.\n\nFirst, the getters.  When querying the children, we make a copy of the list\nso that clients can feel free to manipulate it without messing up the\nintegrity of the hierarchy.\n\n        parent : -> @parentNode\n        children : -> @childList[..]\n        indexInParent : -> @parentNode?.childList?.indexOf this\n        previousSibling : ->\n            if ( index = @indexInParent() )?\n                @parentNode.childList[index-1]\n        nextSibling : ->\n            if ( index = @indexInParent() )?\n                @parentNode.childList[index+1]\n\nAnother possibly convenient utility is to make a copy of the Structure S\n(or equivalently the subtree with root S).\n\n        copy : ->\n            S = new Structure\n            S.attributes = JSON.parse JSON.stringify @attributes\n            S.childList = ( C.copy() for C in @childList )\n            child.parentNode = S for child in S.childList\n            S\n\nWe can ask which of two structures comes earlier in their common ancestor,\nunder pre-order tree traversal, lowest-indexed children first.  The ordering\ndefined here is strict (`A.isEarlierThan A` is false).\n\n        isEarlierThan : ( other ) ->\n            if other not instanceof Structure then return undefined\n            if other is this then return no\n\nGet a list of all ancestors of the other structure.  If it is the root,\nthen I am strictly later than it, and we can return that now.\n\n            ancestorsOfOther = [ other ]\n            while ( nextAncestor = ancestorsOfOther[0].parent() )?\n                ancestorsOfOther.unshift nextAncestor\n\nFind my nearest ancestor that appears in that list.\n\n            walk = this\n            relevantAncestor = null\n            while walk? and walk not in ancestorsOfOther\n                relevantAncestor = walk\n                walk = walk.parent()\n\nIf there was none, we are incomparable; return undefined.  If the nearest\nancestor was me, then other is one of my descendants, so I am earlier than\nit.  If the nearest ancestor was the other structure, then the reverse is\ntrue.\n\n            if not walk? then return undefined\n            if walk is this then return yes\n            if walk is other then return no\n\nCompare the child indices in the common ancestor to determine ordering.\n\n            commonAncestorIndex = ancestorsOfOther.indexOf walk\n            otherRelevantAncestor = ancestorsOfOther[commonAncestorIndex+1]\n            myAncestorIndex = relevantAncestor.indexInParent()\n            otherAncestorIndex = otherRelevantAncestor.indexInParent()\n            myAncestorIndex < otherAncestorIndex\n\nNext, the setters.  There is no setter for the parent, because the parent\npointer of a structure S must be kept consistent with the children list of\nthe parent of S, and so we update both in the setters for children.\n\nWe permit removing children from parents, either with a method in the child\nor in the parent.\n\nWe notify the child of its removal through calling two event handlers (if\nthey exist) in the child object: `willBeRemoved()` immediately before the\nremoval and `wasRemoved(parent,index)` after the removal, passing the former\nparent and child index within that parent.\n\n        removeFromParent : ->\n            if ( originalParent = @parentNode )?\n                @willBeRemoved?()\n                originalIndex = @indexInParent()\n                @parentNode.childList.splice originalIndex, 1\n                @parentNode = null\n                @wasRemoved? originalParent, originalIndex\n        removeChild : ( atIndex ) -> @childList[atIndex]?.removeFromParent()\n\nWe permit inserting a new child into the parent's child array at any valid\nindex (including the old length of the child array, which appends).  The\nchild to be inserted is first removed from any parent it has when this\nmethod is called.  The default index is 0, so that a call of\n`insertChild(x)` inserts it as the first child.\n\nIf the child to be inserted is an ancestor of this structure, then we\nremove this structure from its parent, to obey the insertion command given\nwhile still maintaining acyclicity in the tree structure.  If the child to\nbe inserted is this node itself, this function does nothing.\n\nWe notify the child of its insertion through calling two event handlers (if\nthey exist) in the child object: `willBeInserted(parent,index)` immediately\nbefore the removal and `wasInserted()` after the removal.  The parameters to\nthe first of these routines are the soon-to-be parent and the index within\nthat parent at which the insertion will take place.\n\nIf the child or this object needs to first be removed from a parent as\ndescribed above, there will also be removal events, as documented in the\n`removeFromParent()` function, above.\n\n        insertChild : ( child, beforeIndex = 0 ) ->\n            return unless child instanceof Structure and \\\n                child isnt this and \\\n                0 <= beforeIndex <= @childList.length\n            walk = this\n            while ( walk = walk.parent() )?\n                if walk is child then @removeFromParent() ; break\n            child.removeFromParent()\n            child.willBeInserted? this, beforeIndex\n            @childList.splice beforeIndex, 0, child\n            child.parentNode = this\n            child.wasInserted?()\n\nA convenient combination of the above methods is to replace a child with a\nnew structure, deparenting the old child and putting the replacement at the\nsame index in the same parent.\n\nBecause this calls `removeFromParent()` and `insertChild()`, it also\ngenerates calls to the four event handlers mentioned in those functions,\nabove.\n\n        replaceWith : ( other ) ->\n            if ( originalParent = @parentNode )?\n                originalIndex = @indexInParent()\n                @removeFromParent()\n                originalParent.insertChild other, originalIndex\n\n## Attributes\n\nThe dictionary of attributes has getters and setters that work on keys or\nkey-value pairs (respectively).  There is also a corresponding \"clear\"\nfunction for deleting entries from the attributes dictionary.\n\nNo checks are put on what kind of data can be used for the values of this\ndictionary, but they should be JSON data only, to support serialization.\n(Checks are omitted for efficiency.)\n\nWe notify the structure of changes to its attributes through calling two\nevent handlers (if they exist) in the object: `willBeChanged(key)`\nimmediately before the change and `wasChanged(key)` after the removal, in\nboth cases passing the key from the changing key-value pair.  These events\nare the same whether the key-value pair is inserted, modified, or removed.\n\n        getAttribute : ( key ) -> @attributes[key]\n        setAttribute : ( key, value ) ->\n            if @attributes[key] isnt value\n                @willBeChanged? key\n                @attributes[key] = value\n                @wasChanged? key\n        clearAttributes : ( keys... ) ->\n            if keys.length is 0 then keys = Object.keys @attributes\n            for key in keys\n                if key of @attributes\n                    @willBeChanged? key\n                    delete @attributes[key]\n                    @wasChanged? key\n\nAttributes can also be added with an `attr()` function that returns the\ninstance, thus supporting method chaining.  This is useful when constructing\nobjects of this class, especially for unit testing, using code like\n`Structure( Structure().attr(...), ... )`.  It takes an object and installs\nall of its key-value pairs as attributes.\n\n        attr : ( object ) ->\n            @setAttribute key, value for own key, value of object\n            this\n\nOn the topic of conveniences for constructing instances, the following\nmethod can be used at the top level of a nested set of constructor calls,\nto traverse the final tree after constructing it, and performs the\nconvenience cleanup routines described within the function itself.\n\nThis is intended to be used when constructing large structures, as in\n`result = Structure( ...lots of children... ).setup()`.\n\n        setup : ->\n\nEvery structure with an attribute key \"label for\", \"reason for\", or \"premise\nfor\" and value X will be converted into a connection to node X of type\n\"label\", \"reason\", or \"premise\", respectively.  Node X will be found by\nseeking a node with attribute key \"id\" and value X.\n\nAll attributes with key id are then deleted.\n\nAlternately the same keys could be associated with value \"previous\" or\n\"next\" to indicate connection to a sibling, with no id required.\n\n            targets = { }\n            recurFindTargets = ( node ) ->\n                if ( id = node.getAttribute 'id' )?\n                    targets[id] = node\n                recurFindTargets child for child in node.children()\n            recurFindTargets this\n            recurConnect = ( node ) ->\n                for attr in [ 'label', 'premise', 'reason' ]\n                    if ( value = node.getAttribute \"#{attr} for\" )?\n                        if value is 'previous'\n                            target = node.previousSibling()\n                        else if value is 'next'\n                            target = node.nextSibling()\n                        else if targets.hasOwnProperty value\n                            target = targets[value]\n                        else\n                            target = null\n                        if target? then node.connectTo target, attr\n                        node.clearAttributes \"#{attr} for\"\n                recurConnect child for child in node.children()\n            recurConnect this\n\nWe then check all connections within this structure for consistency, and\nreturn the structure for use in chaining.\n\n            @fillOutConnections()\n            this\n\n## Unique IDs for instances\n\nClients of this class may give instances of it unique IDs stored in\nattributes.  (See the corresponding convenience function for querying such\nIDs in the [Attribute Conventions section](#attribute-conventions).)  To\ntrack those IDs, we use a class variable defined here, and provide class\nmethods for tracking and untracking IDs in a structure hierarchy.  IDs can\nbe any string, and thus we track them in an object, using the strings as\nkeys.\n\n        IDs : { }\n        @instanceWithID : ( id ) -> Structure::IDs[id]\n\nThe following two functions recur through a given structure hierarchy and\nsave all of its IDs into (or delete all of its IDs from) the above class\nvariable.  Whenever a structure hierarchy is no longer used by the client,\n`untrackIDs` should be called on that hierarchy to prevent memory leaks.\n\n        id : -> @getAttribute 'id'\n        trackIDs : ( recursive = yes ) ->\n            if @id()? then Structure::IDs[@id()] = @\n            if recursive then child.trackIDs() for child in @children()\n        untrackIDs : ( recursive = yes ) ->\n            if @id()? then delete Structure::IDs[@id()]\n            if recursive then child.untrackIDs() for child in @children()\n\nThe following function removes all ID attributes from a structure hierarchy.\nThis is useful, for example, after making a deep copy of a structure, so\nthat the copied version does not violate the global uniqueness of IDs.\n\n        clearIDs : ( recursive = yes ) ->\n            @clearAttributes 'id'\n            if recursive then child.clearIDs() for child in @children()\n\n## Connections\n\nStructures may have connections among them, specified using attributes.  The\ndocumentation\n[here](https://lurchmath.github.io/lde/site/phase0-structures/#connections)\ncovers the concept in detail.  We provide the following functions to make it\neasier for clients to create, remove, or query connections.\n\n### Making connections consistent\n\nThe first function ensures that all connections in a hierarchy are properly\nrecorded twice, once as outgoing from the source, and once as incoming to\nthe target.  This consistency is assumed by the query functions.  Run this\non the root of your hierarchy if you have any reason to believe that the\nconnections may not be stored consistently.\n\nBecause connections depend on IDs, this routine does nothing if this\nStructure does not already have an ID.\n\n        fillOutConnections : ->\n\nRecur on children, but if this object has no ID, we can't go beyond that.\n\n            child.fillOutConnections() for child in @childList\n            if not @id()? then return\n\nWe define an internal function for converting multisets of target-type pairs\nfrom array representation to an easier-to-work-with object representation,\nand then an inverse of that function.  These make the rest of this function\neaiser to write.\n\nThe \"array\" form is as in the docs linked to above,\n`[ [targID, connType], ... ]`.  The \"object\" form maps target keys to\nobjects whose key-value pairs are type-count pairs, where the count is the\nnumber of times the `[targID,connType]` pair appeared in the array.\nThat is, `{ targID: { type: count, ... }, ... }`.\n\n            arrayToObject = ( array ) ->\n                result = { }\n                for connection in array\n                    [ target, type ] = connection\n                    result[target] ?= { }\n                    result[target][type] ?= 0\n                    result[target][type]++\n                result\n            objectToArray = ( object ) ->\n                result = [ ]\n                for own target, moreData of object\n                    for own type, count of moreData\n                        for i in [1..count]\n                            result.push [ target, type ]\n                result\n\nNow find all my outgoing connections, and ensure they exist in at least the\nsame quantity on both sides.\n\n            outs = arrayToObject ( @getAttribute 'connectionsOut' ) ? [ ]\n            for own target, moreData of outs\n                continue unless ( T = Structure.instanceWithID target )?\n                targetIns = arrayToObject \\\n                    ( T.getAttribute 'connectionsIn' ) ? [ ]\n                targetIns[@id()] ?= { }\n                for own type, count of moreData\n                    moreData[type] = targetIns[@id()][type] =\n                        Math.max count, targetIns[@id()][type] ? 0\n                T.setAttribute 'connectionsIn', objectToArray targetIns\n\nRepeat the same exrecise for my incoming connections.\n\n            ins = arrayToObject ( @getAttribute 'connectionsIn' ) ? [ ]\n            for own source, moreData of ins\n                continue unless ( S = Structure.instanceWithID source )?\n                sourceOuts = arrayToObject \\\n                    ( S.getAttribute 'connectionsOut' ) ? [ ]\n                sourceOuts[@id()] ?= { }\n                for own type, count of moreData\n                    moreData[type] = sourceOuts[@id()][type] =\n                        Math.max count, sourceOuts[@id()][type] ? 0\n                S.setAttribute 'connectionsOut', objectToArray sourceOuts\n\n### Making consistent connections\n\nAnother way to ensure that connections among structures in a hierarchy are\nconsistent is to avoid directly editing the attribute containing the\nconnections data, and instead use the following two convenience functions\nfor creating or deleting connections.\n\nNote that the LDE should not be directly editing attributes anyway, because\nthey are defined to be read-only from this side.  But these two functions\nare useful when constructing structures to use in testing, and in particular\nfor implementing the `attr` and `setup` functions above, which are very\nuseful in the unit testing suite.\n\nThe first one creates a new connection of the given type from this structure\nto another.  Because there may be multiple connections of a given type\nbetween the same two structures, calling this repeatedly adds new\nconnections.\n\nThese functions do nothing if either of the two structures is lacking an ID.\nThey return true on success and false on failure.\n\n        connectTo : ( otherStructure, connectionType = '' ) ->\n            return no unless @id()? and \\\n                otherStructure instanceof Structure and otherStructure.id()?\n            outs = ( @getAttribute 'connectionsOut' ) ? [ ]\n            ins = ( otherStructure.getAttribute 'connectionsIn' ) ? [ ]\n            outs.push [ otherStructure.id(), connectionType ]\n            ins.push [ @id(), connectionType ]\n            @setAttribute 'connectionsOut', outs\n            otherStructure.setAttribute 'connectionsIn', ins\n            yes\n\nThe delete function does nothing if there is no connection to delete.\n\n        disconnectFrom : ( otherStructure, connectionType = '' ) ->\n            return no unless @id()? and \\\n                otherStructure instanceof Structure and otherStructure.id()?\n            outs = ( @getAttribute 'connectionsOut' ) ? [ ]\n            ins = ( otherStructure.getAttribute 'connectionsIn' ) ? [ ]\n            outIndex = inIndex = 0\n            while outIndex < outs.length and \\\n                  ( outs[outIndex][0] isnt otherStructure.id() or \\\n                    outs[outIndex][1] isnt connectionType )\n                outIndex++\n            if outIndex is outs.length then return no\n            while inIndex < ins.length and \\\n                  ( ins[inIndex][0] isnt @id() or \\\n                    ins[inIndex][1] isnt connectionType )\n                inIndex++\n            if inIndex is ins.length then return no\n            outs.splice outIndex, 1\n            ins.splice inIndex, 1\n            @setAttribute 'connectionsOut', outs\n            otherStructure.setAttribute 'connectionsIn', ins\n            yes\n\n### Querying connections\n\nThe following functions are some conveniences for querying what connections\nexist from a given structure object to/from others.\n\nFirst, we can fetch all connections of a given type that exit a given\nstructure object.  It returns a multiset of target structure IDs, in the\nform of an array with possible repeated entries.  If the user omits the\ntype, then all outgoing connections are returned, not as targets only, but\nas target-type pairs, `[[targetID,typeString],...]`.\n\n        allConnectionsOut : ( ofThisType ) ->\n            outs = ( @getAttribute 'connectionsOut' ) ? [ ]\n            if not ofThisType? then return outs\n            ( conn[0] for conn in outs when conn[1] is ofThisType )\n\nThen we can do the same thing for incoming connections.\n\n        allConnectionsIn : ( ofThisType ) ->\n            ins = ( @getAttribute 'connectionsIn' ) ? [ ]\n            if not ofThisType? then return ins\n            ( conn[0] for conn in ins when conn[1] is ofThisType )\n\nWe can also request all connections between two given structures, which will\nreturn a multiset of connection types, in the form of an array with possible\nrepeated entries.  Returns null if the argument is not a structure, or is\none without an ID.\n\n        allConnectionsTo : ( otherStructure ) ->\n            return null unless otherStructure instanceof Structure and \\\n                otherStructure.id()?\n            outs = ( @getAttribute 'connectionsOut' ) ? [ ]\n            ( conn[1] for conn in outs when conn[0] is otherStructure.id() )\n\n## Accessibility\n\nA structure A is accessible to a structure B if they have a common ancestor\nand are positioned within that ancestor in such a way that B could cite A as\na premise.\n\nThe officially definition is that a structure is accessible to all of its\nprevious siblings, all the previous siblings of its parent, all the previous\nsiblings of its grandparent, and so on up the ancestor chain.  Note that a\nstructure is not accessible to itself, nor to any of its ancestors.\nConversely, if A is accessible to B, then we say that B is in the scope of\nA.\n\n### Foundational accessibility functions\n\nWe begin with two functions, implementing the accessibility/scope relations.\n\n        isAccessibleTo : ( other ) ->\n            if other not instanceof Structure then return no\n            if not other.parent()? then return no\n            if @parent() is other.parent()\n                @indexInParent() < other.indexInParent()\n            else\n                @isAccessibleTo other.parent()\n        isInTheScopeOf : ( other ) -> other.isAccessibleTo this\n\nFor all the other computations we will want to do with scopes and\naccessibility, we will need iterators over all structures accessible to (or\nin the scope of, respectively) this one.  An iterator for a set S is an\nobject `I` such that repeated calls to `I.next()` yield new elements of S\nuntil S is exhausted, at which point all future calls to `I.next()` return\nnull.\n\nThe first iterator function lists all structures accessible to this one, in\nreverse order in the hierarchy.  That is, all previous siblings are yielded\nfrom right to left, then all previous siblings of the parent, and so on.\n\n        iteratorOverAccessibles : ->\n            ancestor : this\n            sibling : this\n            next : ->\n                if not @ancestor? then return null\n                if ( @sibling = @sibling.previousSibling() )?\n                    return @sibling\n                @sibling = @ancestor = @ancestor.parent()\n                @next()\n\nThe second iterator function lists all structures in the scope of this one,\nin forward order in the hierarchy.  That is, all descendants of the next\nsibling are yielded, then all descendants of the subsequent sibling, and so\non, in the order of a postorder tree traversal.\n\n        iteratorOverScope : ->\n            chain : [ this ]\n            next : ->\n                if @chain.length is 0 then return null\n                last = @chain.pop()\n                if ( walk = last.nextSibling() )?\n                    @chain.push walk\n                    @chain.push walk while ( walk = walk.children()[0] )?\n                    @chain[@chain.length-1]\n                else if @chain.length > 0\n                    @chain[@chain.length-1]\n                else\n                    null\n\n### Accessibility convenience functions\n\nWe then create two functions that can use these iterators for searching or\nenumeration.  Call `first(iterator,predicate)` to get the first element the\niterator yields satisfying the predicate.  Call `all(iterator,prediacte)`\nwith the obvious related meaning.  In each case, the predicate can be\nomitted to get the first element or all elements (no restrictions).  If the\npredicate is never satisfied, `first` returns undefiend, and `all` returns\nan empty array.\n\n        first = ( iterator, predicate = -> yes ) ->\n            while ( next = iterator.next() )?\n                if predicate next then return next\n        all = ( iterator, predicate = -> yes ) ->\n            result = [ ]\n            while ( next = iterator.next() )?\n                if predicate next then result.push next\n            result\n\nWe can then write useful functions whose names give their obvious meanings,\nby combining the tools above.\n\n        firstAccessible : ( predicate = -> yes ) ->\n            first @iteratorOverAccessibles(), predicate\n        allAccessibles : ( predicate = -> yes ) ->\n            all @iteratorOverAccessibles(), predicate\n        firstInScope : ( predicate = -> yes ) ->\n            first @iteratorOverScope(), predicate\n        allInScope : ( predicate = -> yes ) ->\n            all @iteratorOverScope(), predicate\n\n## Feedback\n\nWe create a stub function here for passing feedback to the LDE client.  In\nthis module, it does nothing but report to the console that it is not yet\nimplemented.  When the LDE module imports this one, it will overwrite this\nwith a real implementation that connects into the LDE's feedback mechanisms.\n\nThe intent is to pass a single feedback JSON structure that would be passed\nto the client.\n\n        @feedback : ( feedbackData ) ->\n            console.log 'Structure class feedback not implemented:',\n                feedbackData\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.Structure = Structure\n"]}