{"version":3,"sources":["structure.litcoffee"],"names":["Structure","slice","child","children","i","len","arguments","length","call","this","attributes","parentNode","childList","insertChild","dirty","all","first","isDirty","subclasses","addSubclass","name","classObj","prototype","className","toJSON","includeID","id","JSON","parse","stringify","results","ref","equals","other","fromJSON","json","result","func","args","ctor","parent","indexInParent","ref1","indexOf","previousSibling","index","nextSibling","copy","C","S","isEarlierThan","ancestorsOfOther","commonAncestorIndex","myAncestorIndex","nextAncestor","otherAncestorIndex","otherRelevantAncestor","relevantAncestor","walk","unshift","removeFromParent","originalIndex","originalParent","willBeRemoved","splice","wasRemoved","removeChild","atIndex","beforeIndex","willBeInserted","wasInserted","replaceWith","getAttribute","key","setAttribute","value","willBeChanged","wasChanged","clearAttributes","keys","Object","attr","object","IDs","instanceWithID","trackIDs","recursive","noticeAllConnections","untrackIDs","removeAllConnections","idIsTracked","clearIDs","changeID","newID","source","sourceID","target","targetID","getAllConnections","connectionIDs","sourceOfConnection","connect","data","hasOwnProperty","connectionWillBeInserted","addConnectionOrigin","connectionWasInserted","connectTo","getConnectionSource","connectionID","getConnectionTarget","getConnectionData","getConnectionsIn","push","sort","getConnectionsOut","out","disconnect","connectionWillBeRemoved","connectionWasRemoved","setConnectionData","connectionWillBeChanged","connectionWasChanged","j","len1","success","transferConnectionsTo","recipient","isAccessibleTo","isInTheScopeOf","iteratorOverAccessibles","ancestor","sibling","next","iteratorOverScope","chain","last","pop","iterator","predicate","firstAccessible","allAccessibles","firstInScope","allInScope","feedback","feedbackData","console","log","exports"],"mappings":"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","file":"structure.js","sourcesContent":["\n# LDE Structures\n\nThe very generic word \"structure\" is used in the LDE to describe a subtree\nof the LDE Document.  For more details on this, see\n[the design overview docs](https://lurchmath.github.io/lde/site/overview/).\n\n    class Structure\n\nIf you plan to develop a subclass of `Structure`, be sure to follow the\nrequirement listed in the\n[Serialization and Deserialization](#serialization-and-deserialization)\nsection, below.\n\n## Constructor\n\nThe constructor body just initializes internal fields, but it accepts an\narray of initial children as its argument.  Any non-Structure passed as an\nargument is ignored.  See the next section for more details of child\nstructures.\n\n        constructor : ( children... ) ->\n            @attributes = { }\n            @parentNode = null\n            @childList = [ ]\n            for child in children\n                @insertChild child, @childList.length\n            @dirty = no\n\nWe also include here a simple getter for the `dirty` attribute.  Subclasses\nwill define appropriate setters.\n\n        isDirty : -> @dirty\n\n## Serialization and deserialization\n\nWe need to be able to convert structure hierarchies to/from JSON data.  We\ndo so with the routines in this section.\n\n### Registering class names\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nAfter all, there will be sublcasses of this class defined, and during\ndeserialization, instances of those subclasses will need to be created, as\nopposed to generic `Structure`s.\n\nTo facilitate this, we track all subclasses in a single global variable,\nhere.  Add one using the registration function provided.\n\n        subclasses : { }\n        @addSubclass : ( name, classObj ) ->\n            Structure::subclasses[name] = classObj\n            name\n\nWhen should you call it?  In your subclass, create a class variable called\n`className` and assign `Structure.addSubclass 'your class name', YourClass`\nto that member.  Follow this example, which we do here for the `Structure`\nbase class:\n\n        className : Structure.addSubclass 'Structure', Structure\n\n### Serialization to JSON\n\nThe serialized version of a class contains some objects from within the\nclass, not copies but the same objects, so that serialization can be fast.\nThus you should not modify the serialized version's members.  If you want an\nindependent copy, run `JSON.parse` on `JSON.stringify` of the serialized\nversion.\n\n        toJSON : ( includeID = yes ) ->\n            if includeID or not @id()?\n                attributes = @attributes\n            else\n                attributes = JSON.parse JSON.stringify @attributes\n                delete attributes.id\n            className : @className\n            attributes : attributes\n            children : ( child.toJSON includeID for child in @childList )\n\nThe serialization tool lets us write a simple structural equality comparison\nfunction for two `Structure` hierarchies.  This is not an efficient\ncomparison function, but it can be used in unit testing.\n\n        equals : ( other ) ->\n            JSON.stringify( @toJSON() ) is JSON.stringify other.toJSON()\n\n### Deserialization from JSON\n\nDeserialization is a method in the class, because of course it is called\nwhen you have no instance at hand, and wish to create one.\n\nIt does not re-use the members from the parameter, but explicitly copies\nthem using a combination of `JSON.parse` and `JSON.stringify`, so that a\ndeserialized version of an existing object will share no members with that\nobject.\n\n        @fromJSON : ( json ) ->\n            classObj = Structure::subclasses[json.className]\n            children =\n                ( Structure.fromJSON child for child in json.children )\n            result = new classObj children...\n            result.attributes = JSON.parse JSON.stringify json.attributes\n            result\n\n## Tree structure\n\nStructures form a hierarchy, an n-ary tree.  We thus need functions for\ninserting, removing, and querying parents and children.\n\nFirst, the getters.  When querying the children, we make a copy of the list\nso that clients can feel free to manipulate it without messing up the\nintegrity of the hierarchy.\n\n        parent : -> @parentNode\n        children : -> @childList[..]\n        indexInParent : -> @parentNode?.childList?.indexOf this\n        previousSibling : ->\n            if ( index = @indexInParent() )?\n                @parentNode.childList[index-1]\n        nextSibling : ->\n            if ( index = @indexInParent() )?\n                @parentNode.childList[index+1]\n\nAnother possibly convenient utility is to make a copy of the Structure S\n(or equivalently the subtree with root S).\n\n        copy : ->\n            S = new Structure\n            S.attributes = JSON.parse JSON.stringify @attributes\n            S.childList = ( C.copy() for C in @childList )\n            child.parentNode = S for child in S.childList\n            S\n\nWe can ask which of two structures comes earlier in their common ancestor,\nunder pre-order tree traversal, lowest-indexed children first.  The ordering\ndefined here is strict (`A.isEarlierThan A` is false).\n\n        isEarlierThan : ( other ) ->\n            if other not instanceof Structure then return undefined\n            if other is this then return no\n\nGet a list of all ancestors of the other structure.  If it is the root,\nthen I am strictly later than it, and we can return that now.\n\n            ancestorsOfOther = [ other ]\n            while ( nextAncestor = ancestorsOfOther[0].parent() )?\n                ancestorsOfOther.unshift nextAncestor\n\nFind my nearest ancestor that appears in that list.\n\n            walk = this\n            relevantAncestor = null\n            while walk? and walk not in ancestorsOfOther\n                relevantAncestor = walk\n                walk = walk.parent()\n\nIf there was none, we are incomparable; return undefined.  If the nearest\nancestor was me, then other is one of my descendants, so I am earlier than\nit.  If the nearest ancestor was the other structure, then the reverse is\ntrue.\n\n            if not walk? then return undefined\n            if walk is this then return yes\n            if walk is other then return no\n\nCompare the child indices in the common ancestor to determine ordering.\n\n            commonAncestorIndex = ancestorsOfOther.indexOf walk\n            otherRelevantAncestor = ancestorsOfOther[commonAncestorIndex+1]\n            myAncestorIndex = relevantAncestor.indexInParent()\n            otherAncestorIndex = otherRelevantAncestor.indexInParent()\n            myAncestorIndex < otherAncestorIndex\n\nNext, the setters.  There is no setter for the parent, because the parent\npointer of a structure S must be kept consistent with the children list of\nthe parent of S, and so we update both in the setters for children.\n\nWe permit removing children from parents, either with a method in the child\nor in the parent.\n\nWe notify the child of its removal through calling two event handlers (if\nthey exist) in the child object: `willBeRemoved()` immediately before the\nremoval and `wasRemoved(parent,index)` after the removal, passing the former\nparent and child index within that parent.\n\n        removeFromParent : ->\n            if ( originalParent = @parentNode )?\n                @willBeRemoved?()\n                originalIndex = @indexInParent()\n                @parentNode.childList.splice originalIndex, 1\n                @parentNode = null\n                @wasRemoved? originalParent, originalIndex\n        removeChild : ( atIndex ) -> @childList[atIndex]?.removeFromParent()\n\nWe permit inserting a new child into the parent's child array at any valid\nindex (including the old length of the child array, which appends).  The\nchild to be inserted is first removed from any parent it has when this\nmethod is called.  The default index is 0, so that a call of\n`insertChild(x)` inserts it as the first child.\n\nIf the child to be inserted is an ancestor of this structure, then we\nremove this structure from its parent, to obey the insertion command given\nwhile still maintaining acyclicity in the tree structure.  If the child to\nbe inserted is this node itself, this function does nothing.\n\nWe notify the child of its insertion through calling two event handlers (if\nthey exist) in the child object: `willBeInserted(parent,index)` immediately\nbefore the removal and `wasInserted()` after the removal.  The parameters to\nthe first of these routines are the soon-to-be parent and the index within\nthat parent at which the insertion will take place.\n\nIf the child or this object needs to first be removed from a parent as\ndescribed above, there will also be removal events, as documented in the\n`removeFromParent()` function, above.\n\n        insertChild : ( child, beforeIndex = 0 ) ->\n            return unless child instanceof Structure and \\\n                child isnt this and \\\n                0 <= beforeIndex <= @childList.length\n            walk = this\n            while ( walk = walk.parent() )?\n                if walk is child then @removeFromParent() ; break\n            child.removeFromParent()\n            child.willBeInserted? this, beforeIndex\n            @childList.splice beforeIndex, 0, child\n            child.parentNode = this\n            child.wasInserted?()\n\nA convenient combination of the above methods is to replace a child with a\nnew structure, deparenting the old child and putting the replacement at the\nsame index in the same parent.\n\nBecause this calls `removeFromParent()` and `insertChild()`, it also\ngenerates calls to the four event handlers mentioned in those functions,\nabove.\n\n        replaceWith : ( other ) ->\n            if ( originalParent = @parentNode )?\n                originalIndex = @indexInParent()\n                @removeFromParent()\n                originalParent.insertChild other, originalIndex\n\n## Attributes\n\nThe dictionary of attributes has getters and setters that work on keys or\nkey-value pairs (respectively).  There is also a corresponding \"clear\"\nfunction for deleting entries from the attributes dictionary.\n\nNo checks are put on what kind of data can be used for the values of this\ndictionary, but they should be JSON data only, to support serialization.\n(Checks are omitted for efficiency.)\n\nWe notify the structure of changes to its attributes through calling two\nevent handlers (if they exist) in the object: `willBeChanged(key)`\nimmediately before the change and `wasChanged(key)` after the removal, in\nboth cases passing the key from the changing key-value pair.  These events\nare the same whether the key-value pair is inserted, modified, or removed.\n\n        getAttribute : ( key ) -> @attributes[key]\n        setAttribute : ( key, value ) ->\n            if @attributes[key] isnt value\n                @willBeChanged? key\n                @attributes[key] = value\n                @wasChanged? key\n        clearAttributes : ( keys... ) ->\n            if keys.length is 0 then keys = Object.keys @attributes\n            for key in keys\n                if key of @attributes\n                    @willBeChanged? key\n                    delete @attributes[key]\n                    @wasChanged? key\n\nAttributes can also be added with an `attr()` function that returns the\ninstance, thus supporting method chaining.  This is useful when constructing\nobjects of this class, especially for unit testing, using code like\n`Structure( Structure().attr(...), ... )`.  It takes an object and installs\nall of its key-value pairs as attributes.\n\n        attr : ( object ) ->\n            @setAttribute key, value for own key, value of object\n            this\n\n## Unique IDs for instances\n\nClients of this class may give instances of it unique IDs stored in\nattributes.  (See the corresponding convenience function for querying such\nIDs in the [Attribute Conventions section](#attribute-conventions).)  To\ntrack those IDs, we use a class variable defined here, and provide class\nmethods for tracking and untracking IDs in a structure hierarchy.  IDs can\nbe any string, and thus we track them in an object, using the strings as\nkeys.\n\n        IDs : { }\n        @instanceWithID : ( id ) -> Structure::IDs[id]\n\nThe following two functions recur through a given structure hierarchy and\nsave all of its IDs into (or delete all of its IDs from) the above class\nvariable.  Whenever a structure hierarchy is no longer used by the client,\n`untrackIDs` should be called on that hierarchy to prevent memory leaks.\n\nBecause connections depend on IDs, we will also disconnect in `untrackIDs()`\nany connections involving this structure.  Similarly, in `trackIDs()`, we\nmust notice any connections that exist in the structure and store them in\nthe appropriate global data structures; connection IDs are a close kin to\n`Structure` IDs.\n\n        id : -> @getAttribute 'id'\n        trackIDs : ( recursive = yes ) ->\n            @noticeAllConnections()\n            if @id()? then Structure::IDs[@id()] = @\n            if recursive then child.trackIDs() for child in @children()\n        untrackIDs : ( recursive = yes ) ->\n            @removeAllConnections()\n            if @id()? then delete Structure::IDs[@id()]\n            if recursive then child.untrackIDs() for child in @children()\n\nWe can also ask whether this `Structure` has its ID tracked.  We do not\nmerely mean that there is an ID tracked that matches this `Structure`'s ID,\nbut also that this `Structure` is the one recorded for that ID.  Thus in\ncase there are multiple structures with the same ID (which is not the\nintent, but clients may make a mistake) we can detect which one has been\nofficially recorded for the given ID.\n\n        idIsTracked : ->\n            @id()? and ( @ is Structure.instanceWithID @id() )\n\nThe following function removes all ID attributes from a structure hierarchy.\nThis is useful, for example, after making a deep copy of a structure, so\nthat the copied version does not violate the global uniqueness of IDs.\n\nBecause connections depend on IDs, we will also disconnect here any\nconnections involving this structure.\n\n        clearIDs : ( recursive = yes ) ->\n            @removeAllConnections()\n            @clearAttributes 'id'\n            if recursive then child.clearIDs() for child in @children()\n\nIf a structure wishes to change its ID (which can happen if the LDE client\nrequests it) then we have a lot of internal bookkeeping to update.  The\nfollowing function encapsulates all of that so that clients don't need to\nknow about our internals, but can just call this function to request an ID\nchange.  It returns true if the change is possible, and false if the change\nwas not possible (because the newly requested ID was already in use or\nbecause this structure wasn't currently tracked in the system).  In such a\nsituation, no action is taken.\n\n        changeID : ( newID ) ->\n            return no unless \\\n                not ( Structure.instanceWithID newID )? and \\\n                this is Structure.instanceWithID @id()\n\nFirst we update every connection we have stored in us to use the new ID\nwe're about to get.  We do this first because updating our ID triggers event\nhandlers, and we want the work complete before we trigger them. This code\nwill make sense only after you have read the documentation about how\nconnections are stored, which is given in the next section of this file,\nbelow.\n\n            for id in @getAllConnections()\n                if ( targetID = @getAttribute( \"_conn #{id} to\" ) ) and \\\n                   target = Structure.instanceWithID targetID\n                    target.setAttribute \"_conn #{id} from\", newID\n                if ( sourceID = @getAttribute( \"_conn #{id} from\" ) ) and \\\n                   source = Structure.instanceWithID sourceID\n                    source.setAttribute \"_conn #{id} to\", newID\n\nThen we update the id-to-instance mapping and our own ID attribute.\n\n            Structure::IDs[newID] = @\n            delete Structure::IDs[@id()]\n            @setAttribute 'id', newID\n\n## Connections\n\nStructures may have connections among them, specified using attributes.  The\ndocumentation\n[here](https://lurchmath.github.io/lde/site/phase0-structures/#connections)\ncovers the concept in detail.  We begin by providing a similar global store\nfor unique IDs of connections, like we do for instances.\n\nThe following class member will map unique connection IDs to the source\nStructure for the connection.  Thus we provide the accompanying function for\nquerying that mapping.\n\n        connectionIDs : { }\n        @sourceOfConnection : ( id ) -> Structure::connectionIDs[id]\n\nWe then define, in some class methods, the protocol for creating and\nbreaking connections.  We will then provide some instance methods for\naccessing these class methods more conveniently.\n\n### Making consistent connections\n\nForming a connection takes as input a source structure, a target structure,\nand a JSON data object describing the connection.  It may have any data it\nlikes in it, but the one requirement is that its `id` field is unique (that\nis, not yet mentioned in the `connectionIDs` member defined above).  This\nmethod also requires the source and target to both have IDs.\n\nIt writes data into the source, the target, and the `connectionIDs` object,\nrecording the connection.  It returns true if it was able to create the\nconnection, and false otherwise.  If it returns true, then just before\nreturning, it calls teh `connectionInserted` handlers in both the source and\nthe target (iff they are present), passing the new connection's ID in each\ncase.\n\nWe also call an additional handler, `addConnectionOrigin()`, in the target,\nbecause during interpretation, connections formed in the Output Tree will\nwant to use that handler to mark which `InputStructure` gave rise to them.\nWhether we call it in the source or the target is irrelevant, since it\nshould be tracked only if both are `OutputStructure`s created during\ninterpretation.\n\n        @connect : ( source, target, data ) ->\n            return no unless \\\n                ( data instanceof Object ) and \\\n                ( data.hasOwnProperty 'id' ) and \\\n                ( not Structure::connectionIDs.hasOwnProperty data.id ) and\\\n                ( source instanceof Structure ) and \\\n                ( target instanceof Structure ) and \\\n                source.idIsTracked() and target.idIsTracked()\n            source.connectionWillBeInserted? source, target, data\n            target.connectionWillBeInserted? source, target, data\n            source.addConnectionOrigin? source, target, data\n            source.setAttribute \"_conn #{data.id} data\", data\n            source.setAttribute \"_conn #{data.id} to\", target.id()\n            target.setAttribute \"_conn #{data.id} from\", source.id()\n            Structure::connectionIDs[data.id] = source\n            source.connectionWasInserted? source, target, data\n            target.connectionWasInserted? source, target, data\n            yes\n\nThe convenience function for accessing this from instances should be called\nfrom the source of the connection.\n\n        connectTo : ( target, data ) -> Structure.connect @, target, data\n\nThe following query functions simply make use of the data storage protocol\nestablished by the above function.  For each one, we provide a class method\n(to be consistent with connection creation, and so that connections can be\nqueried even without a particular instance being known) and an instance\nmethod as well, which just redirects the call to the class method, as a\nconvenience.\n\nFirst, functions that find the source, target, or data of a connection,\ngiven its unique ID.  The first one is not strictly necessary, but we\nprovide it for the sake of symmetry.\n\n        @getConnectionSource : ( connectionID ) ->\n            Structure.sourceOfConnection connectionID\n        @getConnectionTarget : ( connectionID ) ->\n            return undefined unless \\\n                ( source = Structure.sourceOfConnection connectionID ) and \\\n                targetID = source.getAttribute \"_conn #{connectionID} to\"\n            Structure.instanceWithID targetID\n        @getConnectionData : ( connectionID ) ->\n            return undefined unless \\\n                source = Structure.sourceOfConnection connectionID\n            source.getAttribute \"_conn #{connectionID} data\"\n        getConnectionSource : ( connectionID ) ->\n            Structure.getConnectionSource connectionID\n        getConnectionTarget : ( connectionID ) ->\n            Structure.getConnectionTarget connectionID\n        getConnectionData : ( connectionID ) ->\n            Structure.getConnectionData connectionID\n\nSecond, functions that can find the list of IDs associated with a given\nStructure instance, either as outgoing connections, incoming connections, or\nboth.\n\n        getConnectionsIn : ->\n            result = [ ]\n            for own key of @attributes\n                if key[...6] is '_conn ' and key[-5...] is ' from'\n                    result.push key[6...-5]\n            result.sort()\n            result\n        getConnectionsOut : ->\n            result = [ ]\n            for own key of @attributes\n                if key[...6] is '_conn ' and key[-3...] is ' to'\n                    result.push key[6...-3]\n            result.sort()\n            result\n        getAllConnections : ->\n            result = @getConnectionsIn()\n            for out in @getConnectionsOut()\n                if out not in result then result.push out\n            result.sort()\n            result\n\nBreaking a connection takes as input the unique ID for the connection, and\nit can then look up all the other relevant data in the `connectionIDs` class\nvariable.  If the ID is not in that object, this function does nothing.\n\nIt will alter both the source and the target, as well as the `connectionIDs`\nstructure.  It will call the `connectionRemoved` event handler in both the\nsource and the target if it succeeds.  It returns true on success and false\non failure.\n\n        @disconnect : ( connectionID ) ->\n            return no unless \\\n                ( source = Structure::connectionIDs[connectionID] ) and \\\n                ( targetID = source.getAttribute \\\n                    \"_conn #{connectionID} to\" ) and \\\n                ( target = Structure.instanceWithID targetID ) and \\\n                ( data = source.getAttribute \"_conn #{connectionID} data\" )\n            source.connectionWillBeRemoved? connectionID\n            target.connectionWillBeRemoved? connectionID\n            source.clearAttributes \"_conn #{connectionID} data\",\n                \"_conn #{connectionID} to\"\n            target.clearAttributes \"_conn #{connectionID} from\"\n            delete Structure::connectionIDs[connectionID]\n            source.connectionWasRemoved? connectionID\n            target.connectionWasRemoved? connectionID\n            yes\n\nThe convenience function for accessing this from instances can be called\nfrom any instance, because it needs the connection's ID.\n\n        disconnect : ( connectionID ) -> Structure.disconnect connectionID\n\nWe also permit clients to update the data for a connection that has already\nbeen made, using the following function.  They must provide the ID for the\nconnection and a key-valuep pair to update in the existing connection data.\nIf `value` is undefined, then any key-value pair associated with the given\nkey will be removed from the connection data.\n\n        @setConnectionData : ( connectionID, key, value ) ->\n            return no unless \\\n                ( key isnt 'id' ) and \\\n                ( source = Structure::connectionIDs[connectionID] ) and \\\n                ( targetID = source.getAttribute \\\n                    \"_conn #{connectionID} to\" ) and \\\n                ( target = Structure.instanceWithID targetID ) and \\\n                ( data = source.getAttribute \"_conn #{connectionID} data\" )\n            source.connectionWillBeChanged? connectionID\n            target.connectionWillBeChanged? connectionID\n            if typeof value is 'undefined'\n                delete data[key]\n            else\n                data[key] = value\n            source.connectionWasChanged? connectionID\n            target.connectionWasChanged? connectionID\n            yes\n\nThe convenience function for accessing this from instances can be called\nfrom any instance, because it needs the connection's ID.\n\n        setConnectionData : ( connectionID, key, value ) ->\n            Structure.setConnectionData connectionID, key, value\n\nWe also define the following function for removing all connections into or\nout of this structure, which is used by `untrackIDs()` and `clearIDs()`,\ndefined earlier.\n\n        removeAllConnections : ->\n            Structure.disconnect id for id in @getAllConnections()\n            child.removeAllConnections() for child in @children()\n\nA sort of inverse of the previous function is to find all connections that\nexist in the attributes of a `Structure` hierarchy and import them into the\nclass-level data structures that should store them.  This is useful if a\ntree has been removed and then moved to a new location.  When it was\nremoved, its connections were removed from `connectionIDs`; when it is\nre-inserted, they need to be re-added.\n\nThis presumes that the source node already has the `\"_conn #{id} to\"` and\n`\"_conn #{id} data\"` attributes and the target already has the\n`\"_conn #{id} from\"` attribute, and that both ends of each connection are\nregistered in `Structure::IDs`.\n\nIf this succeeds (because all the IDs that would need to be added to\n`connectionIDs` were not there, and thus could be added fresh) it returns\ntrue.  If any of the additions failed because the ID in question was already\nin `connectionIDs`, it returns false (and does not overwrite).  Even if it\nreturns false, it still adds all those that it can.\n\n        noticeAllConnections : ->\n            success = yes\n            for id in @getConnectionsOut()\n                if Structure::connectionIDs.hasOwnProperty id\n                    success = no\n                else\n                    Structure::connectionIDs[id] = @\n            # connections in will be handled at the source node\n            for child in @children\n                if not child.noticeAllConnections()\n                    success = no\n            success\n\nWhen replacing one node in a `Structure` hierarchy with another, sometimes\nit is convenient to transfer all connections into or out of the original\nover to the replacement.  We therefore provide the following function that\ndoes this work for you, to make it easier.  If the given `Structure` does\nnot have an ID, this does nothing.  It returns false on failure, true on\nsuccess.\n\n        transferConnectionsTo : ( recipient ) ->\n            return no unless recipient.id()?\n            for id in @getAllConnections()\n                if ( targetID = @getAttribute( \"_conn #{id} to\" ) ) and \\\n                   target = Structure.instanceWithID targetID\n                    @clearAttributes \"_conn #{id} to\"\n                    recipient.setAttribute \"_conn #{id} to\", targetID\n                    target.setAttribute \"_conn #{id} from\", recipient.id()\n                    data = @getAttribute \"_conn #{id} data\"\n                    @clearAttributes \"_conn #{id} data\"\n                    recipient.setAttribute \"_conn #{id} data\", data\n                    Structure::connectionIDs[id] = recipient\n                if ( sourceID = @getAttribute( \"_conn #{id} from\" ) ) and \\\n                   source = Structure.instanceWithID sourceID\n                    @clearAttributes \"_conn #{id} from\"\n                    recipient.setAttribute \"_conn #{id} from\", sourceID\n                    source.setAttribute \"_conn #{id} to\", recipient.id()\n            yes\n\n## Accessibility\n\nA structure A is accessible to a structure B if they have a common ancestor\nand are positioned within that ancestor in such a way that B could cite A as\na premise.\n\nThe officially definition is that a structure is accessible to all of its\nprevious siblings, all the previous siblings of its parent, all the previous\nsiblings of its grandparent, and so on up the ancestor chain.  Note that a\nstructure is not accessible to itself, nor to any of its ancestors.\nConversely, if A is accessible to B, then we say that B is in the scope of\nA.\n\n### Foundational accessibility functions\n\nWe begin with two functions, implementing the accessibility/scope relations.\n\n        isAccessibleTo : ( other ) ->\n            if other not instanceof Structure then return no\n            if not other.parent()? then return no\n            if @parent() is other.parent()\n                @indexInParent() < other.indexInParent()\n            else\n                @isAccessibleTo other.parent()\n        isInTheScopeOf : ( other ) -> other.isAccessibleTo this\n\nFor all the other computations we will want to do with scopes and\naccessibility, we will need iterators over all structures accessible to (or\nin the scope of, respectively) this one.  An iterator for a set S is an\nobject `I` such that repeated calls to `I.next()` yield new elements of S\nuntil S is exhausted, at which point all future calls to `I.next()` return\nnull.\n\nThe first iterator function lists all structures accessible to this one, in\nreverse order in the hierarchy.  That is, all previous siblings are yielded\nfrom right to left, then all previous siblings of the parent, and so on.\n\n        iteratorOverAccessibles : ->\n            ancestor : this\n            sibling : this\n            next : ->\n                if not @ancestor? then return null\n                if ( @sibling = @sibling.previousSibling() )?\n                    return @sibling\n                @sibling = @ancestor = @ancestor.parent()\n                @next()\n\nThe second iterator function lists all structures in the scope of this one,\nin forward order in the hierarchy.  That is, all descendants of the next\nsibling are yielded, then all descendants of the subsequent sibling, and so\non, in the order of a postorder tree traversal.\n\n        iteratorOverScope : ->\n            chain : [ this ]\n            next : ->\n                if @chain.length is 0 then return null\n                last = @chain.pop()\n                if ( walk = last.nextSibling() )?\n                    @chain.push walk\n                    @chain.push walk while ( walk = walk.children()[0] )?\n                    @chain[@chain.length-1]\n                else if @chain.length > 0\n                    @chain[@chain.length-1]\n                else\n                    null\n\n### Accessibility convenience functions\n\nWe then create two functions that can use these iterators for searching or\nenumeration.  Call `first(iterator,predicate)` to get the first element the\niterator yields satisfying the predicate.  Call `all(iterator,prediacte)`\nwith the obvious related meaning.  In each case, the predicate can be\nomitted to get the first element or all elements (no restrictions).  If the\npredicate is never satisfied, `first` returns undefiend, and `all` returns\nan empty array.\n\n        first = ( iterator, predicate = -> yes ) ->\n            while ( next = iterator.next() )?\n                if predicate next then return next\n        all = ( iterator, predicate = -> yes ) ->\n            result = [ ]\n            while ( next = iterator.next() )?\n                if predicate next then result.push next\n            result\n\nWe can then write useful functions whose names give their obvious meanings,\nby combining the tools above.\n\n        firstAccessible : ( predicate = -> yes ) ->\n            first @iteratorOverAccessibles(), predicate\n        allAccessibles : ( predicate = -> yes ) ->\n            all @iteratorOverAccessibles(), predicate\n        firstInScope : ( predicate = -> yes ) ->\n            first @iteratorOverScope(), predicate\n        allInScope : ( predicate = -> yes ) ->\n            all @iteratorOverScope(), predicate\n\n## Feedback\n\nWe create a stub function here for passing feedback to the LDE client.  In\nthis module, it does nothing but report to the console that it is not yet\nimplemented.  When the LDE module imports this one, it will overwrite this\nwith a real implementation that connects into the LDE's feedback mechanisms.\n\nThe intent is to pass a single feedback JSON structure that would be passed\nto the client.\n\n        @feedback : ( feedbackData ) ->\n            console.log 'Structure class feedback not implemented:',\n                feedbackData\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.Structure = Structure\n"]}