{"version":3,"sources":["lde.litcoffee"],"names":["CurrentPhase","EventEmitter","Feedback","InputModifier","InputStructure","InputTree","LDEWorker","OutputStructure","OutputTree","Structure","ValidationQueue","WorkerPool","className","classObj","clearModificationTimer","deserializeIfNeeded","expectedArgumentCount","feedback","functions","isInTheInputTree","isInTheOutputTree","key","modificationStartDelay","modificationTimer","numberOfCores","os","ref","ref1","setModificationTimer","signalValidationPhaseComplete","startModificationSoon","validationCompletionSent","value","hasProp","hasOwnProperty","require","WorkerGlobalScope","importScripts","self","getInputTree","getOutputTree","getInternalState","inputTree","toJSON","outputTree","setInternalState","state","untrackIDs","fromJSON","trackIDs","reset","children","attributes","id","structure","parent","jsonOrInputStructure","insertStructure","newChild","parentID","insertionIndex","disallowed","newInstance","instanceWithID","length","results","clearAttributes","apply","insertChild","deleteStructure","subtreeID","subtree","removeFromParent","replaceStructure","newTree","transferConnections","replaceWith","transferConnectionsTo","setStructureAttribute","changeID","setAttribute","insertConnection","sourceID","targetID","data","source","target","connect","removeConnection","getConnectionSource","getConnectionTarget","disconnect","setConnectionAttribute","setConnectionData","runModification","callback","updateAllConnections","node","child","i","len","updateConnections","runInterpretation","setTimeout","clearTimeout","maybeCorrect","removeConnectionsOutside","toBeValidated","whereToCallJustChanged","connection","j","k","len1","len2","ref2","ref3","getConnectionsIn","type","getConnectionsOut","clearAlreadyStarted","recursiveInterpret","Array","subject","details","error","stack","citation","cited","l","len3","method","newCitations","ref4","isDirty","push","lookUpAllCitations","JSON","stringify","lastCitationLookup","justChanged","numberAvailable","addEventListener","event","args","command","feedbackData","slice","call","indexOf","postMessage","payload","window","EventTarget","exports","addListener","removeEventListener","removeListener","dispatchEvent","Event","emit","setSize","size","worker","Math","max","available","pop","getAvailableWorker","w","giveWorkerBack","dequeue","working","reboot","enqueue","priority","validate","this","structureBeingValidated","splice","whenReady","markDirty","prototype","instanceJustChanged","instance","origin","getAttribute","subclasses","Worker","setPhase","phase"],"mappings":"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","file":"lde.js","sourcesContent":["\n# Lurch Deductive Engine (LDE) Main File\n\nThis file imports all the other modules in this repository and exposes them\nthrough its `exports` member, so that clients can import just this one file\nand have access to all the functionality from all the source files in this\nrepository.\n\nImport the structure class; it will be exported to clients as well using\ncode at the end of this file.  The following lines detect whether this is\nbeing used in Node.js or a WebWorker, or a WebWorker-like background thread\nwithin Node.js, and do the right thing in any case.\n\n    if require?\n        os = require 'os'\n        { Structure } = require './structure'\n        { InputStructure, InputModifier } = require './input-structure'\n        { OutputStructure } = require './output-structure'\n        { LDEWorker } = require './worker'\n    else if WorkerGlobalScope?\n        importScripts 'structure.js'\n        importScripts 'input-structure.js'\n        importScripts 'output-structure.js'\n        importScripts 'worker.js'\n    else if self?.importScripts?\n        importScripts 'release/structure.js'\n        importScripts 'release/input-structure.js'\n        importScripts 'release/output-structure.js'\n        importScripts 'release/worker.js'\n\n## The Input Tree\n\nThe Input Tree is a global instance of the `InputStructure` class,\nrepresenting the content of the user's document as expressed to this module\nby the client.  We define the variable here and initialize it later.\n\n    InputTree = null\n\nClients should treat the global Input Tree as read-only, *except* through\nthe API provided in [the following section](#the-main-api).  But we provide\nthe following function for two reasons.\n\n 1. It is usable to *read* the Input Tree.  Although the client could also\n    use it to manipulate that tree, doing so violates the preconditions of\n    this module, and thus discards any behavior guarantees it provides.\n 2. As an important special case of the previous, it is usable in the unit\n    testing suite to verify that the API below is manipulating the tree\n    according to its specifications.\n\nThe following function returns the root of the Input Tree structure.\n\n    functions = { }\n    functions.getInputTree = -> InputTree\n\nClients can also replace the entire Input Tree in certain circumstances; see\ndetails in the following section.\n\n## The Output Tree\n\nThe Output Tree is a global instance of the `OutputStructure` class,\nrepresenting the content of the user's document as interpreted by this\nmodule from the Input Tree.  We define the variable here and initialize it\nlater.\n\n    OutputTree = null\n\nClients do not *ever* write to the Output Tree.  They can read from it,\nhowever, for the same two reasons as given for the Input Tree in the\nprevious section.  Thus the following function returns the root of the\nOutput Tree structure.\n\n    functions.getOutputTree = -> OutputTree\n\nClients may occasionally wish to replace the entire Input and Output Tree\npair.  This most likely happens when the state of the LDE is saved by\nfetching that pair and saving it to some filesystem, then later the state\nis restored by fetching the archived versions and putting them back into the\nLDE.\n\nBoth trees should be inserted at once, to keep things consistent, so we\nprovide a function for querying both trees at once, and another function for\nsetting both trees at once.  So that clients don't need to think about the\nOutput Tree at all, we just call the tree pair the LDE's \"internal state.\"\n\n    functions.getInternalState = ->\n        inputTree : InputTree.toJSON()\n        outputTree : OutputTree.toJSON()\n    functions.setInternalState = ( state ) ->\n        InputTree?.untrackIDs()\n        InputTree = Structure.fromJSON state.inputTree\n        InputTree.trackIDs()\n        OutputTree?.untrackIDs()\n        OutputTree = Structure.fromJSON state.outputTree\n        OutputTree.trackIDs()\n\nWe then use those functions to define a setup routine for the LDE's internal\nstate.  It clears out and re-initializes both the Input and Output Trees to\nbe empty.\n\nThe Input Tree gets the ID \"root\" and the Output Tree gets the ID \"OT root\".\nWe do not use the symmetric name \"IT root\" for the Input Tree's root,\nbecause the Input Tree is client-facing, and we do not wish to put on the\nclient the burden of using the \"IT\" prefix.  But we must distinguish the\ntwo, because these IDs are used by the global `Structure` class to\ndistinguish `Structure` instances, including those in both the Input Tree\nand the Output Tree.  Thus node IDs must be globally unique across both\ntrees.\n\nLater this module defines a pool of background thread workers and a queue of\nvalidation tasks for them to process.  This reset function also calls the\nreset function in both of those objects, to terminate all running work and\nclear out the queue of pending work, thus making the LDE at a completely\nfresh start.  We call them here with CoffeeScript's `?` syntax because the\nfirst time this routine is run, those objects are not fully set up, but all\nfuture times, they will be.\n\n    functions.reset = ->\n        functions.setInternalState\n            inputTree :\n                className : 'InputStructure'\n                children : [ ]\n                attributes : id : 'root'\n            outputTree :\n                className : 'OutputStructure'\n                children : [ ]\n                attributes : id : 'OT root'\n        WorkerPool?.reset?()\n        ValidationQueue?.reset?()\n\nUse the `reset()` function to initialize our internal state.\n\n    functions.reset()\n\n## Utilities\n\nWe create functions for use privately in this module, for verifying that a\nparticular structure is a descendant of the Input Tree or the Output Tree,\nrespectively.\n\n    isInTheInputTree = ( structure ) ->\n        while structure instanceof InputStructure\n            if structure is InputTree then return yes\n            structure = structure.parent()\n        no\n    isInTheOutputTree = ( structure ) ->\n        while structure instanceof OutputStructure\n            if structure is OutputTree then return yes\n            structure = structure.parent()\n        no\n\nWe create another function for use privately in this module, which takes a\nparameter that may be an `InputStructure` instance or a JSON serialization\nthereof.  It returns an `InputStructure` instance; in the first case by\ndoing nothing, and in the second case by attempting to deserialize it.\n\n    deserializeIfNeeded = ( jsonOrInputStructure ) ->\n        if jsonOrInputStructure instanceof InputStructure\n            jsonOrInputStructure\n        else\n            Structure.fromJSON jsonOrInputStructure\n\n## The Main API\n\nThis module presents to clients a seven-function API defined in this\nsection.  Each of these functions manipulates the global Input Tree.\n\nEvery one of these functions, after manipulating the tree, also calls\n`startModificationSoon()`.  That function is documented in\n[the Modification Phase section below](#the-modification-phase).\n\n### Editing Structures in the Input Tree\n\nThe following insertion function deserializes the given structure from JSON,\nfinds the descendant of the Input Tree that has the given ID, and inserts\nthe deserialized version as one of its children, at the given index. If\nanything goes wrong in that process then it does nothing.  The ID must be\nthe ID of a Structure, as defined in that class (a string ID stored in the\nattribute \"id\").\n\nIt is also permitted for the first parameter to be an actual structure\ninstance rather than a JSON serialization of one.  This is primarily useful\nin very simple clients, where the LDE module will be loaded directly into\nthe client.\n\nIn either case, attributes whose keys begin with an underscore are not\npermitted; they are for internal use only.  Such attributes will be stripped\nbefore the structure is inserted.\n\nAll newly inserted structures and their descendants have all their IDs\ntracked.\n\n    functions.insertStructure = ( newChild, parentID, insertionIndex ) ->\n        if ( parent = Structure.instanceWithID parentID )? and \\\n           ( 0 <= insertionIndex <= parent.children().length ) and \\\n           ( isInTheInputTree parent ) and \\\n           ( newInstance = deserializeIfNeeded newChild )? and \\\n           ( newInstance instanceof InputStructure )\n            disallowed = ( key \\\n                for own key of newInstance.attributes when key[0] is '_' )\n            if disallowed.length > 0\n                newInstance.clearAttributes disallowed...\n            parent.insertChild newInstance, insertionIndex\n            newInstance.trackIDs()\n            startModificationSoon()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, removes it from its\nparent and stops tracking all IDs within it.\n\n    functions.deleteStructure = ( subtreeID ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheInputTree subtree ) and subtree isnt InputTree\n            subtree.removeFromParent()\n            subtree.untrackIDs()\n            startModificationSoon()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, deserializes the\nsecond argument as a Structure object and uses it to replace the original\nstructure in the Input Tree.  The deserialized version will have all of\nthe IDs in its hierarchy tracked.  This module will also stop tracking all\nIDs in the structure that was removed.\n\nIn either case, attributes whose keys begin with an underscore are not\npermitted; they are for internal use only.  Such attributes will be stripped\nbefore the structure is inserted.\n\nThis functionl, also, permits passing an actual `InputStructure` instance as\nthe second argument, rather than a serialized version.\n\n    functions.replaceStructure =\n    ( subtreeID, newTree, transferConnections = no ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheInputTree subtree ) and subtree isnt InputTree and \\\n           ( newInstance = deserializeIfNeeded newTree )? and \\\n           ( newInstance instanceof InputStructure )\n            disallowed = ( key \\\n                for own key of newInstance.attributes when key[0] is '_' )\n            if disallowed.length > 0\n                newInstance.clearAttributes disallowed...\n            subtree.replaceWith newInstance\n            if transferConnections\n                subtree.transferConnectionsTo newInstance\n            subtree.untrackIDs()\n            newInstance.trackIDs()\n            startModificationSoon()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, calls its member\nfunction for setting an attribute with the given key and value.  As per the\nrequirements of the `Structure.setAttribute` function, be sure to provide\nonly values that are amenable to `JSON.stringify`.\n\nThe key may not begin with an underscore; such key names are reserved for\ninternal use by the LDE.  If the given key begins with an underscore, this\nfunction does nothing.\n\n    functions.setStructureAttribute = ( subtreeID, key, value ) ->\n        if key[0] is '_' then return\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           isInTheInputTree subtree\n            if key is 'id'\n                subtree.changeID value\n            else if typeof value is 'undefined'\n                subtree.clearAttributes key\n            else\n                subtree.setAttribute key, value\n            startModificationSoon()\n\n### Editing Connections in the Input Tree\n\nThe following function adds a connection between two existing nodes in the\nInput Tree.  It accepts three parameters, the ID of the source node, the ID\nof the target node, and the JSON data for the connection.  That data must at\nleast contain an `id` field for the connection, which must be unique across\nthe entire Input Tree.  If any of these conditions are not satisfied, this\nfunction does nothing.  Otherwise, it creates the connection.\n\n    functions.insertConnection = ( sourceID, targetID, data ) ->\n        return no unless \\\n            ( source = Structure.instanceWithID sourceID ) and \\\n            ( target = Structure.instanceWithID targetID ) and \\\n            ( isInTheInputTree source ) and ( isInTheInputTree target )\n        if Structure.connect source, target, data\n            startModificationSoon()\n\nThe following function removes a connection between two nodes in the Input\nTree.  It takes just one parameter, the unique ID of the connection to\nremove.  It returns no if there is no such connection in the Input Tree, and\nyes if there is one; in the latter case, it removes it, otherwise it does\nnothing.\n\n    functions.removeConnection = ( id ) ->\n        return no unless \\\n            ( isInTheInputTree Structure.getConnectionSource id ) and \\\n            ( isInTheInputTree Structure.getConnectionTarget id )\n        if Structure.disconnect id\n            startModificationSoon()\n\nThe following function permits editing the attributes of a connection in the\nInput Tree.  It takes three parameters, a connection ID, a key, and a value.\nIf there is a connection in the Input Tree with the given unique ID, then\nthis function edits its attributes by assigning the given key-value pair,\noverwriting any with the same key that may have been there.  If the value is\nundefined (or omitted) then this function removes any old key-value pair\nwith the same key.  If any of the requirements given above are not\nsatisfied, the function does nothing.\n\n    functions.setConnectionAttribute = ( id, key, value ) ->\n        return no unless \\\n            ( isInTheInputTree Structure.getConnectionSource id ) and \\\n            ( isInTheInputTree Structure.getConnectionTarget id )\n        if Structure.setConnectionData id, key, value\n            startModificationSoon()\n\n### Phases of computation\n\nThe following sections define the modification, interpretation, and\nvalidation phases of LDE computation.  To track which one is currently\nhappening, we introduce the following global variable.  It defaults to null,\nmeaning none of those phases of computation are currently happening.\n\n    CurrentPhase = null\n\n### The Modification Phase\n\nIn the Modification Phase, the LDE runs the `updateConnections()` function\nin every `InputModifier` instance in the Input Tree, in no specified order.\nThe Modification Phase then hands off work to the Interpretation Phase,\nwhich always follows immediately after it.\n\nThis function is asynchronous, calling a callback when complete.\n\nAlthough it contains no asynchronous components in its current\nimplementation, we write its signature that way so that it can be made\nasynchronous later if we need to make it more efficient, and clients will\nnot need to change their use of it.\n\nFor the explanation of the `clearModificationTimer()` function, see further\ndown in this section.\n\n    functions.runModification = ( callback ) ->\n        clearModificationTimer()\n        CurrentPhase = 'modification'\n        updateAllConnections = ( node ) ->\n            node.updateConnections() if node instanceof InputModifier\n            updateAllConnections child for child in node.children()\n        updateAllConnections InputTree\n        CurrentPhase = null\n        functions.runInterpretation callback\n\nWe will want to trigger the modification phase after any change to the Input\nTree.  But we won't want to do so instantaneously, because the modification\nphase sets off the interpretation phase, which then sets off validation, all\nof which amounts to a lot of work.  We wouldn't want that much work to be\ntriggered after every small change to the Input Tree.  So instead we adopt\nthe following strategy.\n\nWhen a change comes in to the Input Tree, we take note of it and plan to\nstart the modification phase in a short while (using the delay given below).\nIf, while we're waiting for that delay to elapse, we get another change to\nthe Input Tree, then we cancel the old timer and start a new one afresh\ninstead.  Also, while we're waiting, if a client starts the modification\nphase manually, we cancel our timer, of course.\n\n    modificationStartDelay = 200 # ms\n    modificationTimer = null\n    setModificationTimer = ( callback ) ->\n        modificationTimer = setTimeout callback, modificationStartDelay\n    clearModificationTimer = ->\n        if modificationTimer then clearTimeout modificationTimer\n    startModificationSoon = ->\n        clearModificationTimer()\n        setModificationTimer -> functions.runModification()\n\n### The Interpretation Phase\n\nIn the Interpretation Phase, the LDE runs the `recursiveInterpret()`\nfunction in the root of the Input Tree, replacing the Output Tree with the\nresult.  Like the above function, this one is asynchronous even though its\ncurrent implementation is synchronous.\n\nAfter interpretation, this function traverses the Output Tree and ensures\nthat every connection into or out of any node in it leads to another node in\nthe Output Tree.  (Any connection that leads outside that tree is removed.)\n\nFor the type of feedback this sends, see\n[the API documentation page for the LDE](https://lurchmath.github.io/lde/site/api-lde/).\n\n    functions.runInterpretation = ( callback ) ->\n        CurrentPhase = 'interpretation'\n\nFirst, define the function that ensures the Output Tree does not have\nconnections that lead outside of itself.  We will use this later if needed.\n\n        removeConnectionsOutside = ( node ) ->\n            for connection in node.getConnectionsIn()\n                if not isInTheOutputTree node.getConnectionSource connection\n                    node.disconnect connection\n                    node.feedback\n                        type : 'connection removed'\n                        id : connection\n            for connection in node.getConnectionsOut()\n                if not isInTheOutputTree node.getConnectionTarget connection\n                    node.disconnect connection\n                    node.feedback\n                        type : 'connection removed'\n                        id : connection\n            removeConnectionsOutside child for child in node.children()\n\nNext, produce the Output Tree, using the above routine and sending feedback\nif and when needed.\n\n        didReplaceOutputTree = no\n        InputStructure.clearAlreadyStarted()\n        try\n            maybeCorrect = InputTree.recursiveInterpret()\n            if maybeCorrect not instanceof Array\n                feedback\n                    subject : 'root'\n                    type : 'interpretation error'\n                    details : 'Interpretation did not produce an array.'\n            else if maybeCorrect[0] not instanceof OutputStructure\n                feedback\n                    subject : 'root'\n                    type : 'interpretation error'\n                    details : 'Interpretation did not produce an\n                        OutputStructure'\n            else\n                OutputTree = maybeCorrect[0]\n                removeConnectionsOutside OutputTree\n                feedback subject : 'root', type : 'updated LDE state'\n        catch e\n            feedback\n                subject : 'root'\n                type : 'interpretation error'\n                details : e.stack\n        InputStructure.clearAlreadyStarted()\n\nFirst, we mark the interpretation phase as complete and call its callback.\nThen we go ahead and trigger any subsequent validation by visiting every\nnode of the Output Tree that is marked dirty and calling its `justChanged()`\nfunction.  We also call `justChanged()` in any node whose citation\ndictionary (as computed by `lookUpAllCitations()`) has changed since the\nlast time it was computed.\n\nNote that as of this writing, interpretation is in its least efficient\nstate; it always replaces the entirety of the Output Tree with a new one,\nwhich is therefore entirely dirty.  Consequently, these checks are not yet\nrelevant.  The entire Output Tree will be revalidated after every run of\ninterpretation.  But when greater efficiencies are added to interpretation\nlater, these will matter.\n\nWe also track whether the traversal of the Output Tree enqueues any\nvalidation tasks or not.  If it doesn't, we sent the \"validation complete\"\nfeedback message immediately.  This requires paying attention to two\npossibilities.  It may be that tasks are still running in workers, in which\ncase validation is not complete and we should avoid signalling so.  Or it\nmay be that tasks were run but were instantaneous, in which case validation\ncompletion was signalled automatically when those tasks completed, and thus\nwe should not signal it again.  In every other case, we should signal it.\n\n        CurrentPhase = 'starting validation'\n        callback?()\n        toBeValidated = [ ]\n        whereToCallJustChanged = ( node ) ->\n            whereToCallJustChanged child for child in node.children()\n            if node.isDirty() then return toBeValidated.push node\n            newCitations = node.lookUpAllCitations()\n            if JSON.stringify( newCitations ) isnt \\\n               JSON.stringify( node.lastCitationLookup )\n                node.lastCitationLookup = newCitations\n                return toBeValidated.push node\n            for type in [ 'premises', 'reasons' ]\n                for method in [ 'connections', 'labels' ]\n                    for citation in node.lastCitationLookup[type][method]\n                        cited = Structure.instanceWithID citation.cited\n                        if cited?.isDirty()\n                            return toBeValidated.push node\n        validationCompletionSent = no\n        whereToCallJustChanged OutputTree\n        node.justChanged?() for node in toBeValidated\n        if not validationCompletionSent and \\\n           WorkerPool.numberAvailable() is WorkerPool.length\n            signalValidationPhaseComplete()\n        CurrentPhase = null\n\n### Event Listeners\n\nIf the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners handle\nmessages of eight types:\n\n * `insertStructure`, with three arguments, which calls the\n   `insertStructure` function defined above and sends no messages back\n * `deleteStructure`, with one argument, which calls `deleteStructure` and\n   sends no messages\n * `replaceStructure`, with two arguments, which calls `replaceStructure`\n   and sends no messages\n * `setStructureAttribute`, with three arguments, which calls\n   `setStructureAttribute` and sends no messages\n * `insertConnection`, with three arguments, which calls the\n   `insertConnection` function defined above and sends no messages back\n * `removeConnection`, with one argument, which calls the\n   `removeConnection` function defined above and sends no messages back\n * `setConnectionAttribute`, with three arguments, which calls the\n   `setConnectionAttribute` function defined above and sends no messages\n   back\n * `getInputTree`, with zero arguments, which sends back a message\n   containing the JSON serialized form of the document, as fetched using the\n   `getInputTree` function defined above\n * `getOutputTree`, with zero arguments, which sends back a message\n   containing the JSON serialized form of the document, as fetched using the\n   `getOutputTree` function defined above\n * `getInternalState`, with zero arguments, which sends back a message\n   containing both of the previous two results (Input and Output Trees)\n * `setInternalState` can be passed a single argument, a previous response\n   to the `getInternalState` query, to restore the Input and Output Trees\n   to the state they were in at the time of that query.\n * `reset` takes no parameters and calls `setInternalState` with blank Input\n   and Output Trees.\n\n\n    if WorkerGlobalScope? or self?.importScripts?\n\nHere are the numbers of arguments we accept for each message we accept.\nEach is an array, any number in the array is acceptable.\n\n        expectedArgumentCount =\n            insertStructure : [ 3 ]\n            deleteStructure : [ 1 ]\n            replaceStructure : [ 2, 3 ]\n            setStructureAttribute : [ 2, 3 ]\n            insertConnection : [ 3 ]\n            removeConnection : [ 1 ]\n            setConnectionAttribute : [ 2, 3 ]\n            getInputTree : [ 0 ]\n            getOutputTree : [ 0 ]\n            getInternalState : [ 0 ]\n            setInternalState : [ 1 ]\n            reset : [ 0 ]\n            runModification : [ 0 ]\n\nMessages received expect data arrays of the form `[ command, args... ]`.\n\n        self.addEventListener 'message', ( event ) ->\n            [ command, args... ] = event.data\n\nAnything with the right number of arguments is passed on to the\ncorresponding function.  That function may or may not do anything, depending\non whether the data is in the correct form.\n\n            if args.length in ( expectedArgumentCount[command] ? [ ] )\n                if command is 'getInputTree'\n                    self.postMessage\n                        type : 'getInputTree'\n                        payload : functions.getInputTree().toJSON()\n                else if command is 'getOutputTree'\n                    self.postMessage\n                        type : 'getOutputTree'\n                        payload : functions.getOutputTree().toJSON()\n                else\n                    functions[command] args...\n\nWe also add the following function that is useless in production, but is\nuseful in testing.  It transmits feedback about any given node in the\nInput Tree.\n\n            if command is 'sendFeedback'\n                [ id, feedbackData ] = args\n                subject = Structure.instanceWithID id\n                if subject?.feedback?\n                    subject.feedback feedbackData\n                else\n                    self.postMessage \"No such Structure: #{id}\"\n\n## Feedback\n\nIf we have been loaded in node.js or the browser, create a global feedback\nmechanism called `Feedback`, an instance of `EventTarget` or `EventEmitter`,\ndepending on whether this is node.js or the browser.\n\n    if window? and EventTarget?\n        Feedback = window.Feedback = new EventTarget() # browser\n    if require? and exports?\n        EventEmitter = require 'events'\n        Feedback = exports.Feedback = new EventEmitter() # node\n        Feedback.addEventListener = Feedback.addListener # make API same\n        Feedback.removeEventListener = Feedback.removeListener # ditto\n\nWe also create a function global to this module that implements the sending\nof feedback to our context.  In node.js or the browser, we emit an event\nfrom the `Feedback` object just created.  If we are running in a `WebWorker`\n(or node.js's equivalent of one) then we post a message to our parent\ninstead.\n\n    feedback = ( feedbackData ) ->\n        if Feedback?.dispatchEvent?\n            event = new Event 'feedback'\n            event.data = feedbackData\n            Feedback.dispatchEvent event\n        else if Feedback?.emit?\n            Feedback.emit 'feedback', feedbackData\n        else if self?.postMessage?\n            self.postMessage\n                type : 'feedback'\n                payload : feedbackData\n\nInstall that function in the `Structure` class, overriding the stub class\nmethod that module installs in itself.\n\n    Structure.feedback = feedback\n\nWe also have the following handy function for signalling when validation\nfeedback is complete.  It marks when it has done so, because this is useful\nto the final block of code in the `runInterpretation()` function defined\nabove; see comments there for details.\n\n    validationCompletionSent = no\n    signalValidationPhaseComplete = ->\n        feedback\n            subject : 'OT root'\n            type : 'validation complete'\n            details : 'The validation phase just completed.'\n        validationCompletionSent = yes\n\n## Validation workers\n\nThe LDE keeps a global pool of `LDEWorker` instances that wait to be used\nfor validating the Output Tree.  These are classified as available or\nunavailable, and one can ask the pool to give it an available worker, thus\nmarking it unavailable, and return it when done, thus marking it available\nagain.  One can also set the size of the pool.\n\nNote that none of these functions verify that the worker is or is not\nrunning.  We require that clients only return a worker to the pool if it is\ndone running.  If they wish to terminate its work and return it once it has\nreset itself, they can call `myWorker.reboot` and pass a callback that\napplies `returnAvailableWorker`, because the reboot guarantees that the\nworker is ready for use when its callback is called.\n\n    WorkerPool = [ ]\n    WorkerPool.setSize = ( size ) ->\n        size = Math.max size, 1\n        while WorkerPool.length < size\n            worker = new LDEWorker()\n            worker.available = yes\n            WorkerPool.push worker\n        # WorkerPool = WorkerPool[...size] would discard inner funcs., so:\n        while WorkerPool.length > size then WorkerPool.pop()\n    WorkerPool.getAvailableWorker = ->\n        for worker in WorkerPool\n            if worker.available\n                worker.available = no\n                return worker\n        undefined\n    WorkerPool.numberAvailable = ->\n        ( w for w in WorkerPool when w.available ).length\n\nWhenever a worker becomes available, we call the dequeueing function defined\nin the next section, below, in case it has work that it wants to assign to\nthat worker.  Also, if this is the final worker to be given back, and the\nvalidation queue has nothing left to be done in it, we emit feedback saying\nthat validation is complete.\n\nNote that we verify that we're not in the phase of starting validation, but\ncoincidentally at a moment in which the worker queue is empty, because we\ncan't signal validation complete until all potential validation tasks have\nat least had a chance to start.\n\n    WorkerPool.giveWorkerBack = ( worker ) ->\n        worker.available = yes\n        if ValidationQueue.length > 0\n            ValidationQueue.dequeue()\n        else if CurrentPhase is null and \\\n                WorkerPool.numberAvailable() is WorkerPool.length\n            signalValidationPhaseComplete()\n\nWe write a function to compute the number of cores available on the user's\nmachine, either in Node.js or the browser, then set the pool size to be one\nless than the number of cores (so that we leave one core for the UI thread).\n\n    numberOfCores = ->\n        navigator?.hardwareConcurrency ? os?.cpus?()?.length ? 1\n    WorkerPool.setSize numberOfCores() - 1 # setSize caps this below at 1\n\nWe will also want to be able to reset the validation phase, meaning that all\nvalidation should stop and the queue be emptied without any further work\nbeing assigned to workers.  This is useful if the user discards all their\nwork in the client and wishes to start a new document, for example.\n\nWe split this task into two parts: stopping all workers and emptying the\nqueue.  Stopping all workers happens with the following function; emptying\nthe queue happens with a function defined in the next section.\n\nNote that this function does *not* call `giveWorkerBack()`, so that one\nmight call `reset()` here and then in the validation queue, in either order.\nIf we used `giveWorkerBack()` it would start validating the next job\nimmediately, which is not the intended result.  But calling this function\nwithout emptying the validation queue will result in pausing all work\nwithout emptying that queue.\n\n    WorkerPool.reset = ->\n        working =\n            ( worker for worker in WorkerPool when not worker.available )\n        for worker in working\n            worker.reboot()\n            worker.available = yes\n\n## Validation priority queue\n\nThis module tracks a list of the `OutputStructure` instances that are\nawaiting validation.  Validation will be run on these using the workers from\nthe pool just defined.  We let clients enqueue structures to be validated,\ntogether with priorities, which should be numbers (and default to zero).\nThis feature permits clients to prioritize things the users care about (such\nas the work that's currently visible on the user's screen) above other\nthings (such as work on which the user is not currently focusing).\n\n    ValidationQueue = [ ]\n\nClients may enqueue any `OutputStructure` with a validate routine.  We keep\nthe queue in order from lowest-priority items at the beginning of the array\nto highest-priority items at the end of the array.  Each item is simply an\nobject with `structure` and `priority` fields.\n\n    ValidationQueue.enqueue = ( structure, priority = 0 ) ->\n        return unless \\\n            ( structure instanceof OutputStructure ) and \\\n            ( typeof structure.validate is 'function' )\n\nIf the structure is already enqueued for processing, this function should do\nnothing.  We loop here to check that.\n\n        for record in @ then if record.structure is structure then return\n\nIf the structure is currently being processed by a worker, we must first\nreboot that worker before re-enqueueing this worker for validation.\n\n        for worker in WorkerPool\n            if worker.structureBeingValidated is structure\n                delete worker.structureBeingValidated\n                worker.reboot()\n                WorkerPool.giveWorkerBack worker\n\nWe can safely insert.\n\n        insertionIndex = 0\n        while ( insertionIndex < ValidationQueue.length ) and \\\n              ( ValidationQueue[insertionIndex].priority < priority )\n            insertionIndex++\n        ValidationQueue.splice insertionIndex, 0,\n            structure : structure\n            priority : priority\n\nWhenever we add an item to the queue, we also immediately attempt to\ndequeue, because it may be the case that there is a worker available to\nhandle the processing of the structure we just added to the queue.  (More\nimportantly, it may be the case that no validation is currently running, and\nthe dequeue function will start it up.)\n\n        ValidationQueue.dequeue()\n\nClients may dequeue the highest-priority structure for processing provided\nthat (a) there is an item on the queue to dequeue, (b) we are not in the\nmiddle of interpretation or validation, and (c) there is a free worker in\nthe worker pool to which we can assign the job of validating the structure\nthat would be dequeued.\n\nThis function automatically dequeues the structure, runs its validation\nroutine, passes that validation routine the worker that can be used in\nbackground processing, and sets the validation routine's callback to be one\nthat puts the worker back on the pool of available workers.\n\nThus validation routines will typically assign a job to the worker, get the\nresult, and then call the callback.  Very quick validation routines can just\ndo their work and call the callback, ignoring the worker.\n\n    ValidationQueue.dequeue = ->\n        return unless \\\n            ( CurrentPhase isnt 'modification' ) and \\\n            ( CurrentPhase isnt 'interpretation' ) and \\\n            ( ValidationQueue.length > 0 ) and \\\n            ( worker = WorkerPool.getAvailableWorker() )?\n        structure = ValidationQueue.pop().structure\n        worker.whenReady ->\n            worker.structureBeingValidated = structure\n            structure.validate worker, ->\n                delete worker.structureBeingValidated\n                structure.markDirty no\n                WorkerPool.giveWorkerBack worker\n\nAs stated in the previous section, resetting the validation phase means all\nvalidation should stop and the queue be emptied without any further work\nbeing assigned to workers.\n\nWe split this task into two parts: stopping all workers and emptying the\nqueue.  Stopping all workers happens with the `reset()` function in the\n`WorkerPool` object.  Emptying the queue happens here.\n\n    ValidationQueue.reset = ->\n        ValidationQueue.splice 0, ValidationQueue.length\n\n## Handling Output Tree changes\n\nThe interpretation phase completes by calling `justChanged()` in all nodes\nof the Output Tree that were changed.  The default implementation just\ndefers computation to a non-existant class method `instanceJustChanged()`,\nwhich we can override here to use the validation queue we just defined.\n\nIf the structure has no validation routine, do nothing.  If its origin\n`InputStructure` has validation priority null, do nothing (because that\nmeans \"skip this\").  Othwerise, enqueue it for validation with the\nappropriate priority obtained from its origin (defaulting to zero).  But\nbefore enqueueing for validation, look up and store all its citations for\nlater reference and comparison.  (We do this before enqueueing in case its\nvalidation routine is synchronous and might be called immediately upon\nenqueueing.)\n\n    OutputStructure::instanceJustChanged = ( instance ) ->\n        return unless typeof instance.validate is 'function'\n        priority = @origin?.getAttribute 'validation priority'\n        return if priority is null\n        if typeof priority isnt 'number' then priority = 0\n        instance.lastCitationLookup = instance.lookUpAllCitations()\n        instance.feedback type : 'validation queueing'\n        ValidationQueue.enqueue instance, priority\n\n## Module exports\n\nExpose those functions and classes that clients may access.\n\n    if exports?\n        for own className, classObj of Structure::subclasses\n            exports[className] = classObj\n        exports[key] = functions[key] for own key, value of functions\n        exports.WorkerPool = WorkerPool\n        exports.ValidationQueue = ValidationQueue\n        exports.Worker = LDEWorker\n\nWe also expose the following function only for testing purposes.  It lets\nthe client set the current phase (modification, interpretation, validation)\nof the LDE, which ordinarily clients should never touch.  This is here only\nfor use in the testing suite.\n\n        exports.setPhase = ( phase ) -> CurrentPhase = phase\n"]}