{"version":3,"sources":["lde.litcoffee"],"names":["LDEDocument","Structure","isInTheDocument","releaseAllIDs","require","exports","getID","getDocument","structure","parent","hierarchy","child","i","len","ref","results","releaseID","children","length","insert","json","parentID","insertionIndex","newInstance","instanceWithID","fromJSON","setup","insertChild","subtreeID","subtree","removeFromParent","replace","replaceWith","setAttribute","key","value","setExternalAttribute"],"mappings":"AAUI,IAAAA,YAAAC,UAAAC,gBAAAC,cAAEF,UAAcG,QAAQ,eAARH,UAChBI,QAAQJ,UAAYA,WAOpBD,YAAc,IAAIC,WACNK,QAeZD,QAAQE,YAAc,kBAAGP,aAOzBE,gBAAkB,SAAEM,GAChB,KAAMA,aAAqBP,WAA3B,CACI,GAAGO,IAAaR,YAAiB,OAAO,EACxCQ,EAAYA,EAAUC,gBAC1B,GAKJN,cAAgB,SAAEO,GACd,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,MAAAL,EAAUM,YACVD,KAAAH,EAAA,EAAAC,GAAAC,EAAAJ,EAAAO,YAAAC,OAAAN,EAAAC,EAAAD,kBAAAT,cAAcQ,cAclBN,QAAQc,OAAS,SAAEC,EAAMC,EAAUC,GAC/B,IAAAC,EAAAd,EAAA,GAAG,OAAAA,EAAAR,UAAAuB,eAAAH,KACE,GAAKC,GAAAA,GAAkBb,EAAOQ,WAAWC,QACzChB,gBAAgBO,IAClB,OAAAc,EAAAtB,UAAAwB,SAAAL,GAAAM,gBACCjB,EAAOkB,YAAYJ,EAAaD,IAMxCjB,QAAO,OAAU,SAAEuB,GACf,IAAAC,EAAA,GAAG,OAAAA,EAAA5B,UAAAuB,eAAAI,KACE1B,gBAAgB2B,IAAcA,IAAa7B,mBAC5C6B,EAAQC,mBACR3B,cAAc0B,IAUtBxB,QAAQ0B,QAAU,SAAEH,EAAWR,GAC3B,IAAAG,EAAAM,EAAA,GAAG,OAAAA,EAAA5B,UAAAuB,eAAAI,KACE1B,gBAAgB2B,IAAcA,IAAa7B,aAC7C,OAAAuB,EAAAtB,UAAAwB,SAAAL,GAAAM,gBACCG,EAAQG,YAAYT,GACpBpB,cAAc0B,IAQtBxB,QAAQ4B,aAAe,SAAEL,EAAWM,EAAKC,GACrC,IAAAN,EAAA,GAAG,OAAAA,EAAA5B,UAAAuB,eAAAI,KACA1B,gBAAgB2B,UACfA,EAAQO,qBAAqBF,EAAKC","file":"lde.js","sourcesContent":["\n# Lurch Deductive Engine (LDE) Main File\n\nThis file imports all the other modules in this repository and exposes them\nthrough its `exports` member, so that clients can import just this one file\nand have access to all the functionality from all the source files in this\nrepository.\n\nImport the structure class and export it to clients as well.\n\n    { Structure } = require './structure'\n    exports.Structure = Structure\n\n## The LDE Document\n\nThe LDE Document is a global instance of the `Structure` class, representing\nthe meaningful content of the user's document.\n\n    LDEDocument = new Structure\n    LDEDocument.getID()\n\nClients should treat the global LDE Document as read-only, *except* through\nthe API provided in [the following section](#the-main-api).  But we provide\nthe following function for two reasons.\n\n 1. It is usable to *read* the LDE Document.  Although the client could also\n    use it to manipulate that document, doing so violates the preconditions\n    of this module, and thus discards any behavior guarantees it provides.\n 2. As an important special case of the previous, it is usable in the unit\n    testing suite to verify that the API below is manipulating the document\n    according to its specifications.\n\nThe following function returns the root of the LDE Document structure.\n\n    exports.getDocument = -> LDEDocument\n\n## Utilities\n\nWe create a function for use privately in this module, for verifying that a\nparticular structure is a descendant of the LDE Document.\n\n    isInTheDocument = ( structure ) ->\n        while structure instanceof Structure\n            if structure is LDEDocument then return yes\n            structure = structure.parent()\n        no\n\nWe also create a function for recursively releasing IDs throughout an entire\nstructure hierarchy.\n\n    releaseAllIDs = ( hierarchy ) ->\n        hierarchy.releaseID()\n        releaseAllIDs child for child in hierarchy.children()\n\n## The Main API\n\nThis module presents to clients a four-function API defined in this section.\nEach of these functions manipulates the global LDE Document.\n\nThe following insertion function deserializes the given structure from JSON,\nfinds the descendant of the LDE Document that has the given ID, and inserts\nthe deserialized version as one of its children, at the given index. If\nanything goes wrong in that process then it does nothing.  All newly\ninserted structures are given new, unique IDs (with their descendants) if\nthey did not yet have them.\n\n    exports.insert = ( json, parentID, insertionIndex ) ->\n        if ( parent = Structure.instanceWithID parentID )? and \\\n           ( 0 <= insertionIndex <= parent.children().length ) and \\\n           ( isInTheDocument parent ) and \\\n           ( newInstance = Structure.fromJSON( json ).setup() )?\n            parent.insertChild newInstance, insertionIndex\n\nThe following function finds the descendant of the global LDE Document that\nhas the given ID and, assuming such a structure exists, removes it from its\nparent and releases all IDs within it.\n\n    exports.delete = ( subtreeID ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheDocument subtree ) and subtree isnt LDEDocument\n            subtree.removeFromParent()\n            releaseAllIDs subtree\n\nThe following function finds the descendant of the global LDE Document that\nhas the given ID and, assuming such a structure exists, deserializes the\nsecond argument as a Structure object and uses it to replace the original\nstructure in the LDE Document. The deserialized version will be assigned\nnew, unique IDs at every node in its tree before insertion into the\nDocument.  The structure that was removed to do the replacement will have\nall the IDs within it released.\n\n    exports.replace = ( subtreeID, json ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheDocument subtree ) and subtree isnt LDEDocument and \\\n           ( newInstance = Structure.fromJSON( json ).setup() )?\n            subtree.replaceWith newInstance\n            releaseAllIDs subtree\n\nThe following function finds the descendant of the global LDE Document that\nhas the given ID and, assuming such a structure exists, calls its member\nfunction for setting an external attribute with the given key and value.  As\nper the requirements of the `Structure.setExternalAttribute` function, be\nsure to provide only values that are amenable to `JSON.stringify`.\n\n    exports.setAttribute = ( subtreeID, key, value ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           isInTheDocument subtree\n            subtree.setExternalAttribute key, value\n"]}