{"version":3,"sources":["lde.litcoffee"],"names":["EventEmitter","Feedback","InputStructure","InputTree","Structure","deserializeIfNeeded","expectedArgumentCount","feedback","functions","isInTheInputTree","hasProp","hasOwnProperty","require","WorkerGlobalScope","importScripts","self","attr","id","trackIDs","getInputTree","structure","parent","jsonOrInputStructure","fromJSON","insertStructure","newChild","parentID","insertionIndex","disallowed","key","newInstance","instanceWithID","children","length","ref","attributes","results","clearAttributes","apply","insertChild","deleteStructure","subtreeID","subtree","removeFromParent","untrackIDs","replaceStructure","newTree","transferConnections","replaceWith","transferConnectionsTo","setStructureAttribute","value","setAttribute","insertConnection","sourceID","targetID","data","source","target","connect","removeConnection","getConnectionSource","getConnectionTarget","disconnect","setConnectionAttribute","setConnectionData","addEventListener","event","args","command","feedbackData","ref1","ref2","subject","slice","call","indexOf","postMessage","type","payload","toJSON","window","EventTarget","exports","addListener","dispatchEvent","Event","emit"],"mappings":"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","file":"lde.js","sourcesContent":["\n# Lurch Deductive Engine (LDE) Main File\n\nThis file imports all the other modules in this repository and exposes them\nthrough its `exports` member, so that clients can import just this one file\nand have access to all the functionality from all the source files in this\nrepository.\n\nImport the structure class; it will be exported to clients as well using\ncode at the end of this file.  The following lines detect whether this is\nbeing used in Node.js or a WebWorker, or a WebWorker-like background thread\nwithin Node.js, and do the right thing in any case.\n\n    if require?\n        { Structure } = require './structure'\n        { InputStructure } = require './input-structure'\n    else if WorkerGlobalScope?\n        importScripts 'structure.js'\n        importScripts 'input-structure.js'\n    else if self?.importScripts?\n        importScripts 'release/structure.js'\n        importScripts 'release/input-structure.js'\n\n## The Input Tree\n\nThe Input Tree is a global instance of the `InputStructure` class,\nrepresenting the content of the user's document as expressed to this module\nby the client.  It has the special ID \"root.\"\n\n    InputTree = ( new InputStructure ).attr 'id' : 'root'\n    InputTree.trackIDs()\n\nClients should treat the global Input Tree as read-only, *except* through\nthe API provided in [the following section](#the-main-api).  But we provide\nthe following function for two reasons.\n\n 1. It is usable to *read* the Input Tree.  Although the client could also\n    use it to manipulate that tree, doing so violates the preconditions of\n    this module, and thus discards any behavior guarantees it provides.\n 2. As an important special case of the previous, it is usable in the unit\n    testing suite to verify that the API below is manipulating the tree\n    according to its specifications.\n\nThe following function returns the root of the Input Tree structure.\n\n    functions = { }\n    functions.getInputTree = -> InputTree\n\n## Utilities\n\nWe create a function for use privately in this module, for verifying that a\nparticular structure is a descendant of the Input Tree.\n\n    isInTheInputTree = ( structure ) ->\n        while structure instanceof InputStructure\n            if structure is InputTree then return yes\n            structure = structure.parent()\n        no\n\nWe create another function for use privately in this module, which takes a\nparameter that may be an `InputStructure` instance or a JSON serialization\nthereof.  It returns an `InputStructure` instance; in the first case by\ndoing nothing, and in the second case by attempting to deserialize it.\n\n    deserializeIfNeeded = ( jsonOrInputStructure ) ->\n        if jsonOrInputStructure instanceof InputStructure\n            jsonOrInputStructure\n        else\n            Structure.fromJSON jsonOrInputStructure\n\n## The Main API\n\nThis module presents to clients a seven-function API defined in this\nsection.  Each of these functions manipulates the global Input Tree.\n\nThe following insertion function deserializes the given structure from JSON,\nfinds the descendant of the Input Tree that has the given ID, and inserts\nthe deserialized version as one of its children, at the given index. If\nanything goes wrong in that process then it does nothing.  The ID must be\nthe ID of a Structure, as defined in that class (a string ID stored in the\nattribute \"id\").\n\nIt is also permitted for the first parameter to be an actual structure\ninstance rather than a JSON serialization of one.  This is primarily useful\nin very simple clients, where the LDE module will be loaded directly into\nthe client.\n\nIn either case, attributes whose keys begin with an underscore are not\npermitted; they are for internal use only.  Such attributes will be stripped\nbefore the structure is inserted.\n\nAll newly inserted structures and their descendants have all their IDs\ntracked.\n\n    functions.insertStructure = ( newChild, parentID, insertionIndex ) ->\n        if ( parent = Structure.instanceWithID parentID )? and \\\n           ( 0 <= insertionIndex <= parent.children().length ) and \\\n           ( isInTheInputTree parent ) and \\\n           ( newInstance = deserializeIfNeeded newChild )? and \\\n           ( newInstance instanceof InputStructure )\n            disallowed = ( key \\\n                for own key of newInstance.attributes when key[0] is '_' )\n            if disallowed.length > 0\n                newInstance.clearAttributes disallowed...\n            parent.insertChild newInstance, insertionIndex\n            newInstance.trackIDs()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, removes it from its\nparent and stops tracking all IDs within it.\n\n    functions.deleteStructure = ( subtreeID ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheInputTree subtree ) and subtree isnt InputTree\n            subtree.removeFromParent()\n            subtree.untrackIDs()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, deserializes the\nsecond argument as a Structure object and uses it to replace the original\nstructure in the Input Tree.  The deserialized version will have all of\nthe IDs in its hierarchy tracked.  This module will also stop tracking all\nIDs in the structure that was removed.\n\nIn either case, attributes whose keys begin with an underscore are not\npermitted; they are for internal use only.  Such attributes will be stripped\nbefore the structure is inserted.\n\nThis functionl, also, permits passing an actual `InputStructure` instance as\nthe second argument, rather than a serialized version.\n\n    functions.replaceStructure =\n    ( subtreeID, newTree, transferConnections = no ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheInputTree subtree ) and subtree isnt InputTree and \\\n           ( newInstance = deserializeIfNeeded newTree )? and \\\n           ( newInstance instanceof InputStructure )\n            disallowed = ( key \\\n                for own key of newInstance.attributes when key[0] is '_' )\n            if disallowed.length > 0\n                newInstance.clearAttributes disallowed...\n            subtree.replaceWith newInstance\n            if transferConnections\n                subtree.transferConnectionsTo newInstance\n            subtree.untrackIDs()\n            newInstance.trackIDs()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, calls its member\nfunction for setting an attribute with the given key and value.  As per the\nrequirements of the `Structure.setAttribute` function, be sure to provide\nonly values that are amenable to `JSON.stringify`.\n\nThe key may not begin with an underscore; such key names are reserved for\ninternal use by the LDE.  If the given key begins with an underscore, this\nfunction does nothing.\n\n    functions.setStructureAttribute = ( subtreeID, key, value ) ->\n        if key[0] is '_' then return\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           isInTheInputTree subtree\n            if key is 'id' then subtree.untrackIDs no\n            if typeof value is 'undefined'\n                subtree.clearAttributes key\n            else\n                subtree.setAttribute key, value\n            if key is 'id' then subtree.trackIDs no\n\nWe turn now to functions that add, remove, or alter connections.\n\nThe following function adds a connection between two existing nodes in the\nInput Tree.  It accepts three parameters, the ID of the source node, the ID\nof the target node, and the JSON data for the connection.  That data must at\nleast contain an `id` field for the connection, which must be unique across\nthe entire Input Tree.  If any of these conditions are not satisfied, this\nfunction does nothing.  Otherwise, it creates the connection.\n\n    functions.insertConnection = ( sourceID, targetID, data ) ->\n        return no unless \\\n            ( source = Structure.instanceWithID sourceID ) and \\\n            ( target = Structure.instanceWithID targetID ) and \\\n            ( isInTheInputTree source ) and ( isInTheInputTree target )\n        Structure.connect source, target, data\n\nThe following function removes a connection between two nodes in the Input\nTree.  It takes just one parameter, the unique ID of the connection to\nremove.  It returns no if there is no such connection in the Input Tree, and\nyes if there is one; in the latter case, it removes it, otherwise it does\nnothing.\n\n    functions.removeConnection = ( id ) ->\n        return no unless \\\n            ( isInTheInputTree Structure.getConnectionSource id ) and \\\n            ( isInTheInputTree Structure.getConnectionTarget id )\n        Structure.disconnect id\n\nThe following function permits editing the attributes of a connection in the\nInput Tree.  It takes three parameters, a connection ID, a key, and a value.\nIf there is a connection in the Input Tree with the given unique ID, then\nthis function edits its attributes by assigning the given key-value pair,\noverwriting any with the same key that may have been there.  If the value is\nundefined (or omitted) then this function removes any old key-value pair\nwith the same key.  If any of the requirements given above are not\nsatisfied, the function does nothing.\n\n    functions.setConnectionAttribute = ( id, key, value ) ->\n        return no unless \\\n            ( isInTheInputTree Structure.getConnectionSource id ) and \\\n            ( isInTheInputTree Structure.getConnectionTarget id )\n        Structure.setConnectionData id, key, value\n\n## Event Listeners\n\nIf the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners handle\nmessages of eight types:\n\n * `insertStructure`, with three arguments, which calls the\n   `insertStructure` function defined above and sends no messages back\n * `deleteStructure`, with one argument, which calls `deleteStructure` and\n   sends no messages\n * `replaceStructure`, with two arguments, which calls `replaceStructure`\n   and sends no messages\n * `setStructureAttribute`, with three arguments, which calls\n   `setStructureAttribute` and sends no messages\n * `insertConnection`, with three arguments, which calls the\n   `insertConnection` function defined above and sends no messages back\n * `removeConnection`, with one argument, which calls the\n   `removeConnection` function defined above and sends no messages back\n * `setConnectionAttribute`, with three arguments, which calls the\n   `setConnectionAttribute` function defined above and sends no messages\n   back\n * `getInputTree`, with zero arguments, which sends back a message\n   containing the JSON serialized form of the document, as fetched using the\n   `getInputTree` function defined above\n\n\n    if WorkerGlobalScope? or self?.importScripts?\n\nHere are the numbers of arguments we accept for each message we accept.\nEach is an array, any number in the array is acceptable.\n\n        expectedArgumentCount =\n            insertStructure : [ 3 ]\n            deleteStructure : [ 1 ]\n            replaceStructure : [ 2, 3 ]\n            setStructureAttribute : [ 2, 3 ]\n            insertConnection : [ 3 ]\n            removeConnection : [ 1 ]\n            setConnectionAttribute : [ 2, 3 ]\n            getInputTree : [ 0 ]\n\nMessages received expect data arrays of the form `[ command, args... ]`.\n\n        self.addEventListener 'message', ( event ) ->\n            [ command, args... ] = event.data\n\nAnything with the right number of arguments is passed on to the\ncorresponding function.  That function may or may not do anything, depending\non whether the data is in the correct form.\n\n            if args.length in ( expectedArgumentCount[command] ? [ ] )\n                if command is 'getInputTree'\n                    self.postMessage\n                        type : 'getInputTree'\n                        payload : functions.getInputTree().toJSON()\n                else\n                    functions[command] args...\n\nWe also add the following function that is useless in production, but is\nuseful in testing.  It transmits feedback about any given node in the\nInput Tree.\n\n            if command is 'sendFeedback'\n                [ id, feedbackData ] = args\n                subject = Structure.instanceWithID id\n                if subject?.feedback?\n                    subject.feedback feedbackData\n                else\n                    self.postMessage \"No such Structure: #{id}\"\n\n## Feedback\n\nIf we have been loaded in node.js or the browser, create a global feedback\nmechanism called `Feedback`, an instance of `EventTarget` or `EventEmitter`,\ndepending on whether this is node.js or the browser.\n\n    if window? and EventTarget?\n        Feedback = window.Feedback = new EventTarget() # browser\n    if require? and exports?\n        EventEmitter = require 'events'\n        Feedback = exports.Feedback = new EventEmitter() # node\n        Feedback.addEventListener = Feedback.addListener # make API same\n\nWe also create a function global to this module that implements the sending\nof feedback to our context.  In node.js or the browser, we emit an event\nfrom the `Feedback` object just created.  If we are running in a `WebWorker`\n(or node.js's equivalent of one) then we post a message to our parent\ninstead.\n\n    feedback = ( feedbackData ) ->\n        if Feedback?.dispatchEvent?\n            event = new Event 'feedback'\n            event.data = feedbackData\n            Feedback.dispatchEvent event\n        else if Feedback?.emit?\n            Feedback.emit 'feedback', feedbackData\n        else if self?.postMessage?\n            self.postMessage\n                type : 'feedback'\n                payload : feedbackData\n\nInstall that function in the `Structure` class, overriding the stub class\nmethod that module installs in itself.\n\n    Structure.feedback = feedback\n\nAnd export anything else that needs exporting.\n\n    if exports?\n        exports.Structure = Structure\n        exports.InputStructure = InputStructure\n        exports.insertStructure = functions.insertStructure\n        exports.deleteStructure = functions.deleteStructure\n        exports.replaceStructure = functions.replaceStructure\n        exports.setStructureAttribute = functions.setStructureAttribute\n        exports.getInputTree = functions.getInputTree\n        exports.insertConnection = functions.insertConnection\n        exports.removeConnection = functions.removeConnection\n        exports.setConnectionAttribute = functions.setConnectionAttribute\n"]}