{"version":3,"sources":["lde.litcoffee"],"names":["LDEDocument","Structure","expectedArgumentCount","functions","isInTheDocument","slice","require","WorkerGlobalScope","importScripts","self","attr","id","trackIDs","getDocument","structure","parent","insert","json","parentID","insertionIndex","newInstance","instanceWithID","children","length","fromJSON","setup","insertChild","subtreeID","subtree","removeFromParent","untrackIDs","replace","replaceWith","setAttribute","key","value","delete","addEventListener","event","args","command","ref","data","call","postMessage","toJSON","apply","exports"],"mappings":"AAaI,IAAAA,YAAAC,UAAAC,sBAAAC,UAAAC,gBAAAC,SAAAA,MAAG,oBAAAC,SAAA,OAAAA,QACGL,UAAcK,QAAQ,eAARL,UACZ,oBAAAM,mBAAA,OAAAA,kBACJC,cAAc,gBACV,OAAA,oBAAAC,MAAA,OAAAA,KAAAA,KAAAD,mBAAA,IACJA,cAAc,yBAQlBR,aAAc,IAAMC,WAAYS,MAAKC,GAAO,UAChCC,YAeZT,cACUU,YAAc,kBAAGb,aAO3BI,gBAAkB,SAAEU,GAChB,KAAMA,aAAqBb,WAA3B,CACI,GAAGa,IAAad,YAAiB,OAAO,EACxCc,EAAYA,EAAUC,gBAC1B,GAiBJZ,UAAUa,OAAS,SAAEC,EAAMC,EAAUC,GACjC,IAAAC,EAAAL,EAAA,GAAG,OAAAA,EAAAd,UAAAoB,eAAAH,KACE,GAAKC,GAAAA,GAAkBJ,EAAOO,WAAWC,QACzCnB,gBAAgBW,IAClB,OAAAK,EAAAnB,UAAAuB,SAAAP,GAAAQ,gBACCV,EAAOW,YAAYN,EAAaD,GAChCC,EAAYR,YAMpBT,UAAS,OAAU,SAAEwB,GACjB,IAAAC,EAAA,GAAG,OAAAA,EAAA3B,UAAAoB,eAAAM,KACEvB,gBAAgBwB,IAAcA,IAAa5B,mBAC5C4B,EAAQC,mBACRD,EAAQE,cAShB3B,UAAU4B,QAAU,SAAEJ,EAAWV,GAC7B,IAAAG,EAAAQ,EAAA,GAAG,OAAAA,EAAA3B,UAAAoB,eAAAM,KACEvB,gBAAgBwB,IAAcA,IAAa5B,aAC7C,OAAAoB,EAAAnB,UAAAuB,SAAAP,GAAAQ,gBACCG,EAAQI,YAAYZ,GACpBQ,EAAQE,aACRV,EAAYR,YAQpBT,UAAU8B,aAAe,SAAEN,EAAWO,EAAKC,GACvC,IAAAP,EAAA,GAAG,OAAAA,EAAA3B,UAAAoB,eAAAM,KACAvB,gBAAgBwB,KACL,OAAPM,GAAiBN,EAAQE,YAAW,GACvCF,EAAQK,aAAaC,EAAKC,GAChB,OAAPD,UAAiBN,EAAQhB,UAAS,KAoB1C,oBAAAL,mBAAA,OAAAA,mBAAsB,OAAA,oBAAAE,MAAA,OAAAA,KAAAA,KAAAD,mBAAA,MAIrBN,uBACIc,OAAS,EACToB,OAAS,EACTL,QAAU,EACVE,aAAe,EACfpB,YAAc,GAIlBJ,KAAK4B,iBAAiB,UAAW,SAAEC,GAC/B,IAAAC,EAAAC,EAAAC,EAMA,GANAA,EAAuBH,EAAMI,KAA3BF,EAAAC,EAAA,GAASF,EAAA,GAAAE,EAAAlB,OAAAlB,MAAAsC,KAAAF,EAAA,MAMRvC,sBAAsBsC,KAAYD,EAAKhB,OACtC,MAAc,gBAAXiB,EACC/B,KAAKmC,YAAYzC,UAAUU,cAAcgC,UAEzC1C,UAAUqC,GAAVM,MAAA3C,UAAmBoC,MAIhC,oBAAAQ,SAAA,OAAAA,UACCA,QAAQ9C,UAAYA,UACpB8C,QAAQ/B,OAASb,UAAUa,OAC3B+B,QAAO,OAAU5C,UAAS,OAC1B4C,QAAQhB,QAAU5B,UAAU4B,QAC5BgB,QAAQd,aAAe9B,UAAU8B,aACjCc,QAAQlC,YAAcV,UAAUU","file":"lde.js","sourcesContent":["\n# Lurch Deductive Engine (LDE) Main File\n\nThis file imports all the other modules in this repository and exposes them\nthrough its `exports` member, so that clients can import just this one file\nand have access to all the functionality from all the source files in this\nrepository.\n\nImport the structure class and export it to clients as well.  The following\nlines detect whether this is being used in Node.js or a WebWorker, or a\nWebWorker-like background thread within Node.js, and do the right thing in\nany case.\n\n    if require?\n        { Structure } = require './structure'\n    else if WorkerGlobalScope?\n        importScripts 'structure.js'\n    else if self?.importScripts?\n        importScripts 'release/structure.js'\n\n## The LDE Document\n\nThe LDE Document is a global instance of the `Structure` class, representing\nthe meaningful content of the user's document.  It has the special ID\n\"root.\"\n\n    LDEDocument = ( new Structure ).attr 'id' : 'root'\n    LDEDocument.trackIDs()\n\nClients should treat the global LDE Document as read-only, *except* through\nthe API provided in [the following section](#the-main-api).  But we provide\nthe following function for two reasons.\n\n 1. It is usable to *read* the LDE Document.  Although the client could also\n    use it to manipulate that document, doing so violates the preconditions\n    of this module, and thus discards any behavior guarantees it provides.\n 2. As an important special case of the previous, it is usable in the unit\n    testing suite to verify that the API below is manipulating the document\n    according to its specifications.\n\nThe following function returns the root of the LDE Document structure.\n\n    functions = { }\n    functions.getDocument = -> LDEDocument\n\n## Utilities\n\nWe create a function for use privately in this module, for verifying that a\nparticular structure is a descendant of the LDE Document.\n\n    isInTheDocument = ( structure ) ->\n        while structure instanceof Structure\n            if structure is LDEDocument then return yes\n            structure = structure.parent()\n        no\n\n## The Main API\n\nThis module presents to clients a four-function API defined in this section.\nEach of these functions manipulates the global LDE Document.\n\nThe following insertion function deserializes the given structure from JSON,\nfinds the descendant of the LDE Document that has the given ID, and inserts\nthe deserialized version as one of its children, at the given index. If\nanything goes wrong in that process then it does nothing.  The ID must be\nthe ID of a Structure, as defined in that class (a string ID stored in the\nattribute \"id\").\n\nAll newly inserted structures and their descendants have all their IDs\ntracked.\n\n    functions.insert = ( json, parentID, insertionIndex ) ->\n        if ( parent = Structure.instanceWithID parentID )? and \\\n           ( 0 <= insertionIndex <= parent.children().length ) and \\\n           ( isInTheDocument parent ) and \\\n           ( newInstance = Structure.fromJSON( json ).setup() )?\n            parent.insertChild newInstance, insertionIndex\n            newInstance.trackIDs()\n\nThe following function finds the descendant of the global LDE Document that\nhas the given ID and, assuming such a structure exists, removes it from its\nparent and stops tracking all IDs within it.\n\n    functions.delete = ( subtreeID ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheDocument subtree ) and subtree isnt LDEDocument\n            subtree.removeFromParent()\n            subtree.untrackIDs()\n\nThe following function finds the descendant of the global LDE Document that\nhas the given ID and, assuming such a structure exists, deserializes the\nsecond argument as a Structure object and uses it to replace the original\nstructure in the LDE Document.  The deserialized version will have all of\nthe IDs in its hierarchy tracked.  This module will also stop tracking all\nIDs in the structure that was removed.\n\n    functions.replace = ( subtreeID, json ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheDocument subtree ) and subtree isnt LDEDocument and \\\n           ( newInstance = Structure.fromJSON( json ).setup() )?\n            subtree.replaceWith newInstance\n            subtree.untrackIDs()\n            newInstance.trackIDs()\n\nThe following function finds the descendant of the global LDE Document that\nhas the given ID and, assuming such a structure exists, calls its member\nfunction for setting an attribute with the given key and value.  As per the\nrequirements of the `Structure.setAttribute` function, be sure to provide\nonly values that are amenable to `JSON.stringify`.\n\n    functions.setAttribute = ( subtreeID, key, value ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           isInTheDocument subtree\n            if key is 'id' then subtree.untrackIDs no\n            subtree.setAttribute key, value\n            if key is 'id' then subtree.trackIDs no\n\n## Event Listeners\n\nIf the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners handle\nmessages of five types:\n\n * `insert`, with three arguments, which calls the `insert` function defined\n   above and sends no messages back\n * `delete`, with one argument, which calls `delete` and sends no messages\n * `replace`, with two arguments, which calls `replace` and sends no\n   messages\n * `setAttribute`, with three arguments, which calls `setAttribute` and\n   sends no messages\n * `getDocument`, with zero arguments, which sends back a message containing\n   the JSON serialized form of the document, as fetched using the\n   `getDocument` function defined above\n\n\n    if WorkerGlobalScope? or self?.importScripts?\n\nHere are the numbers of arguments we accept for each message we accept.\n\n        expectedArgumentCount =\n            insert : 3\n            delete : 1\n            replace : 2\n            setAttribute : 3\n            getDocument : 0\n\nMessages received expect data arrays of the form `[ command, args... ]`.\n\n        self.addEventListener 'message', ( event ) ->\n            [ command, args... ] = event.data\n\nAnything with the right number of arguments is passed on to the\ncorresponding function.  That function may or may not do anything, depending\non whether the data is in the correct form.\n\n            if expectedArgumentCount[command] is args.length\n                if command is 'getDocument'\n                    self.postMessage functions.getDocument().toJSON()\n                else\n                    functions[command] args...\n\nNow export anything that needs exporting.\n\n    if exports?\n        exports.Structure = Structure\n        exports.insert = functions.insert\n        exports.delete = functions.delete\n        exports.replace = functions.replace\n        exports.setAttribute = functions.setAttribute\n        exports.getDocument = functions.getDocument\n"]}