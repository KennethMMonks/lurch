{"version":3,"sources":["lde.litcoffee"],"names":["EventEmitter","Feedback","InputModifier","InputStructure","InputTree","OutputStructure","OutputTree","Structure","className","classObj","deserializeIfNeeded","expectedArgumentCount","feedback","functions","isInTheInputTree","isInTheOutputTree","key","ref","ref1","value","hasProp","hasOwnProperty","require","WorkerGlobalScope","importScripts","self","getInputTree","getOutputTree","getInternalState","inputTree","toJSON","outputTree","setInternalState","state","untrackIDs","fromJSON","trackIDs","reset","children","attributes","id","structure","parent","jsonOrInputStructure","insertStructure","newChild","parentID","insertionIndex","disallowed","newInstance","instanceWithID","length","results","clearAttributes","apply","insertChild","deleteStructure","subtreeID","subtree","removeFromParent","replaceStructure","newTree","transferConnections","replaceWith","transferConnectionsTo","setStructureAttribute","setAttribute","insertConnection","sourceID","targetID","data","source","target","connect","removeConnection","getConnectionSource","getConnectionTarget","disconnect","setConnectionAttribute","setConnectionData","runModification","callback","updateAllConnections","node","child","i","len","updateConnections","runInterpretation","maybeCorrect","removeConnectionsOutside","connection","j","k","len1","len2","ref2","ref3","getConnectionsIn","type","getConnectionsOut","clearAlreadyStarted","recursiveInterpret","Array","subject","details","error","addEventListener","event","args","command","feedbackData","slice","call","indexOf","postMessage","payload","window","EventTarget","exports","addListener","dispatchEvent","Event","emit","prototype","subclasses"],"mappings":"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","file":"lde.js","sourcesContent":["\n# Lurch Deductive Engine (LDE) Main File\n\nThis file imports all the other modules in this repository and exposes them\nthrough its `exports` member, so that clients can import just this one file\nand have access to all the functionality from all the source files in this\nrepository.\n\nImport the structure class; it will be exported to clients as well using\ncode at the end of this file.  The following lines detect whether this is\nbeing used in Node.js or a WebWorker, or a WebWorker-like background thread\nwithin Node.js, and do the right thing in any case.\n\n    if require?\n        { Structure } = require './structure'\n        { InputStructure, InputModifier } = require './input-structure'\n        { OutputStructure } = require './output-structure'\n    else if WorkerGlobalScope?\n        importScripts 'structure.js'\n        importScripts 'input-structure.js'\n        importScripts 'output-structure.js'\n    else if self?.importScripts?\n        importScripts 'release/structure.js'\n        importScripts 'release/input-structure.js'\n        importScripts 'release/output-structure.js'\n\n## The Input Tree\n\nThe Input Tree is a global instance of the `InputStructure` class,\nrepresenting the content of the user's document as expressed to this module\nby the client.  We define the variable here and initialize it later.\n\n    InputTree = null\n\nClients should treat the global Input Tree as read-only, *except* through\nthe API provided in [the following section](#the-main-api).  But we provide\nthe following function for two reasons.\n\n 1. It is usable to *read* the Input Tree.  Although the client could also\n    use it to manipulate that tree, doing so violates the preconditions of\n    this module, and thus discards any behavior guarantees it provides.\n 2. As an important special case of the previous, it is usable in the unit\n    testing suite to verify that the API below is manipulating the tree\n    according to its specifications.\n\nThe following function returns the root of the Input Tree structure.\n\n    functions = { }\n    functions.getInputTree = -> InputTree\n\nClients can also replace the entire Input Tree in certain circumstances; see\ndetails in the following section.\n\n## The Output Tree\n\nThe Output Tree is a global instance of the `OutputStructure` class,\nrepresenting the content of the user's document as interpreted by this\nmodule from the Input Tree.  We define the variable here and initialize it\nlater.\n\n    OutputTree = null\n\nClients do not *ever* write to the Output Tree.  They can read from it,\nhowever, for the same two reasons as given for the Input Tree in the\nprevious section.  Thus the following function returns the root of the\nOutput Tree structure.\n\n    functions.getOutputTree = -> OutputTree\n\nClients may occasionally wish to replace the entire Input and Output Tree\npair.  This most likely happens when the state of the LDE is saved by\nfetching that pair and saving it to some filesystem, then later the state\nis restored by fetching the archived versions and putting them back into the\nLDE.\n\nBoth trees should be inserted at once, to keep things consistent, so we\nprovide a function for querying both trees at once, and another function for\nsetting both trees at once.  So that clients don't need to think about the\nOutput Tree at all, we just call the tree pair the LDE's \"internal state.\"\n\n    functions.getInternalState = ->\n        inputTree : InputTree.toJSON()\n        outputTree : OutputTree.toJSON()\n    functions.setInternalState = ( state ) ->\n        InputTree?.untrackIDs()\n        InputTree = Structure.fromJSON state.inputTree\n        InputTree.trackIDs()\n        OutputTree?.untrackIDs()\n        OutputTree = Structure.fromJSON state.outputTree\n        OutputTree.trackIDs()\n\nWe then use those functions to define a setup routine for the LDE's internal\nstate.  It clears out and re-initializes both the Input and Output Trees to\nbe empty.\n\nThe Input Tree gets the ID \"root\" and the Output Tree gets the ID \"OT root\".\nWe do not use the symmetric name \"IT root\" for the Input Tree's root,\nbecause the Input Tree is client-facing, and we do not wish to put on the\nclient the burden of using the \"IT\" prefix.  But we must distinguish the\ntwo, because these IDs are used by the global `Structure` class to\ndistinguish `Structure` instances, including those in both the Input Tree\nand the Output Tree.  Thus node IDs must be globally unique across both\ntrees.\n\n    functions.reset = ->\n        functions.setInternalState\n            inputTree :\n                className : 'InputStructure'\n                children : [ ]\n                attributes : id : 'root'\n            outputTree :\n                className : 'OutputStructure'\n                children : [ ]\n                attributes : id : 'OT root'\n\nUse the `reset()` function to initialize our internal state.\n\n    functions.reset()\n\n## Utilities\n\nWe create functions for use privately in this module, for verifying that a\nparticular structure is a descendant of the Input Tree or the Output Tree,\nrespectively.\n\n    isInTheInputTree = ( structure ) ->\n        while structure instanceof InputStructure\n            if structure is InputTree then return yes\n            structure = structure.parent()\n        no\n    isInTheOutputTree = ( structure ) ->\n        while structure instanceof OutputStructure\n            if structure is OutputTree then return yes\n            structure = structure.parent()\n        no\n\nWe create another function for use privately in this module, which takes a\nparameter that may be an `InputStructure` instance or a JSON serialization\nthereof.  It returns an `InputStructure` instance; in the first case by\ndoing nothing, and in the second case by attempting to deserialize it.\n\n    deserializeIfNeeded = ( jsonOrInputStructure ) ->\n        if jsonOrInputStructure instanceof InputStructure\n            jsonOrInputStructure\n        else\n            Structure.fromJSON jsonOrInputStructure\n\n## The Main API\n\nThis module presents to clients a seven-function API defined in this\nsection.  Each of these functions manipulates the global Input Tree.\n\n### Editing Structures in the Input Tree\n\nThe following insertion function deserializes the given structure from JSON,\nfinds the descendant of the Input Tree that has the given ID, and inserts\nthe deserialized version as one of its children, at the given index. If\nanything goes wrong in that process then it does nothing.  The ID must be\nthe ID of a Structure, as defined in that class (a string ID stored in the\nattribute \"id\").\n\nIt is also permitted for the first parameter to be an actual structure\ninstance rather than a JSON serialization of one.  This is primarily useful\nin very simple clients, where the LDE module will be loaded directly into\nthe client.\n\nIn either case, attributes whose keys begin with an underscore are not\npermitted; they are for internal use only.  Such attributes will be stripped\nbefore the structure is inserted.\n\nAll newly inserted structures and their descendants have all their IDs\ntracked.\n\n    functions.insertStructure = ( newChild, parentID, insertionIndex ) ->\n        if ( parent = Structure.instanceWithID parentID )? and \\\n           ( 0 <= insertionIndex <= parent.children().length ) and \\\n           ( isInTheInputTree parent ) and \\\n           ( newInstance = deserializeIfNeeded newChild )? and \\\n           ( newInstance instanceof InputStructure )\n            disallowed = ( key \\\n                for own key of newInstance.attributes when key[0] is '_' )\n            if disallowed.length > 0\n                newInstance.clearAttributes disallowed...\n            parent.insertChild newInstance, insertionIndex\n            newInstance.trackIDs()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, removes it from its\nparent and stops tracking all IDs within it.\n\n    functions.deleteStructure = ( subtreeID ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheInputTree subtree ) and subtree isnt InputTree\n            subtree.removeFromParent()\n            subtree.untrackIDs()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, deserializes the\nsecond argument as a Structure object and uses it to replace the original\nstructure in the Input Tree.  The deserialized version will have all of\nthe IDs in its hierarchy tracked.  This module will also stop tracking all\nIDs in the structure that was removed.\n\nIn either case, attributes whose keys begin with an underscore are not\npermitted; they are for internal use only.  Such attributes will be stripped\nbefore the structure is inserted.\n\nThis functionl, also, permits passing an actual `InputStructure` instance as\nthe second argument, rather than a serialized version.\n\n    functions.replaceStructure =\n    ( subtreeID, newTree, transferConnections = no ) ->\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           ( isInTheInputTree subtree ) and subtree isnt InputTree and \\\n           ( newInstance = deserializeIfNeeded newTree )? and \\\n           ( newInstance instanceof InputStructure )\n            disallowed = ( key \\\n                for own key of newInstance.attributes when key[0] is '_' )\n            if disallowed.length > 0\n                newInstance.clearAttributes disallowed...\n            subtree.replaceWith newInstance\n            if transferConnections\n                subtree.transferConnectionsTo newInstance\n            subtree.untrackIDs()\n            newInstance.trackIDs()\n\nThe following function finds the descendant of the global Input Tree that\nhas the given ID and, assuming such a structure exists, calls its member\nfunction for setting an attribute with the given key and value.  As per the\nrequirements of the `Structure.setAttribute` function, be sure to provide\nonly values that are amenable to `JSON.stringify`.\n\nThe key may not begin with an underscore; such key names are reserved for\ninternal use by the LDE.  If the given key begins with an underscore, this\nfunction does nothing.\n\n    functions.setStructureAttribute = ( subtreeID, key, value ) ->\n        if key[0] is '_' then return\n        if ( subtree = Structure.instanceWithID subtreeID )? and \\\n           isInTheInputTree subtree\n            if key is 'id' then subtree.untrackIDs no\n            if typeof value is 'undefined'\n                subtree.clearAttributes key\n            else\n                subtree.setAttribute key, value\n            if key is 'id' then subtree.trackIDs no\n\n### Editing Connections in the Input Tree\n\nThe following function adds a connection between two existing nodes in the\nInput Tree.  It accepts three parameters, the ID of the source node, the ID\nof the target node, and the JSON data for the connection.  That data must at\nleast contain an `id` field for the connection, which must be unique across\nthe entire Input Tree.  If any of these conditions are not satisfied, this\nfunction does nothing.  Otherwise, it creates the connection.\n\n    functions.insertConnection = ( sourceID, targetID, data ) ->\n        return no unless \\\n            ( source = Structure.instanceWithID sourceID ) and \\\n            ( target = Structure.instanceWithID targetID ) and \\\n            ( isInTheInputTree source ) and ( isInTheInputTree target )\n        Structure.connect source, target, data\n\nThe following function removes a connection between two nodes in the Input\nTree.  It takes just one parameter, the unique ID of the connection to\nremove.  It returns no if there is no such connection in the Input Tree, and\nyes if there is one; in the latter case, it removes it, otherwise it does\nnothing.\n\n    functions.removeConnection = ( id ) ->\n        return no unless \\\n            ( isInTheInputTree Structure.getConnectionSource id ) and \\\n            ( isInTheInputTree Structure.getConnectionTarget id )\n        Structure.disconnect id\n\nThe following function permits editing the attributes of a connection in the\nInput Tree.  It takes three parameters, a connection ID, a key, and a value.\nIf there is a connection in the Input Tree with the given unique ID, then\nthis function edits its attributes by assigning the given key-value pair,\noverwriting any with the same key that may have been there.  If the value is\nundefined (or omitted) then this function removes any old key-value pair\nwith the same key.  If any of the requirements given above are not\nsatisfied, the function does nothing.\n\n    functions.setConnectionAttribute = ( id, key, value ) ->\n        return no unless \\\n            ( isInTheInputTree Structure.getConnectionSource id ) and \\\n            ( isInTheInputTree Structure.getConnectionTarget id )\n        Structure.setConnectionData id, key, value\n\n### The Modification Phase\n\nIn the Modification Phase, the LDE runs the `updateConnections()` function\nin every `InputModifier` instance in the Input Tree, in no specified order.\nThe Modification Phase then hands off work to the Interpretation Phase,\nwhich always follows immediately after it.\n\nThis function is asynchronous, calling a callback when complete.\n\nAlthough it contains no asynchronous components in its current\nimplementation, we write its signature that way so that it can be made\nasynchronous later if we need to make it more efficient, and clients will\nnot need to change their use of it.\n\n    functions.runModification = ( callback ) ->\n        updateAllConnections = ( node ) ->\n            node.updateConnections() if node instanceof InputModifier\n            updateAllConnections child for child in node.children()\n        updateAllConnections InputTree\n        functions.runInterpretation callback\n\n### The Interpretation Phase\n\nIn the Interpretation Phase, the LDE runs the `recursiveInterpret()`\nfunction in the root of the Input Tree, replacing the Output Tree with the\nresult.  Like the above function, this one is asynchronous even though its\ncurrent implementation is synchronous.\n\nAfter interpretation, this function traverses the Output Tree and ensures\nthat every connection into or out of any node in it leads to another node in\nthe Output Tree.  (Any connection that leads outside that tree is removed.)\n\nFor the type of feedback this sends, see\n[the API documentation page for the LDE](https://lurchmath.github.io/lde/site/api-lde/).\n\n    functions.runInterpretation = ( callback ) ->\n\nFirst, define the function that ensures the Output Tree does not have\nconnections that lead outside of itself.  We will use this later if needed.\n\n        removeConnectionsOutside = ( node ) ->\n            for connection in node.getConnectionsIn()\n                if not isInTheOutputTree node.getConnectionSource connection\n                    node.disconnect connection\n                    node.feedback\n                        type : 'connection removed'\n                        id : connection\n            for connection in node.getConnectionsOut()\n                if not isInTheOutputTree node.getConnectionTarget connection\n                    node.disconnect connection\n                    node.feedback\n                        type : 'connection removed'\n                        id : connection\n            removeConnectionsOutside child for child in node.children()\n\nNext, produce the Output Tree, using the above routine and sending feedback\nif and when needed.\n\n        didReplaceOutputTree = no\n        InputStructure.clearAlreadyStarted()\n        try\n            maybeCorrect = InputTree.recursiveInterpret()\n            if maybeCorrect not instanceof Array\n                feedback\n                    subject : 'root'\n                    type : 'interpretation error'\n                    details : 'Interpretation did not produce an array.'\n            else if maybeCorrect[0] not instanceof OutputStructure\n                feedback\n                    subject : 'root'\n                    type : 'interpretation error'\n                    details : 'Interpretation did not produce an\n                        OutputStructure'\n            else\n                OutputTree = maybeCorrect[0]\n                removeConnectionsOutside OutputTree\n                feedback subject : 'root', type : 'updated LDE state'\n        catch e\n            feedback\n                subject : 'root'\n                type : 'interpretation error'\n                details : e\n        InputStructure.clearAlreadyStarted()\n        callback()\n\n### Event Listeners\n\nIf the LDE detects that it is being run in a background thread, it will set\nup listeners for messages from the parent thread.  These listeners handle\nmessages of eight types:\n\n * `insertStructure`, with three arguments, which calls the\n   `insertStructure` function defined above and sends no messages back\n * `deleteStructure`, with one argument, which calls `deleteStructure` and\n   sends no messages\n * `replaceStructure`, with two arguments, which calls `replaceStructure`\n   and sends no messages\n * `setStructureAttribute`, with three arguments, which calls\n   `setStructureAttribute` and sends no messages\n * `insertConnection`, with three arguments, which calls the\n   `insertConnection` function defined above and sends no messages back\n * `removeConnection`, with one argument, which calls the\n   `removeConnection` function defined above and sends no messages back\n * `setConnectionAttribute`, with three arguments, which calls the\n   `setConnectionAttribute` function defined above and sends no messages\n   back\n * `getInputTree`, with zero arguments, which sends back a message\n   containing the JSON serialized form of the document, as fetched using the\n   `getInputTree` function defined above\n * `getOutputTree`, with zero arguments, which sends back a message\n   containing the JSON serialized form of the document, as fetched using the\n   `getOutputTree` function defined above\n * `getInternalState`, with zero arguments, which sends back a message\n   containing both of the previous two results (Input and Output Trees)\n * `setInternalState` can be passed a single argument, a previous response\n   to the `getInternalState` query, to restore the Input and Output Trees\n   to the state they were in at the time of that query.\n * `reset` takes no parameters and calls `setInternalState` with blank Input\n   and Output Trees.\n\n\n    if WorkerGlobalScope? or self?.importScripts?\n\nHere are the numbers of arguments we accept for each message we accept.\nEach is an array, any number in the array is acceptable.\n\n        expectedArgumentCount =\n            insertStructure : [ 3 ]\n            deleteStructure : [ 1 ]\n            replaceStructure : [ 2, 3 ]\n            setStructureAttribute : [ 2, 3 ]\n            insertConnection : [ 3 ]\n            removeConnection : [ 1 ]\n            setConnectionAttribute : [ 2, 3 ]\n            getInputTree : [ 0 ]\n            getOutputTree : [ 0 ]\n            getInternalState : [ 0 ]\n            setInternalState : [ 1 ]\n            reset : [ 0 ]\n            runModification : [ 0 ]\n\nMessages received expect data arrays of the form `[ command, args... ]`.\n\n        self.addEventListener 'message', ( event ) ->\n            [ command, args... ] = event.data\n\nAnything with the right number of arguments is passed on to the\ncorresponding function.  That function may or may not do anything, depending\non whether the data is in the correct form.\n\n            if args.length in ( expectedArgumentCount[command] ? [ ] )\n                if command is 'getInputTree'\n                    self.postMessage\n                        type : 'getInputTree'\n                        payload : functions.getInputTree().toJSON()\n                else if command is 'getOutputTree'\n                    self.postMessage\n                        type : 'getOutputTree'\n                        payload : functions.getOutputTree().toJSON()\n                else\n                    functions[command] args...\n\nWe also add the following function that is useless in production, but is\nuseful in testing.  It transmits feedback about any given node in the\nInput Tree.\n\n            if command is 'sendFeedback'\n                [ id, feedbackData ] = args\n                subject = Structure.instanceWithID id\n                if subject?.feedback?\n                    subject.feedback feedbackData\n                else\n                    self.postMessage \"No such Structure: #{id}\"\n\n## Feedback\n\nIf we have been loaded in node.js or the browser, create a global feedback\nmechanism called `Feedback`, an instance of `EventTarget` or `EventEmitter`,\ndepending on whether this is node.js or the browser.\n\n    if window? and EventTarget?\n        Feedback = window.Feedback = new EventTarget() # browser\n    if require? and exports?\n        EventEmitter = require 'events'\n        Feedback = exports.Feedback = new EventEmitter() # node\n        Feedback.addEventListener = Feedback.addListener # make API same\n\nWe also create a function global to this module that implements the sending\nof feedback to our context.  In node.js or the browser, we emit an event\nfrom the `Feedback` object just created.  If we are running in a `WebWorker`\n(or node.js's equivalent of one) then we post a message to our parent\ninstead.\n\n    feedback = ( feedbackData ) ->\n        if Feedback?.dispatchEvent?\n            event = new Event 'feedback'\n            event.data = feedbackData\n            Feedback.dispatchEvent event\n        else if Feedback?.emit?\n            Feedback.emit 'feedback', feedbackData\n        else if self?.postMessage?\n            self.postMessage\n                type : 'feedback'\n                payload : feedbackData\n\nInstall that function in the `Structure` class, overriding the stub class\nmethod that module installs in itself.\n\n    Structure.feedback = feedback\n\nAnd export anything else that needs exporting.\n\n    if exports?\n        for own className, classObj of Structure::subclasses\n            exports[className] = classObj\n        exports[key] = functions[key] for own key, value of functions\n"]}