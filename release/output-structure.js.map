{"version":3,"sources":["output-structure.litcoffee"],"names":["FOM","InputStructure","OM","OutputExpression","OutputRule","OutputStructure","Structure","TemplateRule","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","require","WorkerGlobalScope","importScripts","metavariableSymbol","self","superClass","IS","len","ref","apply","arguments","markDirty","subclasses","instancesBeingInterpreted","length","origin","enableFeedback","className","addSubclass","yesOrNo","dirty","addConnectionOrigin","source","target","data","_origin","id","feedback","feedbackData","sendingFeedback","feedbackStore","push","enable","emitAll","j","len1","hasLabel","label","lookUpIn","accessibles","candidate","slice","reverse","lookUp","firstAccessible","lookUpAll","allAccessibles","lookUpAllCitations","cited","connection","l","labels","len2","len3","len4","len5","m","n","o","ref1","ref2","ref3","result","type","premises","connections","reasons","getConnectionsOut","getConnectionData","getConnectionTarget","getAttribute","Array","justChanged","base","instanceJustChanged","rest","setAttribute","toOpenMath","body","childResults","head","i","indices","notVarIndices","vars","func","args","results","children","indexOf","bin","concat","fromOpenMath","node","v","value","name","cd","uri","variables","symbol","toOutputExpression","validateStep","step","worker","callback","validity","message","basicValidate","processNext","lastCitationLookup","_this","keptFeedback","reason","rule","components","shift","instanceWithID","missingID","lastFeedback","nonRule","citation","forms","instance","next","p","premise","app","sym","copy","descendantsSatisfying","d","setMetavariable","setupWorker","encode","index","run","contents","expression","myMatch","pattern","ref4","ref5","decode","globalData","nextMatch","Constraint","response","error","details","success","ie","k","nextStep","toInstall","installData","isMetavariable","path","installScript","exports","OMNode"],"mappings":"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","file":"output-structure.js","sourcesContent":["\n# Output Structures\n\nThe LDE module constructs, for its internal use, a hierarchy of\n`OutputStructure` instances called the Output Tree.  The word \"output\" is\nused because it is the output of an interpretation process defined\nthroughout the subclasses of `InputStructure`.\n\nThese have entirely different functionality than their cousins\n`InputStructure` instances.  In short, these support validation while\n`InputStructure`s support interpretation.  You can also think of the\ndifference as this:  `InputStructure`s represent the syntax of what the user\nhas expressed to the client, and `OutputStructure`s represent the semantics\ninto which we interpret that syntax.\n\n## Import modules\n\nImport the `Structure` class.  The following lines detect whether this\nis being used in Node.js or a WebWorker, or a WebWorker-like background\nthread within Node.js, and do the right thing in any case.\n\nIn the Worker cases, it is important not to call `importScripts` on the same\nmodule more than once from different files, or all manner of confusing logic\nerrors manifest at runtime, hence the checks below.\n\n    if require?\n        { Structure } = require './structure'\n        { InputStructure } = require './input-structure'\n        { OM } = require 'openmath-js'\n        FOM = require 'first-order-matching'\n    else if WorkerGlobalScope?\n        if not WorkerGlobalScope.Structure?\n            importScripts 'structure.js'\n            importScripts 'input-structure.js'\n        if not WorkerGlobalScope.OM?\n            importScripts 'openmath.js'\n        if not WorkerGlobalScope.metavariableSymbol?\n            importScripts 'first-order-matching.js'\n    else if self?.importScripts?\n        if not self.Structure?\n            importScripts 'release/structure.js'\n            importScripts 'release/input-structure.js'\n        if not self.OM?\n            importScripts 'node_modules/openmath-js/openmath.js'\n        if not self.metavariableSymbol?\n            importScripts 'node_modules/first-order-matching/first-order-matching.js'\n\n## Define the `OutputStructure` class\n\n    class OutputStructure extends Structure\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'OutputStructure', OutputStructure\n\nMarking an `OutputStructure` dirty, unlike with `InputStructure`s, does not\npropagate up the ancestor chain.  Thus we define the following function\nanalogous to the one in the `InputStructure` class, but without the\nrecursive propagation.\n\n        markDirty : ( yesOrNo = yes ) -> @dirty = yesOrNo\n\nA newly constructed instance should be considered dirty (because it probably\njust changed and thus may need to be validated).  It should also record the\n`InputStructure` instance that gave rise to it, if indeed this construction\nhappend as part of interpretation.\n\n        constructor : ->\n            super arguments...\n            @markDirty()\n            IS = Structure::subclasses.InputStructure\n            if len = IS::instancesBeingInterpreted?.length\n                @origin = IS::instancesBeingInterpreted[len-1]\n            @enableFeedback yes, no\n\nSimilar to tracking origins for `OutputStructure` nodes, if a connection is\nformed between `OutputStructure` instances, we will want to track its origin\nin the sense of which `InputStructure` was being interpreted when the\nconnection was formed.\n\n        addConnectionOrigin : ( source, target, data ) ->\n            IS = Structure::subclasses.InputStructure\n            if ( target instanceof OutputStructure ) and \\\n               ( len = IS::instancesBeingInterpreted?.length )\n                data._origin = IS::instancesBeingInterpreted[len-1].id()\n\n## Feedback\n\nFeedback on this structure can be given by calling a single function,\n`feedback`, and passing an object with a feedback `type` field and optional\nother fields.  By default, that method finds the `InputStructure` instance\nthat created this `OutputStructure` and if there is such a thing, calls the\n`feedback` method in it.  (That will delegate the work further, but that is\nnot our concern here.)\n\nBut it is sometimes the case that we do not wish generated feedback to be\nimmediately emitted to the client.  For instance, if several different\nmethods to validate this `Structure` are being attempted in sequence, we\nmight wish to inspect all the generated feedback before deciding which\nsubset of it to emit to the client.\n\nThus we provide a function for enabling or disabling the storing of\nfeedback.  When enabled, no feedback is emitted, but it is all stored in a\n`feedbackQueue`.  At any point, that queue can be cleared, optionally\nemitting all of its contents first, using the methods below.\n\n        feedback : ( feedbackData ) ->\n            if @sendingFeedback\n                @origin?.feedback feedbackData\n            else\n                @feedbackStore.push feedbackData\n        enableFeedback : ( enable = yes, emitAll = no ) ->\n            if ( @sendingFeedback = enable ) and emitAll\n                @feedback feedbackData for feedbackData in @feedbackStore\n            @feedbackStore = [ ]\n\n## Labels\n\n`OutputStructure`s can be labeled.  This is implemented by a function that\ntakes a string as input and returns true or false, whether the structure has\nthat label.  This permits a lot of freedom in how we match labels to\nstructures, including case sensitivity, punctuation sensitivity, multiple\nlabels, and so on.  By default, however, everything is unlabeled, so the\nbase implementation is as follows.\n\n        hasLabel : ( label ) -> no\n\nWe can look back through a list of all the `OutputStructure`s accessible to\na given one, seeking the first one that admits to having a given label, by\nuse of the `hasLabel()` function on each accessible structure.  We implement\nthat generically with the following class method, then make a shortcut for\nuse by instances below.  Here we assume that the accessibles array is given\nin the order in which the nodes appear in the tree\n(`Structure.isEarlierThan()`).\n\n        @lookUpIn : ( label, accessibles ) ->\n            for candidate in accessibles[...].reverse()\n                return candidate if candidate.hasLabel label\n            undefined\n\nWhen an instance asks to look up the nearest accessible thing with a given\nlabel, what it means is among those things accessible to that instance.\n\n        lookUp : ( label ) ->\n            @firstAccessible ( candidate ) -> candidate.hasLabel label\n\nWhen an instance asks to look up all accessible things with a given label,\nthey are still returned in the order in which they are encountered when\ntraversing the list of accessibles.\n\n        lookUpAll : ( label ) ->\n            @allAccessibles ( candidate ) -> candidate.hasLabel label\n\n## Citations\n\nObeying the conventions set down by interpretation, as defined in\n[the InputStructure class](input-structure.litcoffee#citations), we provide\nthe following function to look up all structures cited by this one.  The\nnotion of \"looking them up\" here means finding the targets that are cited by\nthe data stored in this object and creating a dictionary mapping the means\nof citation to the structures cited.\n\nWe respect the following citation conventions set down by the\n`InputStructure` class linked to in the previous paragraph:\n * The \"premise citations\" and \"reason citations\" attributes will each map\n   to a list of strings, each of which attempts to cite something by label.\n * Connections out of this node whose JSON data contains the key-value pair\n   (\"type\",\"premise citation\") or (\"type\",\"reason citation\") are each\n   interpreted as a citation.\n\nThe form of the result will be a JSON structure with this format:\n```javascript\n{\n    premises : { // citations of premises go in here\n        connections : [ // citations by connection go in here\n            {\n                cited : \"id of target structure\",\n                id : \"id of connection, so you can get its data later\"\n            }\n            // zero or more such objects in this array\n        ],\n        labels : [ // citations by label go in here\n            {\n                cited : \"id of cited structure\",\n                label : \"text of label by which it was cited\"\n            }\n            // zero or more such objects in this array\n        ]\n    },\n    reasons : {\n        // same structure as premises object above\n    }\n}\n```\n\n        lookUpAllCitations : ->\n\nInitialize the data structure we will return, empty at first.\n\n            result =\n                premises :\n                    connections : [ ]\n                    labels : [ ]\n                reasons :\n                    connections : [ ]\n                    labels : [ ]\n\nFill both connections arrays by examining all connections out of this\nstructure for their types.\n\n            for connection in @getConnectionsOut()\n                data = @getConnectionData connection\n                for type in [ 'premise', 'reason' ]\n                    if data?.type is \"#{type} citation\" and\n                       ( target = @getConnectionTarget connection )?\n                        result[\"#{type}s\"].connections.push\n                            cited : target.id()\n                            id : connection\n\nFill both labels arrays by examining the relevant attributes of this\nstructure.\n\n            for type in [ 'premise', 'reason' ]\n                if ( labels = @getAttribute \"#{type} citations\" ) and \\\n                   labels instanceof Array\n                    for label in labels\n                        for cited in @lookUpAll( label ).reverse()\n                            result[\"#{type}s\"].labels.push\n                                cited : cited.id()\n                                label : label\n\nReturn the result.\n\n            result\n\n## Handling change events\n\nWhen interpretation has completed, the `justChanged()` function will be\ncalled in every structure in the Output Tree has been updated during that\ninterpretation phase.  We provide the following default implementation for\n`justChanged()` that will defer the work to the class method\n`instanceJustChanged` if and only if that class method exists.  It doesn't\nyet exist, so this is ineffective unless some later code installs just such\na class method.\n\nThe reason for this is that the actual implementation we want to provide\ndepends upon some global data structures in the LDE to which this module\ndoes not have access.  When the LDE loads this module, it can fill in the\nmissing class method with the appropriate implementation, which accesses its\nown internals.\n\n        justChanged : -> OutputStructure::instanceJustChanged? @\n\n## Define `OutputExpression` as a type of `OutputStructure`\n\nAn `OutputExpression` is the most common type of mathematics we think of\nwhen doing mathematics on a computer.  It may be a mathematical noun, such\nas 3x, or a mathematical statement, such as \"not every number is even.\"\nThese are what typically appear inside dollar signs in LaTeX documents, and\nform the majority of the content of any proof in a formal system.\n\nIn the LDE, we use OpenMath data types to store expressions.  In particular,\nwe rely on a JavaScript implementation of part of the OpenMath Standard,\n[published here](https://github.com/lurchmath/openmath-js).  Each expression\nis a tree made up of instances of the following class, each of which\ncorresponds to a node in an OpenMath tree, and there are conversion\nfunctions between the two data structures.\n\n    class OutputExpression extends OutputStructure\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'OutputExpression',\n            OutputExpression\n\nThe constructor takes an arbitrary number of parameters.  The first is\nalways the OpenMath type that this object represents (e.g., string, integer,\nfunction application, etc.).  That type should be expressed in the\nthree-letter form used in the OpenMath module's code (e.g., \"int\", \"flo\",\n\"str\", etc., as a JavaScript string).\n\nThe remaining parameters depend on the first.\n\n * If the first parameter gives this object an OpenMath atomic type, then\n   the next should contain the atomic content (e.g., string data if this is\n   a string).  In one case (OpenMath symbol) this atomic content is spread\n   over two or three parameters: name, CD, and optional URI.\n * If the first parameter gives this object an OpenMath binding type, then\n   the second parameter should be an array of the indices of bound\n   variables, and then the third and further parameters are its children,\n   which must be `OutputExpression` instances, and will be passed to the\n   superclass's constructor.\n * In all other cases, the second and further parameters are the children,\n   and are passed on as in the previous case.\n\nIf an invalid type is passed as first parameter, we construct an OpenMath\nerror object instead, with no children and no attributes.  Any other\nconfiguration of invalid parametrs (e.g., bad binding indices) will be\naccepted, but may not convert to an OpenMath object in `toOpenMath()`.\nNote that an error object constructed that way will not correctly convert\nto an OpenMath object, because it has not head symbol.\n\nCurrently there is not any supported way to decorate an `OutputExpression`\ninstance with OpenMath attributes, though that could be added later if the\nneed arises.\n\n        constructor : ( type, rest... ) ->\n            switch type\n                when 'int', 'flo', 'str', 'byt', 'var'\n                    super()\n                    @setAttribute 'OM type', type\n                    @setAttribute 'OM atomic value', rest[0]\n                when 'sym'\n                    super()\n                    @setAttribute 'OM type', type\n                    @setAttribute 'OM atomic value', rest\n                when 'bin'\n                    super rest[1..]...\n                    @setAttribute 'OM type', type\n                    @setAttribute 'OM bound indices', rest[0]\n                when 'app', 'err'\n                    super rest...\n                    @setAttribute 'OM type', type\n                else\n                    super()\n                    @setAttribute 'OM type', 'err'\n\nWe wish to be able to extract from any `OutputExpression` instance the\nOpenMath object that it represents.  We do so with the following conversion\nfunction.  If conversion to an OpenMath object fails from an error in the\nOpenMath package, that error is not caught; clients should take care to\nform their `OutputExpression` instances correctly or use `try`/`catch`.\n\nAs stated above, attributes are not yet supported, though such support\ncould be added later.\n\n        toOpenMath : ->\n            switch type = @getAttribute 'OM type'\n                when 'int', 'flo', 'str', 'byt', 'var'\n                    new OM[type] @getAttribute 'OM atomic value'\n                when 'sym'\n                    new OM[type] @getAttribute( 'OM atomic value' )...\n                when 'app', 'err'\n                    childResults =\n                        ( child.toOpenMath() for child in @children() )\n                    new OM[type] childResults...\n                when 'bin'\n                    indices = @getAttribute 'OM bound indices'\n                    vars = for i in indices\n                        OM.var @children()[i].getAttribute 'OM atomic value'\n                    notVarIndices = ( i for i in [0...@children().length] \\\n                        when i not in indices )\n                    head = @children()[notVarIndices[0]].toOpenMath()\n                    body = @children()[notVarIndices[1]].toOpenMath()\n                    new OM.bin head, vars..., body\n                else\n                    throw \"Not a valid OpenMath type: #{type}\"\n\nWe also want the inverse conversion function, from `OMNode` instances (from\nthe OpenMath package) to instances of this type.  We provide that function\nas a class method here, and one should call it on an instance of the\n`OMNode` class; it will yield an instance of this class in every case,\nbecause `OMNode` instances cannot be incorrectly formed.\n\nAs stated above, attributes are not yet supported, though such support\ncould be added later.\n\n        @fromOpenMath : ( node ) ->\n            childResults = ( OutputExpression.fromOpenMath child \\\n                for child in node.children )\n            switch node.type\n                when 'i' then new OutputExpression 'int', node.value\n                when 'f' then new OutputExpression 'flo', node.value\n                when 'st' then new OutputExpression 'str', node.value\n                when 'ba' then new OutputExpression 'byt', node.value\n                when 'sy' then new OutputExpression 'sym', node.name,\n                    node.cd, node.uri\n                when 'v' then new OutputExpression 'var', node.name\n                when 'a' then new OutputExpression 'app', childResults...\n                when 'bi'\n                    vars = ( new OutputExpression 'var', v.name \\\n                        for v in node.variables )\n                    head = OutputExpression.fromOpenMath node.symbol\n                    body = OutputExpression.fromOpenMath node.body\n                    new OutputExpression 'bin', [1...childResults.length],\n                        head, vars..., body\n                when 'e' then new OutputExpression 'err',\n                    OutputExpression.fromOpenMath( node.symbol ),\n                    childResults...\n                else throw \"This should never happen - how did an\n                    OMNode instance get type #{node.type}?\"\n\nFor convenience, we install in the `OMNode` class a method for converting\ninstances to `OutputExpression` types by simply deferring the work to the\nabove function.\n\n    OM::toOutputExpression = -> OutputExpression.fromOpenMath @\n\n## Define `OutputRule` as a type of `OutputStructure`\n\nAn `OutputRule` is a member of the Output Tree that has a function\n`validateStep()` that can be called on a step of work to validate it.  As\ndocumented\n[elsewhere](https://lurchmath.github.io/lde/site/api-phases/#validation),\na step `S` is normally validated by calling `S.validate(worker,callback)`,\nbut in the case when the step cites a rule, that function will typically\nwant to delegate the work to the rule itself, so that we can support rules\nwith arbitrary decision procedures within an object-oriented framework.\n\n    class OutputRule extends OutputStructure\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'OutputRule', OutputRule\n\nThe `validateStep()` function takes three parameters: the step to validate\nand the `worker` and `callback` functions that were given to its `validate`\nroutine.  The `worker` can be used to do any lengthy tasks in the\nbackground and the `callback` should naturally be called to indicate when\nthe task is complete (passing no arguments).\n\nThe default implementation just produces feedback saying that no real\nvalidation was done, and then calls the callback.  Naturally, subclasses\nthat do real work will want to override this default.\n\n        validateStep : ( step, worker, callback ) ->\n            step.feedback\n                type : 'validation result'\n                validity : 'indeterminate'\n                message : 'No real validation was performed.'\n            callback()\n\nWe also provide a class member that can be copied out of this class and into\n`OutputExpression` instances as their validate routine.  This routine just\ndelegates validation to the cited rule.  If there is any non-`OutputRule`\ninstance cited as a reason, the step is judged invalid.  If there is more\nthan one `OutputRule` step cited as a reason, then this routine checks each\nin turn to see if any will validate the step.  If not, then the resulting\nnegative feedback includes a `phases` field containing all the feedback\nobjects generated by all the cited rules.\n\n        @basicValidate : ( worker, callback ) ->\n\nDisable feedback emission, because we will want to inspect the feedback\ngenerated instead of just immediately sending it out.  Compute the list of\ncited reasons.\n\nNote that throughout this routine, the `this` object is assumed to be a step\nof work, because this function is designed to be installed in such objects\nas their `validate` routine.\n\n            @enableFeedback no\n            reasons = @lastCitationLookup.reasons\n            reasons = reasons.connections.concat reasons.labels\n\nWe process each cited reason asynchronously, using a function that calls\nitself recursively in callbacks.\n\n            do processNext = =>\n\nThe base csae is when we've finished processing all reasons.  This may be\nbecause there weren't any, in which case we do nothing, or because all of\nthem said the step was invalid, in which case we combine them into a single\nfeedback message, which we emit.\n\n                if reasons.length is 0\n                    keptFeedback = @feedbackStore\n                    @enableFeedback yes, no\n                    if keptFeedback.length > 1\n                        @feedback\n                            type : 'validation result'\n                            validity : 'invalid'\n                            components : keptFeedback\n                    else if keptFeedback.length is 1\n                        @feedback keptFeedback[0]\n                    return callback()\n\nThere remain reasons to process, so get the next one.  If we can't seem to\nfind it by its ID, then some internal error has happened, because that's not\nsupposed to ever happen.  Report it just in case and stop validation\nentirely in that case.\n\n                reason = reasons.shift()\n                if not ( rule = Structure.instanceWithID reason.cited )?\n                    @enableFeedback yes, no\n                    @feedback\n                        type : 'validation result'\n                        validity : 'invalid'\n                        message : \"Internal error:\n                            No Structure with ID #{reason.cited}\"\n                        missingID : reason.cited\n                    return callback()\n\nIf they cited a non-rule, stop right now and tell them that's invalid and we\nwon't proceed to even try to validate this step.\n\n                if rule not instanceof OutputRule\n                    @enableFeedback yes, no\n                    @feedback\n                        type : 'validation result'\n                        validity : 'invalid'\n                        message : 'You cited a non-rule as a reason.'\n                        nonRule : reason.cited\n                    return callback()\n\nRun the validation procedure for the cited rule, and when it completes,\ninspect the feedback it produced.  If it's positive, send it right now and\nbe done.  If it's anything else, keep looking, via a recursive call.\n\n                rule.validateStep @, worker, =>\n                    lastFeedback = @feedbackStore[@feedbackStore.length - 1]\n                    if lastFeedback?.validity is 'valid'\n                        @enableFeedback yes, no\n                        @feedback lastFeedback\n                        callback()\n                    else\n                        processNext()\n\n## Define `TemplateRule` as a type of `OutputRule`\n\nA `TemplateRule` is an `OutputRule` that validates steps based on a template\nof zero or more premises and one or more conclusion.  They can be\ntree-based (meaning that they perform pattern matching based on expression\ntrees) or string-based (meaning that they perform pattern matching based on\nstrings) and they can be uni-directional (if premises then conclusion) or\nbi-directional (premises if and only if conclusions).\n\n    class TemplateRule extends OutputRule\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'TemplateRule', TemplateRule\n\nThe `validateStep()` function of the this class assumes the class was\nconstructed syntactically correctly, that is, with only children that are of\nthe class `OutputExpression` and with some subset of them having the\nattribute \"premise\" set to true (the rest of them being conclusions).\n\nIt assumes tree-based matching, but can be configured to use string-based\nmatching if the attribute \"matching type\" is set to \"string\".  It assumes a\none-way (if-then) rule, but can be configured to perform two-way (if and\nonly if) checking if the attribute \"iff\" is set to true.\n\n*Right now, none of the options in the previous paragraph are implemented.\nAt the moment, pattern-based matching of one-way rules is the only option.*\n\n        validateStep : ( step, worker, callback ) ->\n\nCompute the list of premises and conclusions in OpenMath form.  Compute all\none-conclusion forms of this rule, one for each conclusion, using all the\npremises each time.\n\n            premises = ( child.toOpenMath() for child in @children() \\\n                when child.getAttribute 'premise' )\n            forms = [ ]\n            for child in @children()\n                if not child.getAttribute 'premise'\n                    next = OM.app(\n                        OM.sym( 'Rule', 'Lurch' ),\n                        ( p.copy() for p in premises )...,\n                        child.toOpenMath()\n                    )\n                    FOM.setMetavariable v for v in \\\n                        next.descendantsSatisfying ( d ) -> d.type is 'v'\n                    forms.push next\n\nUnite the step and its cited premises into the same structure, so that we\nmight compare them.\n\n            premises = [ ]\n            if step not instanceof OutputExpression\n                step.feedback\n                    type : 'validation result'\n                    validity : 'invalid'\n                    message : 'Conclusion is not an expression'\n            for type in [ 'connections', 'labels' ]\n                for citation in step.lastCitationLookup.premises[type]\n                    premise = Structure.instanceWithID citation.cited\n                    if premise not instanceof OutputExpression\n                        step.feedback\n                            type : 'validation result'\n                            validity : 'invalid'\n                            message : 'Cited premise is not an expression'\n                            id : citation.cited\n                        return callback()\n                    premises.push premise\n            instance = OM.app(\n                OM.sym( 'Rule', 'Lurch' ),\n                ( p.toOpenMath() for p in premises )...,\n                step.toOpenMath()\n            )\n\nSee if any of the forms of this rule matches the instance as claimed.  We do\nthis asynchronously in background threads, but begin by installing the\nnecessary script and step data into the worker we've been given.\n\n            @setupWorker worker, { step : instance.encode() }, callback, =>\n                index = 0\n                do processNext = =>\n\nFirst, if we've tried all the forms, then they've all failed, so we report\nthat the rule does not justify the step.\n\n                    if index is forms.length\n                        step.feedback\n                            type : 'validation result'\n                            validity : 'invalid'\n                            message : 'Cited rule does not justify the\n                                step'\n                        return callback()\n\nOtherwise, we have another form to try, so let's queue it up for checking in\nthe background worker.\n\n                    @setupWorker worker, { rule : forms[index].encode() },\n                        callback, ->\n                            worker.run ( ->\n                                rule = OM.decode globalData.rule\n                                step = OM.decode globalData.step\n                                myMatch = nextMatch new Constraint(\n                                    rule\n                                    step\n                                )\n                                if contents = myMatch?[0]?.contents\n                                    for { pattern, expression } in contents\n                                        # console.log pattern.simpleEncode(),\n                                        #     expression.simpleEncode()\n                                        pattern : pattern.encode()\n                                        expression : expression.encode()\n                                else\n                                    null\n                            ), ( response ) ->\n                                if response.error?\n                                    step.feedback\n                                        type : 'validation result'\n                                        validity : 'invalid'\n                                        message : 'Internal error in pattern\n                                            matching'\n                                        details : response.error\n                                    return callback()\n\nHere we've gotten past all the error checks, so we either have a match,\nwhich means the step is valid, or we have a non-match, which means we should\nmove on to try the next form of the rule, with a recursive call to\n`processNext()`.\n\n                                if response.result?\n                                    step.feedback\n                                        type : 'validation result'\n                                        validity : 'valid'\n                                    return callback()\n                                index++\n                                processNext()\n\nThe following utility function is used by `validateStep()` to set up a\nworker for use in matching.  It ensures that the Matching Package has been\nloaded (exactly once) in that worker, and ensures that all the given global\ndata has been installed as well.  If an error occurs at any point, it calls\nthe error callback after first sending negative validation feedback about an\ninternal error.  If no error occurs, it calls the success callback.\n\n        setupWorker : ( worker, data, error, success ) ->\n\nDefine a helper function for expressing internal errors, to simplify code\nbelow.\n\n            ie = ( message ) =>\n                @feedback\n                    type : 'validation result'\n                    validity : 'invalid'\n                    message : \"Internal error setting up validation worker:\n                        could not #{message}\"\n                return error()\n\nCreate the list of keys in `data` that we need to install in the worker.\n\n            toInstall = ( k for own k, v of data )\n\nCreate an asynchronous recursive function to install all those keys.\n\n            do nextStep = =>\n                if toInstall.length > 0\n                    key = toInstall.shift()\n                    worker.installData key, data[key], ( response ) =>\n                        if response.error? then return ie \"install #{key}\"\n                        nextStep()\n\nWhen they're all installed, the last step is to install the matching\npackage if and only if it's needed, then call the `success` callback.\n\n                else\n                    worker.run ( -> typeof isMetavariable ), ( response ) =>\n                        if response.error?\n                            return ie 'check package status'\n                        if response.result is 'undefined'\n                            path = 'first-order-matching.js'\n                            if require? then path = \"release/#{path}\"\n                            worker.installScript path, ( response ) =>\n                                if response.error?\n                                    return ie 'install matching package'\n                                return success()\n                        else\n                            success()\n\n## Exports\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports?\n        exports.OutputStructure = OutputStructure\n        exports.OutputExpression = OutputExpression\n        exports.OM = exports.OMNode = OM\n"]}