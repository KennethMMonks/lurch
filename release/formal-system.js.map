{"version":3,"sources":["formal-system.litcoffee"],"names":["FormalSystem","Structure","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","require","superClass","className","addSubclass","exports"],"mappings":"AAaI,IAAAA,aAAAC,UAAAC,OAAA,SAAAC,EAAAC,GAAA,SAAAC,IAAAC,KAAAC,YAAAJ,EAAA,IAAA,IAAAK,KAAAJ,EAAAK,QAAAC,KAAAN,EAAAI,KAAAL,EAAAK,GAAAJ,EAAAI,IAAA,OAAAH,EAAAM,UAAAP,EAAAO,UAAAR,EAAAQ,UAAA,IAAAN,EAAAF,EAAAS,UAAAR,EAAAO,UAAAR,6BAAG,oBAAAU,SAAA,OAAAA,UAAgBZ,UAAcY,QAAQ,eAARZ,WAI3BD,aAAA,SAAAc,qFAAqBb,uBAOvBc,UAAYd,UAAUe,YAAY,eAAgBhB,KAPhD,GAaH,oBAAAiB,SAAA,OAAAA,UAAcA,QAAQjB,aAAeA","file":"formal-system.js","sourcesContent":["\n# Formal System Structures\n\nThis file defines a particular subclass of the\n[Structure](structure.litcoffee) class.  It is supposed to model the idea of\na formal system in mathematics.  For example, the Peano system for defining\nthe natural numbers, the Zermelo-Frankel definition of set theory, an\naxiomatic definition of propositional logic, and any system that defines\nEuclidean plane geometry are all mathematical concepts that this class might\nattempt to model.\n\nIf we are running in node we need to load the `Structure` class.\n\n    if require? then { Structure } = require './structure'\n\nNow we can extend it to our new class.\n\n    class FormalSystem extends Structure\n\nWe first need to register this subclass with the global list of subclasses\nof the Structure` class (see the discussion regarding [Serialization and\nDeserialization](structure.litcoffee#serialization-and-deserialization) in\nthe `Structure` class documentation.)\n\n        className : Structure.addSubclass 'FormalSystem', FormalSystem\n\nWe will add a validation routine and perhaps other methods here later.\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.FormalSystem = FormalSystem\n"]}