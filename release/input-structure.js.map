{"version":3,"sources":["input-structure.litcoffee"],"names":["BasicInputModifier","Dependency","InputExpression","InputModifier","InputStructure","OutputStructure","Structure","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","require","WorkerGlobalScope","importScripts","self","superClass","className","addSubclass","markDirty","yesOrNo","ref","alreadyStarted","feedback","type","dirty","addLabelsTo","targets","flags","i","index","indices","len","regex","results","t","target","getAttribute","Array","length","indexOf","RegExp","hasLabel","label","test","instancesBeingInterpreted","instancesAlreadyStarted","clearAlreadyStarted","interpret","accessibles","childResults","scope","childArray","count","j","len1","node","result","insertChild","recursiveInterpret","allChildResults","childResult","children","originalAccessiblesLength","slice","push","concat","pop","trackIDs","feedbackData","subject","id","updateData","incomingConnection","source","sources","clearAttributesFromModifiers","getConnectionsIn","getConnectionSource","sort","a","b","isEarlierThan","updateDataIn","setCameFromModifier","attrKey","setAttribute","getCameFromModifier","attributes","setSingleValue","value","hasOwnProperty","addListItem","item","listSoFar","addSetElement","element","asString","otherElement","setSoFar","JSON","stringify","dependencyContents","arguments","getContents","updateConnections","targetExpression","triple","actions","ref1","exports"],"mappings":"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","file":"input-structure.js","sourcesContent":["\n# Input Structures\n\nThe LDE module allows clients to construct input to that module as trees of\n`Structures`, but more specifically, trees of the subclass of `Structure`\ndefined in this module, `InputStructure`.\n\nThese have entirely different functionality than their cousins\n`OutputStructure` instances.  In short, these support interpretation while\n`OutputStructure`s support validation.  You can also think of the difference\nas this:  `InputStructure`s represent the syntax of what the user has\nexpressed to the client, and `OutputStructure`s represent the semantics into\nwhich we interpret that syntax.\n\n## Import modules\n\nImport the `Structure` class.  The following lines detect whether this\nis being used in Node.js or a WebWorker, or a WebWorker-like background\nthread within Node.js, and do the right thing in any case.\n\nIn the Worker cases, it is important not to call `importScripts` on the same\nmodule more than once from different files, or all manner of confusing logic\nerrors manifest at runtime, hence the checks below.\n\n    if require?\n        { Structure } = require './structure'\n        { OutputStructure } = require './output-structure'\n    else if WorkerGlobalScope?\n        if not WorkerGlobalScope.Structure?\n            importScripts 'structure.js'\n            importScripts 'output-structure.js'\n    else if self?.importScripts?\n        if not self.Structure?\n            importScripts 'release/structure.js'\n            importScripts 'release/output-structure.js'\n\n## Define the `InputStructure` class\n\n    class InputStructure extends Structure\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'InputStructure', InputStructure\n\nMarking an `InputStructure` dirty means marking its entire ancestor chain\ndirty, because if a child's meaning has changed, that may impact the meaning\nof its parent, and so on up the chain.  If it is marked clean, this does not\nnecessarily propagate upwards.\n\nIf interpretation for this instance has already begun, then it is illegal to\nmark it dirty (or we might cause an infinite loop of reinterpretations).\nSubclasses should not do this, but in case they do, we police it here by not\nrespecting the request, and sending a feedback error.  For information on\ntypes of feedback, see [the API documentation page for the LDE](https://lurchmath.github.io/lde/site/api-lde/).\n\n        markDirty : ( yesOrNo = yes ) ->\n            if yesOrNo and @alreadyStarted\n                return @feedback type : 'dirty loop'\n            @dirty = yesOrNo\n            if yesOrNo then @parentNode?.markDirty()\n\n### Labels\n\nWe provide the following convenience function that embodies a few\nconventions for assigning labels to `OutputStructure`s.  We place it here so\nthat it is available to all subclasses of `InputStructure` as follows:\n\nThe default implementation of `recursiveInterpret()` calls this function\nwhenever an `InputStructure` returns its interpretation from its\n`interpret()` routine.  Thus subclasses of `InputStructure` do not even need\nto consider this function; it is called automatically on their behalf.\nSubclasses that do not wish to use it simply ensure that they do not use the\nattributes that it reads from (or redefine this routine or\n`recursiveInterpret()`).\n\n        addLabelsTo : ( targets ) ->\n\nFirst convention:  If this `InputStructure` has an attribute with key\n`\"label targets\"` then it is treated as an array of integers, and we only\nlabel those targets whose indices in the array passed as parameter are on\nthat list.\n\n            if ( indices = @getAttribute 'label targets' )? and \\\n               ( indices instanceof Array )\n                targets = ( t for t,index in targets when index in indices )\n\nSecond convention:  If this `InputStructure` has an attribute with key\n`\"label regex\"` then its value is converted into a regular expression object\nand the target `OutputStructure`s will test labels against that regular\nexpression.  Any flags in the `\"label regex flags\"` attribute apply.\n\n            if ( regex = @getAttribute 'label regex' )?\n                flags = ( @getAttribute 'label regex flags' ) ? ''\n                regex = new RegExp regex, flags\n                for target in targets\n                    target.hasLabel = ( label ) -> regex.test label\n\nOther conventions may be added here in the future.\n\n### Interpretation\n\nThe main purpose of `InputStructure`s is to be interpretable, converting the\nLDE's Input Tree (analogous to syntax) into its Output Tree (semantics).\nThe functions in this section support that purpose.\n\nWe will track which instance we are interpreting with a class variable.  It\nwill be a stack, in case one `interpret()` routine ever calls another\n(although this is not expected).  It will track the current set of running\n`interpret()` calls.  This will help us know, from anywhere in the LDE,\nwhich structures are currently being interpreted.  This variable is\nmaintained by the `recursiveInterpret()` routine defined further below.\n\n        instancesBeingInterpreted : [ ]\n\nWe will track which instances have started being interpreted with another\nclass variable.  This is important for preventing infinite loops in the\nrecursive interpretation process, should some instance try to mark as dirty\nanother instance whose interpretation has already begun (or even finished).\nThis, too, is managed by `recursiveInterpret()`, as well as the function\ndefined here.\n\n        instancesAlreadyStarted : [ ]\n        @clearAlreadyStarted : ->\n            for instance in InputStructure::instancesAlreadyStarted\n                delete instance.alreadyStarted\n            InputStructure::instancesAlreadyStarted = [ ]\n\nThe `interpret()` function defines how each subclass of `InputStructure`\nproduces one or more nodes in the Output Tree.  It returns zero or more\n`OutputStructure` instances, in an array.  We provide the following default\nimplementation that makes `InputStructure` instances behave like generic\nwrappers around their children.\n\nThe parameters have the following meanings:\n * `accessibles` - the list of `OutputStructure` instances in the Output\n   Tree accessible to the structures produced by this function\n * `childResults` - the list of results produced by interpreting the\n   children of this node (already computed), which will be a list of lists,\n   because each child's results are an array of `OutputStructure`s.\n * `scope` - the list of highest-level nodes in the Input Tree whose\n   interpretations will be placed in the scope of the interpretation of this\n   node, in the Output Tree\n\nSubclasses which override this must be sure to satisfy the following\nproperties.\n * Compute the result based *only* on the data in the first two parameters,\n   `accessibles` and `childResults`.  Do not read from other parts of the\n   Input or Output Trees, including the data in `scope`.\n * Mark another `InputStructure` dirty *only* if it is a descendant of one\n   of the structures in the `scope` array (the third parameter).\n\n\n        interpret : ( accessibles, childResults, scope ) ->\n            result = new OutputStructure() # plain vanilla wrapper node\n            count = 0\n            for childArray in childResults\n                result.insertChild node, count++ for node in childArray\n            [ result ] # must be an array even if it contains only one node\n\nThe `recursiveInterpret()` function defines how the Input Tree will be\ntraversed, making calls to the `interpret()` functions of its nodes as\nneeded to assemble the final interpretation of the entire Input Tree.  The\n`accessibles` and `scope` parameters default to empty (as they should when\nthis is run at the root of the Input Tree) but then in recursive calls have\nthe same meanings as documented above for the `interpret()` routine.  No\n`childResults` are passed in this case because the job of this routine is to\ndo the recursion that produces the recursive results from children.\n\n        recursiveInterpret : ( accessibles = [ ], scope = [ ] ) ->\n            # console.log 'recursiveInterpret for', @id()\n            originalAccessiblesLength = accessibles.length\n            allChildResults = [ ]\n\nThis loop does the actual recursion, to compute `allChildResults`.\n\n            for child, index in children = @children()\n\nFor the first child, the same list of accessibles for the parent applies to\nthat child, so we don't need to modify `accessibles`.  As the `scope`, we\npass the list of all subsequent siblings, in order.\n\n                childResult = child.recursiveInterpret accessibles,\n                    children[index+1...]\n                allChildResults.push childResult\n\nBut for later children, more things are accessible.  Specifically, anything\njust created by interpreting `child` should be accessible to its next\nsibling, so we update `accessibles` as follows, in preparation for the next\niteration of this loop through the children.\n\n                accessibles = accessibles.concat childResult\n\nNow that the recursion into children is complete, we will ask this structure\nto interpret itself in light of what's accessible to it.  To prepare for\nthat, we must first restore the `accessibles` array to its original content.\n\n            accessibles = accessibles[...originalAccessiblesLength]\n\nCall `interpret()` on this node, with all the correct parameters, mark this\nstructure as clean for interpretation, and return the result.  Push this\nonto the stack of instances being interpreted right before, and pop it right\nafter.\n\n            InputStructure::instancesBeingInterpreted.push @\n            InputStructure::instancesAlreadyStarted.push @\n            @alreadyStarted = yes\n            result = @interpret accessibles, allChildResults, scope\n            @addLabelsTo result\n            InputStructure::instancesBeingInterpreted.pop()\n\nAs we build the tree, we need to track the IDs used in it, so that nodes\nthat wish to form connections among descendants can do so.  Thus we must\nbegin tracking IDs as soon as new nodes are formed.  We do so here.\n\n            structure.trackIDs() for structure in result\n            @markDirty no\n            result\n\n### Feedback\n\nTo give feedback about a particular `InputStructure` instance, call the\n`feedback` method in that instance, which will delegate the work to the\nclass-level `feedback` method in the `Structure` class, but only after\nadding itself as the subject of the feedback data.  While that method's\ndefault implementation is a stub, it is overwritten by the LDE when\n[the Structure module](structure.litcoffee) is loaded into the LDE.\n\n        feedback : ( feedbackData ) ->\n            feedbackData.subject = @id()\n            Structure.feedback feedbackData\n\n## Define `InputExpression`s as a type of `InputStructure`\n\n`InputStructure`s come in two varieties, each represented by a subclass. The\nfirst is defined in this section:  An `InputExpression` is the type of\n`InputStructure` that the LDE will interpret into meaningful content in its\nOutput Tree.  In the next section, we define `InputModifier`s, which do not\nproduce nodes in the Output Tree, but just modify `InputExpression`\ninstances and thus impact how they produce nodes in the Output Tree.\n\n    class InputExpression extends InputStructure\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'InputExpression', InputExpression\n\n### Expression-specific functionality\n\nDuring interpretation of the Input Tree, each expression will need to import\nfrom the modifiers connected to it any data that they wish to embed into the\nexpression, so that such data can be used to inform the expression's\ninterpretation.  We provide the following function for doing so.\n\nIt is required to process incoming connections in the order that the\nmodifiers appear in the Input Tree.  Thus we find all the modifiers first,\nthen sort them by their order in the tree, then embed the data.  The\n`clearAttributesFromModifiers()` function is documented later.\n\n        updateData : ->\n            @clearAttributesFromModifiers()\n            sources = [ ]\n            for incomingConnection in @getConnectionsIn()\n                source = @getConnectionSource incomingConnection\n                sources.push source if source instanceof InputModifier\n            sources.sort ( a, b ) ->\n                if a is b then 0 else if a.isEarlierThan b then -1 else 1\n            source.updateDataIn @ for source in sources\n\nWhen an `InputModifier` writes to an attribute of this object, we may want\nto mark the attribute as having come from a modifier.  This will help us\nprovide some convenience features to modifiers as they write to attributes.\nWe thus provide the following two functions that use internal attributes\n(ones beginning with underscore) to store metadata about an attribute.\n\n        setCameFromModifier : ( attrKey ) ->\n            @setAttribute \"_from modifier #{attrKey}\", yes\n        getCameFromModifier : ( attrKey ) ->\n            @getAttribute \"_from modifier #{attrKey}\"\n\nBefore the modification phase, it can be useful to delete everything that\nwas set by a modifier, so that modifiers can accumulate list or set data in\ntheir target without worrying about compounding what they added in the last\nrun of the modification phase.  Thus the following function guarantees that\nthe expression is in a pristine state, as far as modifier data is concerned.\n\n        clearAttributesFromModifiers : ->\n            for own key of @attributes\n                if key[...15] is '_from modifier '\n                    delete @attributes[key]\n                    delete @attributes[key[15...]]\n\n### Convenience functions for `InputModifier`s\n\nAn `InputModifier` may want to write a single value into its target\nexpression, but not overwrite any value already stored there.  To that end,\nwe have the following function.  It does exactly that, and also marks the\nwritten value as having come from a modifier.  Thus this function is\nintended to be called only by `InputModifier`s.  It returns true if it set\nthe value, and false if it did not because one was already there.  Because\nattributes written by modifiers are cleared at the start of every run of\n`updateData()`, the first modifier to attempt to write a single value will\nsucceed, and all others will fail.\n\n        setSingleValue : ( key, value ) ->\n            return no if @attributes.hasOwnProperty key\n            @setAttribute key, value\n            @setCameFromModifier key\n            yes\n\nAn `InputModifier` may want to append a single value to an array stored in\nits target expression, but not change any of the earlier values already\nstored in the array.  To that end, we have the following function.  It does\nexactly that, and also marks the array as having come from a modifier.  Thus\nthis function is intended to be called only by `InputModifier`s.  Because\nattributes written by modifiers are cleared at the start of every run of\n`updateData()`, the result at the end of a run of `updateData()` will be the\nlist of values appended by all connected modifiers that write to the array,\nin the order the modifiers appear in the document.\n\n        addListItem : ( key, item ) ->\n            listSoFar = @getAttribute key\n            if listSoFar not instanceof Array then listSoFar = [ ]\n            @setAttribute key, listSoFar.concat [ item ]\n            @setCameFromModifier key\n\nThis function is just like the previous, except it builds a set rather than\na list, and thus the order in which things are added is unimportant (and, of\ncourse, duplicates are not added twice).\n\n        addSetElement : ( key, element ) ->\n            asString = JSON.stringify element\n            setSoFar = @getAttribute key\n            @setCameFromModifier key\n            if setSoFar not instanceof Array then setSoFar = [ ]\n            for otherElement in setSoFar # is it already there?\n                return if asString is JSON.stringify otherElement\n            @setAttribute key, setSoFar.concat [ element ]\n\n## Define `Dependency` as a type of `InputExpression`\n\nThis class implements a foundational type of `InputExpression`, one that is\ngiven a list of `OutputExpression` instances loaded from a dependency file\nand whose `interpret()` routine places those instances directly into the\noutput tree.  It is used at the start of a document to represent all the\ndata imported from other documents on which that one depends (its\n\"dependencies\").\n\nIts constructor takes a list of `OutputExpression` instances and its\n`getContents()` member returns that same list.  That getter is used in the\n`interpret()` routine.\n\n    class Dependency extends InputExpression\n\nThe constructor stores the meaning loaded from dependency documents, which\nmust be a list of `OutputStructure` instances.  Any other arguments are\nignored.\n\n        constructor : ->\n            super()\n            @dependencyContents = \\\n                ( a for a in arguments when a instanceof OutputStructure )\n\nThe following method is just a getter for the data given to the constructor.\n\n        getContents : -> @dependencyContents\n\nInterpretation simply yields that list of contents.\n\n        interpret : ( accessibles, childResults, scope ) -> @getContents()\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'Dependency', Dependency\n\n## Define `InputModifier`s as a type of `InputStructure`\n\nAs documented in the previous section, `InputModifier`s are the subclass of\n`InputStructure` that do not produce interpretations in the LDE's Output\nTree, but instead modify the interpretations of `InputExpression`s, which\ndo.\n\n    class InputModifier extends InputStructure\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'InputModifier', InputModifier\n\nOne unique characteristic of modifiers is that they cannot contain other\nnodes as children.  Thus we alter the constructor so that when it calls the\nparent class's constructor, it does not pass on any arguments, and we\nredefine the `insertChild()` routine to do nothing.\n\n        constructor : -> super()\n        insertChild : ->\n\nAnother unique characteristic of modifiers is that they have no\ninterpretation in the Output Tree.  Thus we define the interpretation here\nfor all modifiers to be the empty array of results.\n\n        interpret : ( accessibles, childResults, scope ) -> [ ]\n\n### Modifier-specific functionality\n\nThe LDE guarantees that, before it interprets the Input Tree into the Output\nTree, it will run `updateConnections()` in every `InputModifier`.  This\ngives the modifier an opportunity to ensure that it is connected (using the\nordinary connections features built into all `Structure`s) to the correct\nset of `InputExpressions`, precisely those that it modifies.  Those\n`InputExpression`s will, during interpretation, then call the\n`updateDataIn()` functions in the modifiers attached to them, giving each\nsuch modifier a chance to impact the expression before it is interpreted.\n\nHere, we provide default implementations of both `updateConnections()` and\n`updateDataIn()`, which do nothing.  Subclasses of `InputModifier` can\nreimplement them to take actions appropriate to that subclass.\n\n        updateConnections : ->\n        updateDataIn : ( targetExpression ) ->\n\n## Define `BasicInputModifier`s as a type of `InputModifier`\n\nThis class implements the simplest (and probably most common) type of\n`InputModifier`, one that makes a series of calls to `setSingleValue()`,\n`addListItem()`, and/or `addSetElement()` in its target(s).  Thus its\nconstructor takes a set of key-value-type triples and stores them for later\nembedding in any target.  The \"type\" of the triple will be which kind of\nfunction should be used to insert it (single value, list item, set element),\nas the string name of that function (`\"setSingleValue\"`, `\"addListItem\"`,\nand `\"addSetElement\"`).\n\n    class BasicInputModifier extends InputModifier\n\nThe constructor that stores the set of triples, discarding any that don't\nmatch the format given above.\n\n        constructor : ->\n            super()\n            @actions = ( triple for triple in arguments \\\n                when triple.length is 3 and triple[2] in \\\n                [ 'setSingleValue', 'addListItem', 'addSetElement' ] )\n\nThe `updateDataIn()` method that just runs the functions described by the\ntriples.\n\n        updateDataIn : ( target ) ->\n            target[type] key, value for [ key, value, type ] in @actions\n\nIn order for a hierarchy of structures to be able to be serialized and\ndeserialized, we need to track the class of each structure in the hierarchy.\nWe do so for this class with the following line of code.\n\n        className : Structure.addSubclass 'BasicInputModifier',\n            BasicInputModifier\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports?\n        exports.InputStructure = InputStructure\n        exports.InputExpression = InputExpression\n        exports.InputModifier = InputModifier\n        exports.BasicInputModifier = BasicInputModifier\n        exports.Dependency = Dependency\n"]}