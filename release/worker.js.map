{"version":3,"sources":["worker.litcoffee"],"names":["InnerScriptPath","LDEWorker","Worker","require","callback","this","callbacks","setup","saveCallback","nextFreeId","hasOwnProperty","runAndClearCallback","data","id","worker","loadedCallback","addEventListener","_this","event","type","isReady","dispatch","message","postMessage","run","codeOrFunction","code","installScript","filename","installFunction","name","func","args","body","substring","indexOf","lastIndexOf","arguments","installData","jsonData","uninstallData","reboot","ref","terminate","exports"],"mappings":"AAyBI,IAAAA,gBAAAC,UAAAC,OAAG,oBAAAC,SAAA,OAAAA,cAAiB,IAAAD,QAAA,OAAAA,OAIhBF,gBAAkB,sBAHhBE,OAAWC,QAAQ,qBAARD,OACbF,gBAAkB,8BAUhBC,UAAA,WA2CY,SAAAA,EAAEG,GACZC,KAACC,aACDD,KAACE,MAAMH,sBAtCXI,aAAe,SAAEJ,GACb,IAAAK,EACA,IADAA,EAAa,EACPJ,KAACC,UAAUI,eAAeD,IAAgBA,WAChDJ,KAACC,UAAUG,GAAcL,EACzBK,eACJE,oBAAsB,SAAEC,GACpB,IAAAR,SAAAA,EAAWC,KAACC,UAAUM,EAAKC,WACpBR,KAACC,UAAUM,EAAKC,WAChBD,EAAKC,wBACZT,EAAUQ,QAAA,eAKdL,MAAQ,SAAEH,UACNC,KAACS,OAAS,IAAIZ,OAAOF,iBACrBK,KAACU,eAAiBX,EAQlBC,KAACS,OAAOE,iBAAiB,UAAW,SAAAC,UAAA,SAAEC,GAClC,MAAsB,WAAnBA,EAAMN,KAAKO,2CACVF,EAACF,wBACME,EAACF,gBAERE,EAACN,oBAAoBO,EAAMN,OALC,CAAAP,oBAmBxCe,QAAU,kBAAOf,KAACU,4BAKlBM,SAAW,SAAEC,EAASlB,UAClBkB,EAAQT,GAAKR,KAACG,aAAaJ,GAC3BC,KAACS,OAAOS,YAAYD,gBAcxBE,IAAM,SAAEC,EAAgBrB,SACQ,mBAAlBqB,IACNA,EAAiB,IAAIA,EAAe,OACxCpB,KAACgB,UAASF,KAAO,MAAOO,KAAOD,GAAgBrB,gBAUnDuB,cAAgB,SAAEC,EAAUxB,UACxBC,KAACgB,UACGF,KAAO,iBACPS,SAAWA,GACbxB,gBAgBNyB,gBAAkB,SAAEC,EAAMC,EAAM3B,GAC5B,IAAA4B,EAAAC,SAAAF,EAAO,GAAGA,EACVC,EAAOD,EAAKG,UAAUH,EAAKI,QAAS,KAAQ,EACtBJ,EAAKI,QAAS,MACpCF,EAAOF,EAAKG,UAAUH,EAAKI,QAAS,KAAQ,EACtBJ,EAAKK,YAAa,MACxC/B,KAACgB,UACGF,KAAO,mBACPW,KAAOA,EACPO,UAAYL,EACZC,KAAOA,GACT7B,gBAmBNkC,YAAc,SAAER,EAAMS,EAAUnC,UAC5BC,KAACgB,UACGF,KAAO,eACPW,KAAOA,EACPlB,KAAO2B,GACTnC,gBAINoC,cAAgB,SAAEV,EAAM1B,UACpBC,KAACgB,UAASF,KAAO,iBAAkBW,KAAOA,GAAM1B,gBAUpDqC,OAAS,SAAErC,GACP,IAAAsC,kCAASC,YACTtC,KAACE,MAAMH,MA5JT,GAgKH,oBAAAwC,SAAA,OAAAA,UAAcA,QAAQ3C,UAAYA","file":"worker.js","sourcesContent":["\n# Background Workers (Class Definition)\n\nThis file defines a class that encapsulates the functionality we need in the\nbackground workers the [LDE](lde.litcoffee) will use.\n * This file is intended to be imported by anyone who wishes to create\n   instance of the `Worker` class.\n * [A separate file](worker-internal.litcoffee) contains the code that will\n   be loaded into the worker's background thread to give it the\n   functionality with which this class interfaces.\n\n## Import modules\n\nImport the `Worker` class if it isn't already defined.  In the browser, it\nshould already be defined.  But in Node.js, we need to import the\n`webworker-threads` package to define it.\n\nAlso, if we're in Node.js, then we assume (for now) that we are being run\nas part of the unit tests of the LDE, from the root of the project\nrepository.  We therefore set a different path to the inner script the\nworkers need to load than we would set in the browser.\n\nLater, we will want to support Node.js-based uses of this module other than\nin the unit testing suite, and this will need to be made more flexible.\n\n    if require? and not Worker?\n        { Worker } = require 'webworker-threads'\n        InnerScriptPath = 'release/worker-internal.js'\n    else\n        InnerScriptPath = 'worker-internal.js'\n\n## Define the `LDEWorker` Class\n\nWe define a class that clients of this module can create and treat as the\nencapsulation of a background thread.  We call it `LDEWorker` because of\ncourse `Worker` is already taken in the browser namespace.\n\n    class LDEWorker\n\nWe need a simple method for associating callbacks with tasks we send to the\nworker, so we have the following functions that assign unique IDs to\ncallbacks when asked, retrieve such callbacks by their ID, and delete them\nwhen we're done with them.\n\n        saveCallback : ( callback ) ->\n            nextFreeId = 0\n            while @callbacks.hasOwnProperty nextFreeId then nextFreeId++\n            @callbacks[nextFreeId] = callback\n            nextFreeId\n        runAndClearCallback : ( data ) ->\n            callback = @callbacks[data.id]\n            delete @callbacks[data.id]\n            delete data.id\n            callback? data\n\nWe leverage the above two routines in the event handler for the internal\n`Worker` object, installed by the following routine.\n\n        setup : ( callback ) ->\n            @worker = new Worker InnerScriptPath\n            @loadedCallback = callback\n\nThis event handler is for all messages coming out of the worker.  We\nguarantee, in the worker's code, that every response message that comes back\nwill contain the same ID that was given in the request for which it is the\nresponse.  This allows us to look up and call the correct callback, then\nuninstall that callback because the task is complete.\n\n            @worker.addEventListener 'message', ( event ) =>\n                if event.data.type is 'loaded'\n                    @loadedCallback?()\n                    delete @loadedCallback\n                else\n                    @runAndClearCallback event.data\n\nThe parameter to the constructor is optional, and if provided, will be\ncalled when the worker has finished loading its internal scripts and is\nready to receive commands.  We leverage the `setup` function defined above\nto do setup of the internal `Worker` object.\n\n        constructor : ( callback ) ->\n            @callbacks = { }\n            @setup callback\n\nClients can tell whether the worker is ready to receive messages with the\nfollowing function.\n\n        isReady : -> not @loadedCallback\n\nThe following function abstracts the idea of sending a message to the worker\nand associating a callback with it.\n\n        dispatch : ( message, callback ) ->\n            message.id = @saveCallback callback\n            @worker.postMessage message\n\n### Running code in a worker\n\nThe chief purpose of background threads is to run code and then notify you\nwhen it's done, and what the result was.  We provide the following API for\ndoing so.  It is essentially a simple `eval` call in the worker, with all\nthe appropriate caveats that come with that.\n\nThe first argument can be a string of code or a JavaScript function.  If it\nis the latter, realize that it will be converted to a string and transferred\ninto the worker before being run, so global variables in it will be\nevaluated in the worker's context.\n\n        run : ( codeOrFunction, callback ) ->\n            if typeof codeOrFunction is 'function'\n                codeOrFunction = \"(#{codeOrFunction})()\"\n            @dispatch type : 'run', code : codeOrFunction, callback\n\n### Support installing scripts\n\n`Worker` instances support installing scripts in the worker.  Simply call\nthe following method and the appropriate message is passed to the worker.\nIt knows how to respond by calling its built-in `importScripts` function.\nThe optional callback is called when the action completes, with an object\ncontaining a few fields describing the action taken.\n\n        installScript : ( filename, callback ) ->\n            @dispatch\n                type : 'install script'\n                filename : filename\n            , callback\n\n### Support installing functions\n\nIf you have your own function in the main thread, and want it installed in a\nworker, you can call this function to put it there.  But remember that it is\ngoing to be copied over based on its syntax, not as a closure.  Any global\nvariables mentioned in the function will have meaning in the worker's\ncontext, not the main thread's.\n\nThe first parameter is the global variable name to use for the function, in\nthe worker's context.  The second parameter should be a function, which will\nbe dissected into its argument list and body on this side, those transmitted\nto the worker, and the function contructor used on that side to reassemble\nit into a function.  This is faster and safer than `eval`.\n\n        installFunction : ( name, func, callback ) ->\n            func = \"#{func}\"\n            args = func.substring func.indexOf( '(' ) + 1,\n                                  func.indexOf( ')' )\n            body = func.substring func.indexOf( '{' ) + 1,\n                                  func.lastIndexOf( '}' )\n            @dispatch\n                type : 'install function'\n                name : name,\n                arguments : args\n                body : body\n            , callback\n\n### Support installing data\n\nNaturally, users of workers will want not only to install functions in the\nworkers, but also sometimes pass nontrivial amounts of data to those\nfunctions.  Rather than pass it as literals inside code passed to the `run`\nfunction, it is better if we have a utility for copying chunks of JSON data\ninto a global variable in the worker.  This is especially useful if the\nworker is to operate on the same data repeatedly, or to modify the data in\nphases.\n\nWe thus provide the following function.  The data you provide must be JSON,\nhence the parameter name.  It will be stored in the global variable\n`globalData` in the worker, under the key you provide.  Essentially, a\n`globalData[yourKey] = yourJSONData` statement will be executed in the\nworker.  You can thus make calls later that look up this stored data using\n`globalData[yourKey]` in the code.\n\n        installData : ( name, jsonData, callback ) ->\n            @dispatch\n                type : 'install data'\n                name : name,\n                data : jsonData\n            , callback\n\nYou can also clear out such stored data using this:\n\n        uninstallData : ( name, callback ) ->\n            @dispatch type : 'uninstall data', name : name, callback\n\n### Support rebooting workers\n\nIf you want to start with a fresh worker (perhaps because you don't want it\nto have any longer some of the scripts you loaded or because it's gone on\ntoo long computing something and you need to terminate it), use this\nfunction.  It terminates the internal Worker object and replaces it with a\nfresh one, calling the callback when this process is complete.\n\n        reboot : ( callback ) ->\n            @worker?.terminate()\n            @setup callback\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.LDEWorker = LDEWorker\n"]}