{"version":3,"sources":["worker.litcoffee"],"names":["InnerScriptPath","LDEWorker","Worker","require","this","worker","filters","addEventListener","_this","event","i","index","len","ref","length","data","splice","postThenWait","message","filter","push","postMessage","installScript","filename","callback","install","done","type","exports"],"mappings":"AAyBI,IAAAA,gBAAAC,UAAAC,OAAG,oBAAAC,SAAA,OAAAA,cAAiB,IAAAD,QAAA,OAAAA,OAIhBF,gBAAkB,sBAHhBE,OAAWC,QAAQ,qBAARD,OACbF,gBAAkB,8BAUhBC,UAAA,WAKY,SAAAA,IACVG,KAACC,OAAS,IAAIH,OAAOF,iBAMrBI,KAACE,WACDF,KAACC,OAAOE,iBAAiB,UAAW,SAAAC,UAAA,SAAEC,GAClC,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAAF,EAAAD,EAAA,EAAAE,GAAAC,EAAAL,EAAAF,SAAAQ,OAAAJ,EAAAE,EAAAD,IAAAD,EACI,YAA0CD,EAAMM,MAAhD,OAAOP,EAACF,QAAQU,OAAOL,EAAO,IAFF,CAAAP,0BAgBxCa,aAAe,SAAEC,EAASC,UACtBf,KAACE,QAAQc,KAAKD,GACdf,KAACC,OAAOgB,YAAYH,gBAUxBI,cAAgB,SAAEC,EAAUC,UACxBpB,KAACa,cAAaQ,QAAUF,GAAU,SAAER,EAAMW,GACtC,GAAgB,cAAbX,EAAKY,MAAwBZ,EAAKQ,WAAYA,8BAC7CC,EAAUT,IACV,OA7CV,GAiDH,oBAAAa,SAAA,OAAAA,UAAcA,QAAQ3B,UAAYA","file":"worker.js","sourcesContent":["\n# Background Workers (Class Definition)\n\nThis file defines a class that encapsulates the functionality we need in the\nbackground workers the [LDE](lde.litcoffee) will use.\n * This file is intended to be imported by anyone who wishes to create\n   instance of the `Worker` class.\n * [A separate file](worker-internal.litcoffee) contains the code that will\n   be loaded into the worker's background thread to give it the\n   functionality with which this class interfaces.\n\n## Import modules\n\nImport the `Worker` class if it isn't already defined.  In the browser, it\nshould already be defined.  But in Node.js, we need to import the\n`webworker-threads` package to define it.\n\nAlso, if we're in Node.js, then we assume (for now) that we are being run\nas part of the unit tests of the LDE, from the root of the project\nrepository.  We therefore set a different path to the inner script the\nworkers need to load than we would set in the browser.\n\nLater, we will want to support Node.js-based uses of this module other than\nin the unit testing suite, and this will need to be made more flexible.\n\n    if require? and not Worker?\n        { Worker } = require 'webworker-threads'\n        InnerScriptPath = 'release/worker-internal.js'\n    else\n        InnerScriptPath = 'worker-internal.js'\n\n## Define the `LDEWorker` Class\n\nWe define a class that clients of this module can create and treat as the\nencapsulation of a background thread.  We call it `LDEWorker` because of\ncourse `Worker` is already taken in the browser namespace.\n\n    class LDEWorker\n\nConstructing one creates an inner instance of a `Worker` to which we will\npass many of the tasks defined below, once it is correctly set up.\n\n        constructor : ->\n            @worker = new Worker InnerScriptPath\n\nWe also build here our own event listening stack, because the one built into\nthe `webworker-threads` module does not yet support removing event\nlisteners.\n\n            @filters = [ ]\n            @worker.addEventListener 'message', ( event ) =>\n                for filter, index in @filters\n                    return @filters.splice index, 1 if filter event.data\n\nWhen we ask the worker to do something, we will want to be able to wait for\na message of a certain type to come back to tell us the job is complete, and\nthen take some action.  This requires installing an event listener to wait\nfor the message, then uninstalling it when the message has been received.\nWe therefore factor this functionality out into a single method here.\n\nCall this message with the `message` you want to send to the worker.  As the\nsecond argument, give a function that will be called on each event coming\nout of the worker and should look for the one response you care about.\nReturn true if you've found it, false if you haven't.  Your filter will be\nuninstalled as soon as it returns true once.\n\n        postThenWait : ( message, filter ) ->\n            @filters.push filter\n            @worker.postMessage message\n\n### Support installing scripts\n\n`Worker` instances support installing scripts in the worker.  Simply call\nthe following method and the appropriate message is passed to the worker.\nIt knows how to respond by calling its built-in `importScripts` function.\nThe optional callback is called when the action completes, with an object\ncontaining a few fields describing the action taken.\n\n        installScript : ( filename, callback ) ->\n            @postThenWait install : filename, ( data, done ) ->\n                if data.type is 'installed' and data.filename is filename\n                    callback? data\n                    yes\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.LDEWorker = LDEWorker\n"]}