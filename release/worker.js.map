{"version":3,"sources":["worker.litcoffee"],"names":["InnerScriptPath","LDEWorker","Worker","require","this","worker","addEventListener","_this","event","runAndClearCallback","data","saveCallback","callback","nextFreeId","callbacks","hasOwnProperty","id","runTaskThenCallback","message","postMessage","installScript","filename","type","exports"],"mappings":"AAyBI,IAAAA,gBAAAC,UAAAC,OAAG,oBAAAC,SAAA,OAAAA,cAAiB,IAAAD,QAAA,OAAAA,OAIhBF,gBAAkB,sBAHhBE,OAAWC,QAAQ,qBAARD,OACbF,gBAAkB,8BAUhBC,UAAA,WAuBY,SAAAA,IACVG,KAACC,OAAS,IAAIH,OAAOF,iBAQrBI,KAACC,OAAOC,iBAAiB,UAAW,SAAAC,UAAA,SAAEC,UAClCD,EAACE,oBAAoBD,EAAME,OADK,CAAAN,0BAzBxCO,aAAe,SAAEC,GACb,IAAAC,EAEA,2BAFAT,KAACU,cACDD,EAAa,EACPT,KAACU,UAAUC,eAAeF,IAAgBA,WAChDT,KAACU,UAAUD,GAAcD,EACzBC,eACJJ,oBAAsB,SAAEC,GACpB,IAAAE,gCAAAR,KAACU,cACDF,EAAWR,KAACU,UAAUJ,EAAKM,WACpBZ,KAACU,UAAUJ,EAAKM,WAChBN,EAAKM,wBACZJ,EAAUF,QAAA,eAoBdO,oBAAsB,SAAEC,EAASN,UAC7BM,EAAQF,GAAKZ,KAACO,aAAaC,GAC3BR,KAACC,OAAOc,YAAYD,gBAUxBE,cAAgB,SAAEC,EAAUT,UACxBR,KAACa,qBACGK,KAAO,UACPD,SAAWA,GACbT,MAtDJ,GA0DH,oBAAAW,SAAA,OAAAA,UAAcA,QAAQtB,UAAYA","file":"worker.js","sourcesContent":["\n# Background Workers (Class Definition)\n\nThis file defines a class that encapsulates the functionality we need in the\nbackground workers the [LDE](lde.litcoffee) will use.\n * This file is intended to be imported by anyone who wishes to create\n   instance of the `Worker` class.\n * [A separate file](worker-internal.litcoffee) contains the code that will\n   be loaded into the worker's background thread to give it the\n   functionality with which this class interfaces.\n\n## Import modules\n\nImport the `Worker` class if it isn't already defined.  In the browser, it\nshould already be defined.  But in Node.js, we need to import the\n`webworker-threads` package to define it.\n\nAlso, if we're in Node.js, then we assume (for now) that we are being run\nas part of the unit tests of the LDE, from the root of the project\nrepository.  We therefore set a different path to the inner script the\nworkers need to load than we would set in the browser.\n\nLater, we will want to support Node.js-based uses of this module other than\nin the unit testing suite, and this will need to be made more flexible.\n\n    if require? and not Worker?\n        { Worker } = require 'webworker-threads'\n        InnerScriptPath = 'release/worker-internal.js'\n    else\n        InnerScriptPath = 'worker-internal.js'\n\n## Define the `LDEWorker` Class\n\nWe define a class that clients of this module can create and treat as the\nencapsulation of a background thread.  We call it `LDEWorker` because of\ncourse `Worker` is already taken in the browser namespace.\n\n    class LDEWorker\n\nWe need a simple method for associating callbacks with tasks we send to the\nworker, so we have the following functions that assign unique IDs to\ncallbacks when asked, retrieve such callbacks by their ID, and delete them\nwhen we're done with them.\n\n        saveCallback : ( callback ) ->\n            @callbacks ?= { }\n            nextFreeId = 0\n            while @callbacks.hasOwnProperty nextFreeId then nextFreeId++\n            @callbacks[nextFreeId] = callback\n            nextFreeId\n        runAndClearCallback : ( data ) ->\n            @callbacks ?= { }\n            callback = @callbacks[data.id]\n            delete @callbacks[data.id]\n            delete data.id\n            callback? data\n\nConstructing one creates an inner instance of a `Worker` to which we will\npass many of the tasks defined below, once it is correctly set up.\n\n        constructor : ->\n            @worker = new Worker InnerScriptPath\n\nWe install an event handler for all messages coming out of the worker.  We\nguarantee, in the worker's code, that every response message that comes back\nwill contain the same ID that was given in the request for which it is the\nresponse.  This allows us to look up and call the correct callback, then\nuninstall that callback because the task is complete.\n\n            @worker.addEventListener 'message', ( event ) =>\n                @runAndClearCallback event.data\n\nThe following function abstracts the idea of sending a message to the worker\nand associating a callback with it.\n\n        runTaskThenCallback : ( message, callback ) ->\n            message.id = @saveCallback callback\n            @worker.postMessage message\n\n### Support installing scripts\n\n`Worker` instances support installing scripts in the worker.  Simply call\nthe following method and the appropriate message is passed to the worker.\nIt knows how to respond by calling its built-in `importScripts` function.\nThe optional callback is called when the action completes, with an object\ncontaining a few fields describing the action taken.\n\n        installScript : ( filename, callback ) ->\n            @runTaskThenCallback\n                type : 'install'\n                filename : filename\n            , callback\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.LDEWorker = LDEWorker\n"]}