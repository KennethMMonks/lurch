{"version":3,"sources":["statement.litcoffee"],"names":["Statement","Structure","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","require","superClass","className","addSubclass","exports"],"mappings":"AAUI,IAAAA,UAAAC,UAAAC,OAAA,SAAAC,EAAAC,GAAA,SAAAC,IAAAC,KAAAC,YAAAJ,EAAA,IAAA,IAAAK,KAAAJ,EAAAK,QAAAC,KAAAN,EAAAI,KAAAL,EAAAK,GAAAJ,EAAAI,IAAA,OAAAH,EAAAM,UAAAP,EAAAO,UAAAR,EAAAQ,UAAA,IAAAN,EAAAF,EAAAS,UAAAR,EAAAO,UAAAR,6BAAG,oBAAAU,SAAA,OAAAA,UAAgBZ,UAAcY,QAAQ,eAARZ,WAI3BD,UAAA,SAAAc,qFAAkBb,uBAOpBc,UAAYd,UAAUe,YAAY,YAAahB,KAP7C,GAaH,oBAAAiB,SAAA,OAAAA,UAAcA,QAAQjB,UAAYA","file":"statement.js","sourcesContent":["\n# Statement Structures\n\nThis file defines a particular subclass of the\n[Structure](structure.litcoffee) class.  It is supposed to model the idea of\na statement in mathematics.  These can be thought of as the claims that the\nmathematician is making in their document.  Some of these may be justified by reasons (and in turn, rules of inference).  Others may simply be asserted or assumed as a hypothetical.\n\nIf we are running in node we need to load the `Structure` class.\n\n    if require? then { Structure } = require './structure'\n\nNow we can extend it to our new class.\n\n    class Statement extends Structure\n\nWe first need to register this subclass with the global list of subclasses\nof the Structure` class (see the discussion regarding [Serialization and\nDeserialization](structure.litcoffee#serialization-and-deserialization) in\nthe `Structure` class documentation.)\n\n        className : Structure.addSubclass 'Statement', Statement\n\nWe will add a validation routine and perhaps other methods here later.\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.Statement = Statement\n"]}