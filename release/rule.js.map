{"version":3,"sources":["rule.litcoffee"],"names":["Rule","Structure","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","require","superClass","className","addSubclass","exports"],"mappings":"AAiBI,IAAAA,KAAAC,UAAAC,OAAA,SAAAC,EAAAC,GAAA,SAAAC,IAAAC,KAAAC,YAAAJ,EAAA,IAAA,IAAAK,KAAAJ,EAAAK,QAAAC,KAAAN,EAAAI,KAAAL,EAAAK,GAAAJ,EAAAI,IAAA,OAAAH,EAAAM,UAAAP,EAAAO,UAAAR,EAAAQ,UAAA,IAAAN,EAAAF,EAAAS,UAAAR,EAAAO,UAAAR,6BAAG,oBAAAU,SAAA,OAAAA,UAAgBZ,UAAcY,QAAQ,eAARZ,WAI3BD,KAAA,SAAAc,qFAAab,uBAOfc,UAAYd,UAAUe,YAAY,OAAQhB,KAPxC,GAaH,oBAAAiB,SAAA,OAAAA,UAAcA,QAAQjB,KAAOA","file":"rule.js","sourcesContent":["\n# Rule Structures\n\nThis file defines a particular subclass of the\n[Structure](structure.litcoffee) class.  It is supposed to model the idea of\na rule of inference in mathematics. Note that in mathematics a definition,\naxiom, or theorem are frequently used as rules of inference to justify\nstatements in a proof, and as such, can be thought of in some cases as\nspecial kinds of rules.  Thus eventually we may have synonyms for this\nsubclass in either the code or user interface or both where we refer to it\nas a definition, theorem, axiom, lemma, etc.  But the thing that all of\nthese rules have in common is that they may take, as inputs, certain\nStructure and other inputs and use them to justify a statement or statements\nas outputs.  That is the kind of rule this subclass is modeling.\n\nIf we are running in node we need to load the `Structure` class.\n\n    if require? then { Structure } = require './structure'\n\nNow we can extend it to our new class.\n\n    class Rule extends Structure\n\nWe first need to register this subclass with the global list of subclasses\nof the Structure` class (see the discussion regarding [Serialization and\nDeserialization](structure.litcoffee#serialization-and-deserialization) in\nthe `Structure` class documentation.)\n\n        className : Structure.addSubclass 'Rule', Rule\n\nWe will add a validation routine and lots of other methods here later.\n\nNow if this is being used in a Node.js context, export the class we defined.\n\n    if exports? then exports.Rule = Rule\n"]}