{"version":3,"sources":["worker-internal.litcoffee"],"names":["hasProp","hasOwnProperty","self","addEventListener","event","error","fail","finish","request","succeed","data","info","key","response","value","id","postMessage","success","type","importScripts","filename","error1","message"],"mappings":"AAeI,IAAAA,WAAAC,eAAAC,KAAKC,iBAAiB,UAAW,SAAEC,GAC/B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA6BA,GA7BAD,EAAUJ,EAAMM,KAahBH,EAAS,SAAEI,GACP,IAAAC,EAAAC,EAAAC,YADOH,MACPE,GAAWE,GAAKP,EAAQO,IACxB,IAAAH,KAAAD,6BAAAE,EAASD,GAAOE,UAChBZ,KAAKc,YAAYH,IACrBJ,EAAU,SAAEE,oBAAAA,MACRA,EAAKM,SAAU,EACfV,EAAOI,IACXL,EAAO,SAAED,EAAOM,oBAAAA,MACZA,EAAKN,MAAQA,EACbE,EAAOI,IAOQ,YAAhBH,EAAQU,KACP,WACIC,cAAcX,EAAQY,UACtBX,IAFJ,MAAAY,UAGMhB,EAAAgB,EACFf,EAAKD,EAAMiB","file":"worker-internal.js","sourcesContent":["\n# Background Workers (Internal Functions)\n\nThis file defines the functions that support the functionality we need in\nthe background workers the [LDE](lde.litcoffee) will use.\n * This file contains the code that will be loaded into the worker's\n   background thread.  Thus here we define all the things that the workers\n   can actually do.\n * [A separate file](worker.litcoffee) is intended to be imported by anyone\n   who wishes to create instance of the `Worker` class; it interfaces with\n   this one across the thread boundary, through message passing.\n\nWe install a global event listener that watches for several different types\nof events that might come in, and responds to each separately.\n\n    self.addEventListener 'message', ( event ) ->\n        request = event.data\n\nWe also install some convenience functions for sending responses back to our\nclient in a uniform way.  The `succeed` function sends a success message and\nthe `fail` function sends a failure message.  Optional additional parameters\ncan be passed as an object and all their members will be copied into the\nmessage sent back to the client.\n\nBy default, the message sent to the client contains only the same `id` as\nthe event to which we're responding, so that the client can match up\nrequests and responses correctly.  Some additional data is typically\nrequired, depending on the request made.\n\n        finish = ( info = { } ) ->\n            response = id : request.id\n            response[key] = value for own key, value of info\n            self.postMessage response\n        succeed = ( info = { } ) ->\n            info.success = yes\n            finish info\n        fail = ( error, info = { } ) ->\n            info.error = error\n            finish info\n\n## Support installing scripts\n\nIf we receive a message asking us to install a script, we obey it, then call\na callback saying that we did so.\n\n        if request.type is 'install'\n            try\n                importScripts request.filename\n                succeed()\n            catch error\n                fail error.message\n"]}