{"version":3,"sources":["worker-internal.litcoffee"],"names":["self","addEventListener","event","e","result","data","hasOwnProperty","type","filename","install","importScripts","success","error","postMessage"],"mappings":"AAeIA,KAAKC,iBAAiB,UAAW,SAAEC,GAO/B,IAAAC,EAAAC,EAAA,GAAGF,EAAMG,KAAKC,eAAe,WAA7B,CACIF,GACIG,KAAO,YACPC,SAAWN,EAAMG,KAAKI,SAC1B,IACIC,cAAcR,EAAMG,KAAKI,SACzBL,EAAOO,SAAU,EAFrB,MAAAC,GAGMT,EAAAS,EACFR,EAAOQ,MAAQT,SACnBH,KAAKa,YAAYT","file":"worker-internal.js","sourcesContent":["\n# Background Workers (Internal Functions)\n\nThis file defines the functions that support the functionality we need in\nthe background workers the [LDE](lde.litcoffee) will use.\n * This file contains the code that will be loaded into the worker's\n   background thread.  Thus here we define all the things that the workers\n   can actually do.\n * [A separate file](worker.litcoffee) is intended to be imported by anyone\n   who wishes to create instance of the `Worker` class; it interfaces with\n   this one across the thread boundary, through message passing.\n\nWe install a global event listener that watches for several different types\nof events that might come in, and responds to each separately.\n\n    self.addEventListener 'message', ( event ) ->\n\n## Support installing scripts\n\nIf we receive a message asking us to install a script, we obey it, then call\na callback saying that we did so.\n\n        if event.data.hasOwnProperty 'install'\n            result =\n                type : 'installed'\n                filename : event.data.install\n            try\n                importScripts event.data.install\n                result.success = yes\n            catch e\n                result.error = e\n            self.postMessage result\n"]}