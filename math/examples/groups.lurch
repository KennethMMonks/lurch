
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                <script language="javascript">
                    const link = document.querySelector( '#loadlink > p > a' )
                    const thisURL = encodeURIComponent( window.location.href )
                    link?.setAttribute( 'href', 'http://localhost:2999/instructor.html?load=' + thisURL )
                </script>
            </div>
        
            <div id="metadata" style="display: none;"></div>
            <div id="document"><h1>Groups</h1>
<p>Let's <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;declare e,*&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">declare </span><span class="ML__mathit">e</span><span class="ML__text"> and </span><span class="ML__cmr">&sdot;</span></span></span></span></span> to be constants.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Definition of Group:</strong>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If [G,star] is group&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8777699999999999em;"><span class="ML__small-delim ML__open">⟨</span><span class="ML__mathit">G</span><span class="ML__cmr">,</span><span class="ML__cmr">⋆</span><span class="ML__small-delim ML__close">⟩</span></span><span class="ML__text"> is group</span></span></span></span></span> then</p>
<ol>
<li><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(a star b) star c = a star (b star c)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">a</span><span class="ML__cmr">⋆</span><span class="ML__mathit">b</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⋆</span><span class="ML__mathit">c</span><span class="ML__cmr">=</span><span class="ML__mathit">a</span><span class="ML__cmr">⋆</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">b</span><span class="ML__cmr">⋆</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></li>
<li><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;a star (e_(G)) = a&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">a</span><span class="ML__cmr">⋆</span><span class="ML__mathit">e</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.33em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.48em; display: inline-block; font-size: 70%;"><span class="ML__mathit">G</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cmr">=</span><span class="ML__mathit">a</span></span></span></span></span> and <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;e_(G) star a = a&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">e</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.33em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.48em; display: inline-block; font-size: 70%;"><span class="ML__mathit">G</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cmr">⋆</span><span class="ML__mathit">a</span><span class="ML__cmr">=</span><span class="ML__mathit">a</span></span></span></span></span></li>
<li><span class="lurch-atom" title="But you have already used b." contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot; b*a=(e_(G)), a*b=e_(G)  for some b&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">b</span><span class="ML__cmr">&sdot;</span><span class="ML__mathit">a</span><span class="ML__cmr">=</span><span class="ML__mathit">e</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.33em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.48em; display: inline-block; font-size: 70%;"><span class="ML__mathit">G</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cmr">,</span><span class="ML__mathit">a</span><span class="ML__cmr">&sdot;</span><span class="ML__mathit">b</span><span class="ML__cmr">=</span><span class="ML__mathit">e</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.33em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.48em; display: inline-block; font-size: 70%;"><span class="ML__mathit">G</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__text"> for some </span><span class="ML__mathit">b</span></span></span></span><span class="lurch-atom-suffix"><span class="feedback-marker-invalid">&nbsp;</span></span></span></li>
</ol>
</div>
<p>TODO: Notational roadblock.</p>
<ul>
<li>add 'is a'</li>
<li>It won't parse 'If [H,<em>] is group' because </em>&nbsp;is an infix operator</li>
</ul></div>
        