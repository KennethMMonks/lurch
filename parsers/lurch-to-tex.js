// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/



  // remove empty arrays from a nested array
  const clean = A => { 
    return A.map( c => { 
      return (Array.isArray(c) && c.length) ? clean(c) : c 
      } ).filter( e => !(Array.isArray(e) && e.length===0) )
  }
  
  // replace the commas in a sequence with spaces
  const spaced = s => s.replace(/,/g, ' ') 

  // tex utilities
  const texUnary = (op,arg) => {
    return (op) ? `${op} ${arg}` : arg
  }

  const texJoin = (op,args) => {
    if (args.length===1) return args.join(op)
    return args.map(x=>` ${x}`).join(op)
  }

  const texRightAssoc = (op,args) => {
    return args.reverse().slice(1).reduce(
      (ans,x)=>{ return `${x}${op}{${ans}}`},args[0])
  }

// convert signed sums to lisp
  const texSum = (first,rest) => {
    let ans = `${first}`
    rest.forEach( term => {
      ans = ans + ( (term[0]==='-') ? `-${term[1]}` : `+${term[1]}` )
    })
    return ans
  }

  // default: convert optional associative binary operator to lisp
  const lisp = (op,args) => {
    // if there's only one arg, return it, otherwise apply the op
    return (args.length>1) ? `(${op} ${args.join(' ')})` : args[0]
  }

  // convert optional unary operator to lisp
  const lispUnary = (op,arg) => {
    return (op) ? `(${op} ${arg})` : arg
  }

  // convert mandatory binary operator to lisp
  const lispBinary = (op,a,b) => {
    return `(${op} ${a} ${b})`
  }

  // convert prefix function application to lisp
  const lispPrefix = (op,args) => {
    if (!Array.isArray(args)) { return `(${op} ${args})` }
    else if (!args.every(Array.isArray)) { 
      return `(${op} ${args.join(' ')})` 
    } else {
      return args.reduce( (ans,group) => { 
        return (group.length) ? `(${ans} ${group.join(' ')})` : `(${ans})`  
      } , op )
    }
  }

  // convert signed sums to lisp
  const lispSum = (first,rest) => {
    let ans = `(+ ${first}`
    rest.forEach( term => {
      ans = ans + ( (term[0]==='-') ? ` (- ${term[1]})` : ` ${term[1]}` )
    })
    return ans + ')'
  }

  // for debugging, shorthand for console.log
  const say = s => {
    const lines = s.split('\n')
    const lineNumberWidth = String(lines.length).length
    lines.forEach( (line, index) => {
      const lineNumber = String(index + 1).padStart(lineNumberWidth, ' ')
      console.log(`${lineNumber}: ${line}`)
    })
  }


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { LCs: peg$parseLCs };
  var peg$startRuleFunction = peg$parseLCs;

  var peg$c0 = ":";
  var peg$c1 = "assume";
  var peg$c2 = "{";
  var peg$c3 = "}";
  var peg$c4 = "\xAB";
  var peg$c5 = "\xBB";
  var peg$c6 = "comment";
  var peg$c7 = "\u27A4";
  var peg$c8 = "\"";
  var peg$c9 = "since";
  var peg$c10 = "because";
  var peg$c11 = "recall";
  var peg$c12 = "rules";
  var peg$c13 = "axioms";
  var peg$c14 = "givens";
  var peg$c15 = "definitions";
  var peg$c16 = "rule";
  var peg$c17 = "axiom";
  var peg$c18 = "given";
  var peg$c19 = "definition";
  var peg$c20 = "theorem";
  var peg$c21 = "thm";
  var peg$c22 = "lemma";
  var peg$c23 = "corollary";
  var peg$c24 = "proof";
  var peg$c25 = "declare ";
  var peg$c26 = "for";
  var peg$c27 = "some";
  var peg$c28 = "let";
  var peg$c29 = "be";
  var peg$c30 = "such";
  var peg$c31 = "that";
  var peg$c32 = "\u21A6";
  var peg$c33 = "contradiction";
  var peg$c34 = "\u21D4";
  var peg$c35 = " iff ";
  var peg$c36 = "\u21D2";
  var peg$c37 = " implies ";
  var peg$c38 = " or ";
  var peg$c39 = "\u2228";
  var peg$c40 = " and ";
  var peg$c41 = "\u2227";
  var peg$c42 = "\xAC";
  var peg$c43 = "not ";
  var peg$c44 = "\u2192";
  var peg$c45 = " is a partition of ";
  var peg$c46 = "\u2248";
  var peg$c47 = " mod ";
  var peg$c48 = "\u2286";
  var peg$c49 = " subset ";
  var peg$c50 = " subseteq ";
  var peg$c51 = " notin ";
  var peg$c52 = "\u2208";
  var peg$c53 = " in ";
  var peg$c54 = "|";
  var peg$c55 = " divides ";
  var peg$c56 = "\u2264";
  var peg$c57 = " leq ";
  var peg$c58 = "<";
  var peg$c59 = " lt ";
  var peg$c60 = " neq ";
  var peg$c61 = " ne ";
  var peg$c62 = "~";
  var peg$c63 = "=";
  var peg$c64 = " loves ";
  var peg$c65 = " is an ";
  var peg$c66 = " is a ";
  var peg$c67 = " is ";
  var peg$c68 = "\u2218";
  var peg$c69 = " circ ";
  var peg$c70 = "\xD7";
  var peg$c71 = " times ";
  var peg$c72 = "\u222A";
  var peg$c73 = " cup ";
  var peg$c74 = " union ";
  var peg$c75 = "\u2229";
  var peg$c76 = " cap ";
  var peg$c77 = " intersect ";
  var peg$c78 = "\u2216";
  var peg$c79 = " setminus ";
  var peg$c80 = "\xB0";
  var peg$c81 = " complement";
  var peg$c82 = "\u22C5";
  var peg$c83 = " cdot ";
  var peg$c84 = "\u207B";
  var peg$c85 = " recip";
  var peg$c86 = " inv";
  var peg$c87 = "\uFF01";
  var peg$c88 = " factorial";
  var peg$c89 = "/";
  var peg$c90 = "-";
  var peg$c91 = "^";
  var peg$c92 = ". inv";
  var peg$c93 = "(";
  var peg$c94 = ")";
  var peg$c95 = "\u03BB";
  var peg$c96 = "[";
  var peg$c97 = "]";
  var peg$c98 = "\u27E8";
  var peg$c99 = "\u27E9";
  var peg$c100 = ".";
  var peg$c101 = "0";
  var peg$c102 = "\u2261";
  var peg$c103 = "\u2192\u2190";
  var peg$c104 = "\u2203!";
  var peg$c105 = "exists unique ";
  var peg$c106 = "\u2200";
  var peg$c107 = "forall ";
  var peg$c108 = "for all ";
  var peg$c109 = "\u2203";
  var peg$c110 = "exists ";
  var peg$c111 = ",";
  var peg$c112 = "maps ";
  var peg$c113 = " contradiction ";

  var peg$r0 = /^[^\xBB]/;
  var peg$r1 = /^[^"]/;
  var peg$r2 = /^[^\n]/;
  var peg$r3 = /^[\-+]/;
  var peg$r4 = /^[0-9]/;
  var peg$r5 = /^[1-9]/;
  var peg$r6 = /^[^\-\][()\u27E8\u27E9 \t\n\u2726{},.:+\u22C5\/\^=<\u2264\xAC\u2192\u2190\u21D2\u21D4|\u2200\u2203\u2229\u222A\xD7\u2208\u2286\u2216\u207B\xB0\u2218\u2227\u2228\u2261\u21A6~\u2248\uFF01]/;
  var peg$r7 = /^[ \t\n\r]/;
  var peg$r8 = /^[:+\u22C5\/\^=<\u2264\xAC\u2192\u2190\u21D2\u21D4|\u2200\u2203\u2229\u222A\xD7\u2208\u2286\u2216\u207B\xB0\u2218\u2227\u2228\u2261\u03C3\u03BB\u21A6~\u2248\uFF01]/;

  var peg$e0 = peg$otherExpectation("LC");
  var peg$e1 = peg$otherExpectation("Given");
  var peg$e2 = peg$literalExpectation(":", false);
  var peg$e3 = peg$literalExpectation("Assume", true);
  var peg$e4 = peg$otherExpectation("Environment");
  var peg$e5 = peg$literalExpectation("{", false);
  var peg$e6 = peg$literalExpectation("}", false);
  var peg$e7 = peg$literalExpectation("\xAB", false);
  var peg$e8 = peg$classExpectation(["\xBB"], true, false);
  var peg$e9 = peg$literalExpectation("\xBB", false);
  var peg$e10 = peg$otherExpectation("Comment");
  var peg$e11 = peg$literalExpectation("Comment", true);
  var peg$e12 = peg$literalExpectation("\u27A4", false);
  var peg$e13 = peg$literalExpectation("\"", false);
  var peg$e14 = peg$classExpectation(["\""], true, false);
  var peg$e15 = peg$literalExpectation("since", true);
  var peg$e16 = peg$literalExpectation("because", true);
  var peg$e17 = peg$literalExpectation("Recall", true);
  var peg$e18 = peg$literalExpectation("Rules", true);
  var peg$e19 = peg$literalExpectation("Axioms", true);
  var peg$e20 = peg$literalExpectation("Givens", true);
  var peg$e21 = peg$literalExpectation("Definitions", true);
  var peg$e22 = peg$literalExpectation("Rule", true);
  var peg$e23 = peg$literalExpectation("Axiom", true);
  var peg$e24 = peg$literalExpectation("Given", true);
  var peg$e25 = peg$literalExpectation("Definition", true);
  var peg$e26 = peg$literalExpectation("Theorem", true);
  var peg$e27 = peg$literalExpectation("Thm", true);
  var peg$e28 = peg$literalExpectation("Lemma", true);
  var peg$e29 = peg$literalExpectation("Corollary", true);
  var peg$e30 = peg$literalExpectation("Proof", true);
  var peg$e31 = peg$otherExpectation("Declaration");
  var peg$e32 = peg$literalExpectation("Declare ", true);
  var peg$e33 = peg$classExpectation(["\n"], true, false);
  var peg$e34 = peg$literalExpectation("for", true);
  var peg$e35 = peg$literalExpectation("some", true);
  var peg$e36 = peg$literalExpectation("Let", true);
  var peg$e37 = peg$literalExpectation("be", true);
  var peg$e38 = peg$literalExpectation("such", true);
  var peg$e39 = peg$literalExpectation("that", true);
  var peg$e40 = peg$otherExpectation("Expression");
  var peg$e41 = peg$literalExpectation("\u21A6", false);
  var peg$e42 = peg$literalExpectation("contradiction", false);
  var peg$e43 = peg$literalExpectation("\u21D4", false);
  var peg$e44 = peg$literalExpectation(" iff ", false);
  var peg$e45 = peg$literalExpectation("\u21D2", false);
  var peg$e46 = peg$literalExpectation(" implies ", false);
  var peg$e47 = peg$literalExpectation(" or ", false);
  var peg$e48 = peg$literalExpectation("\u2228", false);
  var peg$e49 = peg$literalExpectation(" and ", false);
  var peg$e50 = peg$literalExpectation("\u2227", false);
  var peg$e51 = peg$literalExpectation("\xAC", false);
  var peg$e52 = peg$literalExpectation("not ", false);
  var peg$e53 = peg$literalExpectation("\u2192", false);
  var peg$e54 = peg$literalExpectation(" is a partition of ", true);
  var peg$e55 = peg$literalExpectation("\u2248", false);
  var peg$e56 = peg$literalExpectation(" mod ", true);
  var peg$e57 = peg$literalExpectation("\u2286", false);
  var peg$e58 = peg$literalExpectation(" subset ", false);
  var peg$e59 = peg$literalExpectation(" subseteq ", false);
  var peg$e60 = peg$literalExpectation(" notin ", false);
  var peg$e61 = peg$literalExpectation("\u2208", false);
  var peg$e62 = peg$literalExpectation(" in ", false);
  var peg$e63 = peg$literalExpectation("|", false);
  var peg$e64 = peg$literalExpectation(" divides ", false);
  var peg$e65 = peg$literalExpectation("\u2264", false);
  var peg$e66 = peg$literalExpectation(" leq ", false);
  var peg$e67 = peg$literalExpectation("<", false);
  var peg$e68 = peg$literalExpectation(" lt ", false);
  var peg$e69 = peg$literalExpectation(" neq ", false);
  var peg$e70 = peg$literalExpectation(" ne ", false);
  var peg$e71 = peg$literalExpectation("~", false);
  var peg$e72 = peg$literalExpectation("=", false);
  var peg$e73 = peg$literalExpectation(" loves ", false);
  var peg$e74 = peg$literalExpectation(" is an ", false);
  var peg$e75 = peg$literalExpectation(" is a ", false);
  var peg$e76 = peg$literalExpectation(" is ", false);
  var peg$e77 = peg$literalExpectation("\u2218", false);
  var peg$e78 = peg$literalExpectation(" circ ", false);
  var peg$e79 = peg$literalExpectation("\xD7", false);
  var peg$e80 = peg$literalExpectation(" times ", false);
  var peg$e81 = peg$literalExpectation("\u222A", false);
  var peg$e82 = peg$literalExpectation(" cup ", false);
  var peg$e83 = peg$literalExpectation(" union ", false);
  var peg$e84 = peg$literalExpectation("\u2229", false);
  var peg$e85 = peg$literalExpectation(" cap ", false);
  var peg$e86 = peg$literalExpectation(" intersect ", false);
  var peg$e87 = peg$literalExpectation("\u2216", false);
  var peg$e88 = peg$literalExpectation(" setminus ", false);
  var peg$e89 = peg$literalExpectation("\xB0", false);
  var peg$e90 = peg$literalExpectation(" complement", false);
  var peg$e91 = peg$classExpectation(["-", "+"], false, false);
  var peg$e92 = peg$literalExpectation("\u22C5", false);
  var peg$e93 = peg$literalExpectation(" cdot ", false);
  var peg$e94 = peg$literalExpectation("\u207B", false);
  var peg$e95 = peg$literalExpectation(" recip", false);
  var peg$e96 = peg$literalExpectation(" inv", false);
  var peg$e97 = peg$literalExpectation("\uFF01", false);
  var peg$e98 = peg$literalExpectation(" factorial", false);
  var peg$e99 = peg$literalExpectation("/", false);
  var peg$e100 = peg$literalExpectation("-", false);
  var peg$e101 = peg$literalExpectation("^", false);
  var peg$e102 = peg$literalExpectation(". inv", false);
  var peg$e103 = peg$literalExpectation("(", false);
  var peg$e104 = peg$literalExpectation(")", false);
  var peg$e105 = peg$literalExpectation("\u03BB", false);
  var peg$e106 = peg$literalExpectation("[", false);
  var peg$e107 = peg$literalExpectation("]", false);
  var peg$e108 = peg$literalExpectation("\u27E8", false);
  var peg$e109 = peg$literalExpectation("\u27E9", false);
  var peg$e110 = peg$literalExpectation(".", false);
  var peg$e111 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e112 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e113 = peg$literalExpectation("0", false);
  var peg$e114 = peg$otherExpectation("Symbol");
  var peg$e115 = peg$literalExpectation("\u2261", false);
  var peg$e116 = peg$literalExpectation("\u2192\u2190", false);
  var peg$e117 = peg$classExpectation(["-", "]", "[", "(", ")", "\u27E8", "\u27E9", " ", "\t", "\n", "\u2726", "{", "}", ",", ".", ":", "+", "\u22C5", "/", "^", "=", "<", "\u2264", "\xAC", "\u2192", "\u2190", "\u21D2", "\u21D4", "|", "\u2200", "\u2203", "\u2229", "\u222A", "\xD7", "\u2208", "\u2286", "\u2216", "\u207B", "\xB0", "\u2218", "\u2227", "\u2228", "\u2261", "\u21A6", "~", "\u2248", "\uFF01"], true, false);
  var peg$e118 = peg$literalExpectation("\u2203!", false);
  var peg$e119 = peg$literalExpectation("exists unique ", false);
  var peg$e120 = peg$literalExpectation("\u2200", false);
  var peg$e121 = peg$literalExpectation("forall ", false);
  var peg$e122 = peg$literalExpectation("for all ", false);
  var peg$e123 = peg$literalExpectation("\u2203", false);
  var peg$e124 = peg$literalExpectation("exists ", false);
  var peg$e125 = peg$literalExpectation(",", false);
  var peg$e126 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e127 = peg$classExpectation([":", "+", "\u22C5", "/", "^", "=", "<", "\u2264", "\xAC", "\u2192", "\u2190", "\u21D2", "\u21D4", "|", "\u2200", "\u2203", "\u2229", "\u222A", "\xD7", "\u2208", "\u2286", "\u2216", "\u207B", "\xB0", "\u2218", "\u2227", "\u2228", "\u2261", "\u03C3", "\u03BB", "\u21A6", "~", "\u2248", "\uFF01"], false, false);
  var peg$e128 = peg$literalExpectation("maps ", false);
  var peg$e129 = peg$literalExpectation(" contradiction ", false);

  var peg$f0 = function(a) { return a.join(' ') };
  var peg$f1 = function(a) { return '\\text{Assume }'+a };
  var peg$f2 = function(a) { return `\\{ ${a.join(' ')} \\}` };
  var peg$f3 = function(a) { return `(➤ ${a})` };
  var peg$f4 = function() { return '\\text{Recall }' };
  var peg$f5 = function() { return '\\text{Rules:}' };
  var peg$f6 = function() { return '\\text{Rule}' };
  var peg$f7 = function() { return '\\text{Theorem}' };
  var peg$f8 = function() { return '\\text{Proof:}' };
  var peg$f9 = function(a) { 
  console.log(`Found Declare ${a}`)
  return `\\text{Declare ${a.join(' ')}}` };
  var peg$f10 = function(body, a) { return `${body}\\text{ for some }${a}` };
  var peg$f11 = function(a, b) { return `\\text{Let }${a}\\text{ be such that }${b}` };
  var peg$f12 = function(a) { return `\\text{Let }${a}` };
  var peg$f13 = function(a, b) { return `\\left(${a} ${b}\\right)` };
  var peg$f14 = function(a, b) { return `${a}, ${b}` };
  var peg$f15 = function(a) { return '\\rightarrow\\leftarrow' };
  var peg$f16 = function(a) { return texJoin('\\Leftrightarrow',a) };
  var peg$f17 = function(a) { return texJoin('\\Rightarrow',a) };
  var peg$f18 = function(a) { return texJoin('\\text{ or }',a) };
  var peg$f19 = function(a) { return texJoin('\\text{ and }',a) };
  var peg$f20 = function(a, b) { return (a==='not ' || a==='¬')
                                                        ? texUnary('\\neg',b)
                                                        : b
                                              };
  var peg$f21 = function(a, b, c) { return `${a}\\colon ${b}\\to ${c}` };
  var peg$f22 = function(a, b) { return texJoin('\\text{ is a partition of }',[a,b]) };
  var peg$f23 = function(a, b, c) { return `${a}\\underset{${c}}{\\equiv}${b}` };
  var peg$f24 = function(a) { return texJoin('\\subseteq',a) };
  var peg$f25 = function(a, b) { return texJoin('\\notin',
                                                                       [a,b])        };
  var peg$f26 = function(a, b) { return texJoin('\\in',[a,b]) };
  var peg$f27 = function(a, b) { return texJoin('\\mid',[a,b]) };
  var peg$f28 = function(a) { return texJoin('\\leq',a) };
  var peg$f29 = function(a) { return texJoin('<',a) };
  var peg$f30 = function(a, b) { return texJoin('\\neq',[a,b]) };
  var peg$f31 = function(a) { return texJoin('\\sim',a) };
  var peg$f32 = function(a) { return texJoin('=',a) };
  var peg$f33 = function(a) { return texJoin('\\text{ loves }',a) };
  var peg$f34 = function(a) { return texJoin('\\text{ is }',a) };
  var peg$f35 = function(a) { return texJoin('\\circ',a) };
  var peg$f36 = function(a) { return texJoin('\\times',a) };
  var peg$f37 = function(a) { return texJoin('\\cup',a) };
  var peg$f38 = function(a) { return texJoin('\\cap',a) };
  var peg$f39 = function(a) { return texJoin('\\setminus',a) };
  var peg$f40 = function(a) { return `${a}^\\circ` };
  var peg$f41 = function(a, b) { return texSum(a,b)   };
  var peg$f42 = function(a) { return texJoin('',a) };
  var peg$f43 = function(a) { return `${a}^-`      };
  var peg$f44 = function(a) { return `${a}!`       };
  var peg$f45 = function(a, b) { return texUnary(a,b) };
  var peg$f46 = function(a, b) { return texUnary(a,b) };
  var peg$f47 = function(a) { return texRightAssoc('^',a) };
  var peg$f48 = function(a, b) { if (Array.isArray(a)) return `${a[0]}^-\\left(${b}\\right)` 
    return `${a}\\left(${b}\\right)` 
  };
  var peg$f49 = function(a, b) { return `\\lambda{${a}}(${b})` };
  var peg$f50 = function(b) { 
  // if the optional relation is missing from an equivalence class, don't print it
  if (b.length===1 && b[0].length===1) {
    return `\\left[${b[0]}\\right]` 
  } else {
    return `\\left[${b[0]}\\right]_{${b[1]}}` 
  }
};
  var peg$f51 = function(b) { return `\\langle{${b}}\\rangle` };
  var peg$f52 = function(a) { return `\\left(${a}\\right)` };
  var peg$f53 = function(a) { return a.join(',') };
  var peg$f54 = function(a) { let b =  Array.isArray(a) ? a[1].join('') : a
    return (b.length>1) ? `\\text{${b}}` : b };
  var peg$f55 = function() { return '\\exists!' };
  var peg$f56 = function() { return '\\forall' };
  var peg$f57 = function() { return '\\exists' };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$resultsCache = {};

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseLCs() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 0;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parseLC();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s4 = peg$parseLC();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    s3 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f0(s2);

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLC() {
    var s0, s1;

    var key = peg$currPos * 84 + 1;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseMeta();
    if (s1 === peg$FAILED) {
      s1 = peg$parseContradiction();
      if (s1 === peg$FAILED) {
        s1 = peg$parseGiven();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDeclaration();
          if (s1 === peg$FAILED) {
            s1 = peg$parseEnvironment();
            if (s1 === peg$FAILED) {
              s1 = peg$parseExpression();
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseGiven() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 2;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEnvironment();
      if (s2 === peg$FAILED) {
        s2 = peg$parseExpression();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEnvironment() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 84 + 3;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseMeta();
      if (s4 === peg$FAILED) {
        s4 = peg$parseDeclaration();
        if (s4 === peg$FAILED) {
          s4 = peg$parseGiven();
          if (s4 === peg$FAILED) {
            s4 = peg$parseEnvironment();
            if (s4 === peg$FAILED) {
              s4 = peg$parseExpression();
            }
          }
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s5 = peg$parseMeta();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDeclaration();
            if (s5 === peg$FAILED) {
              s5 = peg$parseGiven();
              if (s5 === peg$FAILED) {
                s5 = peg$parseEnvironment();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseExpression();
                }
              }
            }
          }
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c3;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMeta() {
    var s0;

    var key = peg$currPos * 84 + 4;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsePutdown();
    if (s0 === peg$FAILED) {
      s0 = peg$parseComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parseShorthand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseStringLiteral();
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePutdown() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 5;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 171) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 187) {
        s3 = peg$c5;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s3 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 6;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c6) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10148) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseStringLiteral();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStringLiteral() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 7;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c8;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c8;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseShorthand() {
    var s0;

    var key = peg$currPos * 84 + 8;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseBIH();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRuleset();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRule();
        if (s0 === peg$FAILED) {
          s0 = peg$parseThm();
          if (s0 === peg$FAILED) {
            s0 = peg$parseProof();
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBIHLabel() {
    var s0;

    var key = peg$currPos * 84 + 9;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c9) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c10) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBIH() {
    var s0, s1;

    var key = peg$currPos * 84 + 10;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBIHLabel();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRulesetLabel() {
    var s0;

    var key = peg$currPos * 84 + 11;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c12) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c13) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c14) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c15) {
            s0 = input.substr(peg$currPos, 11);
            peg$currPos += 11;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRuleset() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 12;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseRulesetLabel();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f5();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRuleLabel() {
    var s0;

    var key = peg$currPos * 84 + 13;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c16) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c17) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c18) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c19) {
            s0 = input.substr(peg$currPos, 10);
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRule() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 14;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseRuleLabel();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f6();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseThmLabel() {
    var s0;

    var key = peg$currPos * 84 + 15;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c20) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c21) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c22) {
          s0 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c23) {
            s0 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseThm() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 16;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseThmLabel();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f7();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseProofLabel() {
    var s0;

    var key = peg$currPos * 84 + 17;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c24) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseProof() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 18;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseProofLabel();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f8();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDeclaration() {
    var s0, s1;

    var key = peg$currPos * 84 + 19;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parseForSome();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLet();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDeclareSeq();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDeclareSeq() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 84 + 20;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c25) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseForSome() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 84 + 21;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c26) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c27) {
              s5 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e35); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseSymbolSeq();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f10(s1, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLet() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var key = peg$currPos * 84 + 22;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c28) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSymbolSeq();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c29) {
              s6 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c30) {
              s6 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c31) {
                  s8 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e39); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseExpression();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f11(s3, s10);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c28) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSymbolSeq();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f12(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1;

    var key = peg$currPos * 84 + 23;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parseQuantified();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBinding();
      if (s0 === peg$FAILED) {
        s0 = peg$parseProp();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEFA();
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseQuantified() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 24;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBindingSymbol();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBinding();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBinding() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 25;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSymbol();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseperiod();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8614) {
          s2 = peg$c32;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parseBinding();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseProp() {
    var s0;

    var key = peg$currPos * 84 + 26;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseIff();
    if (s0 === peg$FAILED) {
      s0 = peg$parseImplies();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAnd();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOr();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNot();
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseContradiction() {
    var s0, s1;

    var key = peg$currPos * 84 + 27;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIff() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 28;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseImplies();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8660) {
        s4 = peg$c34;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c35) {
          s4 = peg$c35;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseImplies();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseImplies() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 29;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseOr();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8658) {
        s4 = peg$c36;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c37) {
          s4 = peg$c37;
          peg$currPos += 9;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseOr();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseOr() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 30;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseAnd();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c38) {
        s4 = peg$c38;
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s4 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8744) {
          s4 = peg$c39;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseAnd();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAnd() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 31;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseNot();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c40) {
        s4 = peg$c40;
        peg$currPos += 5;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s4 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8743) {
          s4 = peg$c41;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseNot();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNot() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 32;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 172) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c43) {
        s1 = peg$c43;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseStuff();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f20(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStuff() {
    var s0;

    var key = peg$currPos * 84 + 33;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseRelations();
    if (s0 === peg$FAILED) {
      s0 = peg$parseThing();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRelations() {
    var s0;

    var key = peg$currPos * 84 + 34;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseMaps();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePartition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCongruent();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSubset();
          if (s0 === peg$FAILED) {
            s0 = peg$parseElementOf();
            if (s0 === peg$FAILED) {
              s0 = peg$parseNotEltOf();
              if (s0 === peg$FAILED) {
                s0 = peg$parseDivides();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseLeq();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseLessThan();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseRelation();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseEquation();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseNotEqual();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseLoves();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseIs();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMaps() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 84 + 35;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseThing();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseThing();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8594) {
            s6 = peg$c44;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseThing();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f21(s1, s5, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePartition() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 36;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBinding();
    if (s1 === peg$FAILED) {
      s1 = peg$parseThing();
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 19).toLowerCase() === peg$c45) {
        s2 = input.substr(peg$currPos, 19);
        peg$currPos += 19;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBinding();
        if (s3 === peg$FAILED) {
          s3 = peg$parseThing();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCongruent() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 84 + 37;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBinding();
    if (s1 === peg$FAILED) {
      s1 = peg$parseThing();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 8776) {
        s2 = peg$c46;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBinding();
        if (s3 === peg$FAILED) {
          s3 = peg$parseThing();
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c47) {
            s4 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseBinding();
            if (s5 === peg$FAILED) {
              s5 = peg$parseThing();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f23(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSubset() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 38;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseThing();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8838) {
        s4 = peg$c48;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c49) {
          s4 = peg$c49;
          peg$currPos += 8;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c50) {
            s4 = peg$c50;
            peg$currPos += 10;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e59); }
          }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseThing();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNotEltOf() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 39;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseThing();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c51) {
        s2 = peg$c51;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseThing();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseElementOf() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 40;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseThing();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 8712) {
        s2 = peg$c52;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c53) {
          s2 = peg$c53;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseThing();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDivides() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 41;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseThing();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s2 = peg$c54;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c55) {
          s2 = peg$c55;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseThing();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLeq() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 42;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseThing();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8804) {
        s4 = peg$c56;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c57) {
          s4 = peg$c57;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseThing();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLessThan() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 43;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseThing();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s4 = peg$c58;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c59) {
          s4 = peg$c59;
          peg$currPos += 4;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseThing();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNotEqual() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 44;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseThing();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c60) {
        s2 = peg$c60;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c61) {
          s2 = peg$c61;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseThing();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f30(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRelation() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 45;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseBinding();
    if (s3 === peg$FAILED) {
      s3 = peg$parseThing();
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s4 = peg$c62;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseBinding();
        if (s4 === peg$FAILED) {
          s4 = peg$parseThing();
        }
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEquation() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 46;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseBinding();
    if (s3 === peg$FAILED) {
      s3 = peg$parseThing();
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c63;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseBinding();
        if (s4 === peg$FAILED) {
          s4 = peg$parseThing();
        }
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLoves() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 47;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseThing();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 2) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c64) {
          s4 = peg$c64;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
        if (s4 !== peg$FAILED) {
          s4 = peg$parseThing();
          if (s4 === peg$FAILED) {
            peg$currPos = s3;
            s3 = peg$FAILED;
          } else {
            s3 = s4;
          }
        } else {
          s3 = s4;
        }
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIs() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 48;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseThing();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 2) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c65) {
          s4 = peg$c65;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e74); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c66) {
            s4 = peg$c66;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e75); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c67) {
              s4 = peg$c67;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e76); }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s4 = peg$parseThing();
          if (s4 === peg$FAILED) {
            peg$currPos = s3;
            s3 = peg$FAILED;
          } else {
            s3 = s4;
          }
        } else {
          s3 = s4;
        }
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseThing() {
    var s0;

    var key = peg$currPos * 84 + 49;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseSet();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAlgebraic();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSet() {
    var s0;

    var key = peg$currPos * 84 + 50;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseComposition();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCartProd();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnion();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIntersection();
          if (s0 === peg$FAILED) {
            s0 = peg$parseRelativeComp();
            if (s0 === peg$FAILED) {
              s0 = peg$parseComplement();
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseComposition() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 51;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseAtomic();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8728) {
        s4 = peg$c68;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c69) {
          s4 = peg$c69;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseAtomic();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCartProd() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 52;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseCompAtomic();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 215) {
        s4 = peg$c70;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c71) {
          s4 = peg$c71;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseCompAtomic();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseUnion() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 53;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseCompAtomic();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8746) {
        s4 = peg$c72;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c73) {
          s4 = peg$c73;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e82); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c74) {
            s4 = peg$c74;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e83); }
          }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseCompAtomic();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIntersection() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 54;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseCompAtomic();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8745) {
        s4 = peg$c75;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c76) {
          s4 = peg$c76;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e85); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c77) {
            s4 = peg$c77;
            peg$currPos += 11;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e86); }
          }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseCompAtomic();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f38(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRelativeComp() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 55;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseCompAtomic();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8726) {
        s4 = peg$c78;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e87); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c79) {
          s4 = peg$c79;
          peg$currPos += 10;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e88); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseCompAtomic();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCompAtomic() {
    var s0;

    var key = peg$currPos * 84 + 56;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseComplement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAtomic();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseComplement() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 57;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAtomic();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 176) {
        s2 = peg$c80;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c81) {
          s2 = peg$c81;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f40(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAlgebraic() {
    var s0;

    var key = peg$currPos * 84 + 58;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseSum();
    if (s0 === peg$FAILED) {
      s0 = peg$parseProduct();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSum() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 84 + 59;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseProduct();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseProduct();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseProduct();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f41(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseProduct() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 60;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseRecip();
    if (s3 === peg$FAILED) {
      s3 = peg$parseFactorial();
      if (s3 === peg$FAILED) {
        s3 = peg$parseInversed();
        if (s3 === peg$FAILED) {
          s3 = peg$parseNegated();
        }
      }
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8901) {
        s4 = peg$c82;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c83) {
          s4 = peg$c83;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseRecip();
        if (s4 === peg$FAILED) {
          s4 = peg$parseFactorial();
          if (s4 === peg$FAILED) {
            s4 = peg$parseInversed();
            if (s4 === peg$FAILED) {
              s4 = peg$parseNegated();
            }
          }
        }
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRecip() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 61;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAtomic();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 8315) {
        s2 = peg$c84;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c85) {
          s2 = peg$c85;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c86) {
            s2 = peg$c86;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e96); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFactorial() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 62;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAtomic();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 65281) {
        s2 = peg$c87;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e97); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c88) {
          s2 = peg$c88;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e98); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f44(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInversed() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 63;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c89;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseExp();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f45(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNegated() {
    var s0, s1, s2;

    var key = peg$currPos * 84 + 64;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c90;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseExp();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExp() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 65;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseAtomic();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s4 = peg$c91;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parseAtomic();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAtomic() {
    var s0;

    var key = peg$currPos * 84 + 66;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseEFA();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePrefix();
      if (s0 === peg$FAILED) {
        s0 = peg$parseParenthesized();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEquivalenceClass();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTuple();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSymbol();
              if (s0 === peg$FAILED) {
                s0 = peg$parseNumber();
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePrefix() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 84 + 67;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseSymbol();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 8315) {
        s3 = peg$c84;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c85) {
          s3 = peg$c85;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c92) {
            s3 = peg$c92;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e102); }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseSymbol();
      if (s1 === peg$FAILED) {
        s1 = peg$parseParenthesized();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c93;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseExpression();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s7 = peg$parseExpression();
            if (s7 === peg$FAILED) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
          } else {
            s6 = s7;
          }
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c94;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
        if (s6 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c93;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e103); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseExpression();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parsecomma();
              if (s7 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 === peg$FAILED) {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                } else {
                  s6 = s7;
                }
              } else {
                s6 = s7;
              }
            }
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c94;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s6 !== peg$FAILED) {
              s3 = s5;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f48(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEFA() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 84 + 68;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 955) {
      s1 = peg$c95;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSymbol();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c93;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExpression();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c94;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f49(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEquivalenceClass() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 84 + 69;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c96;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseExpression();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        if (s5.length >= 2) {
          s6 = peg$FAILED;
        } else {
          s6 = peg$currPos;
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s7 = peg$parseExpression();
            if (s7 === peg$FAILED) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
          } else {
            s6 = s7;
          }
        }
      }
      if (s5.length < 1) {
        peg$currPos = s4;
        s4 = peg$FAILED;
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseExpression();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (s5.length >= 2) {
              s6 = peg$FAILED;
            } else {
              s6 = peg$currPos;
              s7 = peg$parsecomma();
              if (s7 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 === peg$FAILED) {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                } else {
                  s6 = s7;
                }
              } else {
                s6 = s7;
              }
            }
          }
          if (s5.length < 1) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c97;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f50(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseTuple() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 84 + 70;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 10216) {
      s1 = peg$c98;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseExpression();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$currPos;
        s7 = peg$parsecomma();
        if (s7 !== peg$FAILED) {
          s7 = peg$parseExpression();
          if (s7 === peg$FAILED) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
        } else {
          s6 = s7;
        }
      }
      if (s5.length < 1) {
        peg$currPos = s4;
        s4 = peg$FAILED;
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseExpression();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parsecomma();
            if (s7 !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 === peg$FAILED) {
                peg$currPos = s6;
                s6 = peg$FAILED;
              } else {
                s6 = s7;
              }
            } else {
              s6 = s7;
            }
          }
          if (s5.length < 1) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10217) {
          s3 = peg$c99;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f51(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseParenthesized() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 84 + 71;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c93;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c94;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f52(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNumber() {
    var s0;

    var key = peg$currPos * 84 + 72;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseDecimal();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNatural();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDecimal() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 84 + 73;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseNatural();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c100;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e111); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNatural() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 74;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r5.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e113); }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSymbolSeq() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 75;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseSymbol();
    if (s3 === peg$FAILED) {
      s3 = peg$parseNumber();
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parsecomma();
      if (s4 !== peg$FAILED) {
        s4 = peg$parseSymbol();
        if (s4 === peg$FAILED) {
          s4 = peg$parseNumber();
        }
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f53(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSymbol() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 84 + 76;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 8801) {
      s1 = peg$c102;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c103) {
        s1 = peg$c103;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e116); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 126) {
          s1 = peg$c62;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c8;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
            }
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c8;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$currPos;
            peg$silentFails++;
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e111); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseReservedWord();
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = undefined;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$r6.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e117); }
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$r6.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e117); }
                  }
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f54(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBindingSymbol() {
    var s0, s1;

    var key = peg$currPos * 84 + 77;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c104) {
      s1 = peg$c104;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 14) === peg$c105) {
        s1 = peg$c105;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f55();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8704) {
        s1 = peg$c106;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c107) {
          s1 = peg$c107;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e121); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c108) {
            s1 = peg$c108;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e122); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f56();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 8707) {
          s1 = peg$c109;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e123); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c110) {
            s1 = peg$c110;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e124); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f57();
        }
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecomma() {
    var s0;

    var key = peg$currPos * 84 + 78;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c111;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseperiod() {
    var s0;

    var key = peg$currPos * 84 + 79;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c100;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    var key = peg$currPos * 84 + 80;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e126); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var key = peg$currPos * 84 + 81;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseReservedChars() {
    var s0, s1;

    var key = peg$currPos * 84 + 82;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (peg$r8.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseReservedWord() {
    var s0;

    var key = peg$currPos * 84 + 83;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 4) === peg$c38) {
      s0 = peg$c38;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c40) {
        s0 = peg$c40;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c64) {
          s0 = peg$c64;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c83) {
            s0 = peg$c83;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e93); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c81) {
              s0 = peg$c81;
              peg$currPos += 11;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e90); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c79) {
                s0 = peg$c79;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e88); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c76) {
                  s0 = peg$c76;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e85); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c73) {
                    s0 = peg$c73;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e82); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c71) {
                      s0 = peg$c71;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e80); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c59) {
                        s0 = peg$c59;
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e68); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c57) {
                          s0 = peg$c57;
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e66); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c53) {
                            s0 = peg$c53;
                            peg$currPos += 4;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e62); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c49) {
                              s0 = peg$c49;
                              peg$currPos += 8;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e58); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 9) === peg$c37) {
                                s0 = peg$c37;
                                peg$currPos += 9;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e46); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c35) {
                                  s0 = peg$c35;
                                  peg$currPos += 5;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c112) {
                                    s0 = peg$c112;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e128); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 15) === peg$c113) {
                                      s0 = peg$c113;
                                      peg$currPos += 15;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e129); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 9) === peg$c55) {
                                        s0 = peg$c55;
                                        peg$currPos += 9;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e64); }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

 
  //   * replace toxic unicode chars with equivalents
  input = input.replace(/𝜎/g, 'σ')
  input = input.replace(/𝜆/g, 'λ')
  input = input.replace(/≠/g, ' neq ')  
  input = input.replace(/∉/g, ' notin ') 
  
  //   * since we want to use → for maps, we replace the contradiction symbol pair up front
  input = input.replace(/→←/g, ' contradiction ')
  //   * we also prefer to write 'equivalence relation', etc. than equivalence_relation
  input = input.replace(/equivalence relation/g, ' equivalence_relation ')
  input = input.replace(/strict partial order/g, ' strict_partial_order ')
  input = input.replace(/partial order/g, ' partial_order ')
  input = input.replace(/total order/g, ' total_order ')
  //   * in order to use ~ and ≈ as both infix operations AND sets (and talk about their
  //     properties) we replace '~' and '≈' up front with (~) and (≈) respectively.
  input = input.replace(/'~'/g, '(~)')
  input = input.replace(/'≈'/g, '(≈)')
  //   * Let's used to require a colon ':Let' but we no longer require it, so 
  //     for backwards compatibility, remove it if its there.
  input = input.replace(/:([Ll]et )/g, '$1') 
  //   * Declaring reserved constants is tricky since it tries to parse them as they are
  //     intended to be used, so for now we convert any line of the form `Declare stuff`
  //     to escaped putdown up front.
  input = input.replace(/[Dd]eclare *(.*)$/mg, '«\\text{Declare $1}»')
  //   * also look for lines containing only a ➤ and whitespace, and replace
  //     them with (➤ " ") to act as a line break in the output
  input = input.replace(/^([ \t]*)➤[ \t]*$/mg, '$1➤ " " \n')
  //   * delete comments (but leave any \n's to keep the line counts right)
  input = input.replace(/\/\/[^\n\r]*(\n|\r|$)/g, '\n')
  //   * Replace tabs with a space
  input = input.replace(/\t/g, ' ')
  //   * shrink consecutive spaces to a single space
  input = input.replace(/ ( +)/g,' ') 
  //   * remove spaces around reserved infix unicode ops not inside literal putdown so
  //     the parser doesn't have to find and avoid them
  input = input.replace(/(?<!«[^«»]*)\s*([,.↦+⋅/^=<≤→⇒⇔|∩∪×∈⊆∖~≈])\s*(?![^«»]*»)/g,'$1')
  //   * same for prefix ops
  input = input.replace(/(?<!«[^«»]*)([-({∀∃])[ \t]*(?![^«»]*»)/g,'$1')
  //   * same for postfix ops
  input = input.replace(/(?<!«[^«»]*)[ \t]*([⁻°！)}])(?![^«»]*»)/g,'$1')
  //   * replace all '/' with '⋅/'
  input = input.replace(/(?<!«[^«»]*)\/(?![^«»]*»)/g,'⋅/')
  
  // uncomment the following for debugging
  // say(input)

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export {
  peg$SyntaxError as SyntaxError,

  peg$parse as parse
};
